{
  "address": "0x9a5a48d2e3407EC47f4aeB66880C1D5737E38069",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "totalLiquidity",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "currentStakedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stakerInitialStakedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stakerTotalCollateral",
          "type": "int256"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isStake",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "burnedSlp",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "unstakeLp",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "unstakeUsdc",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lp_fee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "usdc_fee",
          "type": "int256"
        }
      ],
      "name": "LogStakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "slpAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stakingProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradingProfit",
          "type": "int256"
        }
      ],
      "name": "LogUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRIPS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "approveStrips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDao",
          "type": "address"
        }
      ],
      "name": "changeDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "changeStakingPnl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "changeSushiRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "changeTradingPnl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "notional",
          "type": "int256"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "periodLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "washTime",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "slpToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "strpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stripsProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dao",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "rewardTotalPerSecTrader",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rewardTotalPerSecStaker",
              "type": "int256"
            }
          ],
          "internalType": "struct IRewarder.InitParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stripsProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pairOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tradingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "penaltyPeriod",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyFee",
              "type": "int256"
            }
          ],
          "internalType": "struct IStripsLpToken.TokenParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createSLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOracleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "ensureFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalLiquidityChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLongs",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPairOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPartedLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "tradingLiquidity",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "stakingLiquidity",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShorts",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrips",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSushiRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IStrips",
              "name": "stripsProxy",
              "type": "address"
            },
            {
              "internalType": "contract IAssetOracle",
              "name": "assetOracle",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapLpOracle",
              "name": "pairOracle",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "initialPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "burningCoef",
              "type": "int256"
            },
            {
              "internalType": "contract IUniswapV2Pair",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "tradingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "strpToken",
              "type": "address"
            }
          ],
          "internalType": "struct StorageMarketLib.InitParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_sushiRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInsurance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRewardable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m_state",
      "outputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IStrips",
              "name": "stripsProxy",
              "type": "address"
            },
            {
              "internalType": "contract IAssetOracle",
              "name": "assetOracle",
              "type": "address"
            },
            {
              "internalType": "contract IUniswapLpOracle",
              "name": "pairOracle",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "initialPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "burningCoef",
              "type": "int256"
            },
            {
              "internalType": "contract IUniswapV2Pair",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "tradingToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "strpToken",
              "type": "address"
            }
          ],
          "internalType": "struct StorageMarketLib.InitParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "contract IStripsLpToken",
          "name": "slpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "totalLongs",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "totalShorts",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "demand",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "supply",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_prevLiquidity",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isSuspended",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "sushiRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "notional",
          "type": "int256"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "notional",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "priceChange",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69d11cab4d0bd584724703c55ffbb5f2a701b0274dfd9971d8c0a5a58e269414",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0x9a5a48d2e3407EC47f4aeB66880C1D5737E38069",
    "transactionIndex": 0,
    "gasUsed": "99627440",
    "logsBloom": "0x
    "blockHash": "0x84ae6b4560df5c551754aad81afde0130bea367e502ccd9818f5a6e9c18be03b",
    "transactionHash": "0x69d11cab4d0bd584724703c55ffbb5f2a701b0274dfd9971d8c0a5a58e269414",
    "logs": [],
    "blockNumber": 7139157,
    "cumulativeGasUsed": "76879058",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalLiquidity\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"currentStakedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stakerInitialStakedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stakerTotalCollateral\",\"type\":\"int256\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStake\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"burnedSlp\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"unstakeLp\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"unstakeUsdc\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lp_fee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"usdc_fee\",\"type\":\"int256\"}],\"name\":\"LogStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"slpAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stakingProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradingProfit\",\"type\":\"int256\"}],\"name\":\"LogUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRIPS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"approveStrips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDao\",\"type\":\"address\"}],\"name\":\"changeDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"changeStakingPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeSushiRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"changeTradingPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"washTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"slpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"strpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stripsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"rewardTotalPerSecTrader\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rewardTotalPerSecStaker\",\"type\":\"int256\"}],\"internalType\":\"struct IRewarder.InitParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stripsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"penaltyPeriod\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyFee\",\"type\":\"int256\"}],\"internalType\":\"struct IStripsLpToken.TokenParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createSLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOracleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"ensureFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalLiquidityChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLongs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartedLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tradingLiquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakingLiquidity\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShorts\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrips\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStrips\",\"name\":\"stripsProxy\",\"type\":\"address\"},{\"internalType\":\"contract IAssetOracle\",\"name\":\"assetOracle\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapLpOracle\",\"name\":\"pairOracle\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"burningCoef\",\"type\":\"int256\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"strpToken\",\"type\":\"address\"}],\"internalType\":\"struct StorageMarketLib.InitParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInsurance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_state\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IStrips\",\"name\":\"stripsProxy\",\"type\":\"address\"},{\"internalType\":\"contract IAssetOracle\",\"name\":\"assetOracle\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapLpOracle\",\"name\":\"pairOracle\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"burningCoef\",\"type\":\"int256\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"strpToken\",\"type\":\"address\"}],\"internalType\":\"struct StorageMarketLib.InitParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IStripsLpToken\",\"name\":\"slpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"totalLongs\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalShorts\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"demand\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"supply\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_prevLiquidity\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isSuspended\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sushiRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"priceChange\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLongs()\":{\"returns\":{\"_0\":\"in USDC\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getShorts()\":{\"returns\":{\"_0\":\"in USDC\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"maxNotional()\":{\"returns\":{\"_0\":\"maximum position size (after leverage) in USDC\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLongs()\":{\"notice\":\"total longs positions notional for this market. \"},\"getShorts()\":{\"notice\":\"total shorts positions notional for this market. \"},\"maxNotional()\":{\"notice\":\"using to receive the maximum position size for the current market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/markets/IrsMarket.sol\":\"IrsMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\",\"keccak256\":\"0xa52b795338492390cf88dcd1520683ed7b6635568b83401d5191d0cf77cdc746\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/external/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x7cc5d7b58e5f68a1cfad4cd838b8354cda08ce8a65c89f5f5175ba3b839b5bab\"},\"contracts/impl/SlpFactoryImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { Rewarder } from \\\"../reward/Rewarder.sol\\\";\\n\\nlibrary SlpFactoryImpl {\\n    using SignedBaseMath for int256;\\n    /*\\n        Factory method, to reduce contract size\\n        Creating code is huge\\n     */\\n    function _slpFactory(\\n        IStripsLpToken.TokenParams memory _params,\\n        string memory _name,\\n        string memory _symbol \\n    ) external returns (IStripsLpToken) \\n    {\\n        return new SLPToken(_params,\\n                            _name,\\n                            _symbol);\\n    }\\n\\n    function _rewarderFactory(\\n        IRewarder.InitParams memory _params\\n    ) external returns (IRewarder)\\n    {\\n        return new Rewarder(_params);\\n    }\\n}\\n\",\"keccak256\":\"0x84cc03cca7428033fd4da2c5419c216375522f258e1580abee5cde9d953792ac\"},\"contracts/impl/StakingImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { StakebleEvents, IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\n\\nimport { IUniswapV2Router02 } from \\\"../external/interfaces/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Factory } from \\\"../external/interfaces/IUniswapV2Factory.sol\\\";\\n\\n\\nlibrary StakingImpl {\\n    using SignedBaseMath for int256;\\n\\n    struct BurnParams{\\n        IUniswapV2Router02 router;\\n        IUniswapV2Factory factory;\\n        IUniswapV2Pair pair;\\n\\n        address strp;\\n        address usdc;\\n\\n        int256 strpReserve;\\n        int256 usdcReserve;\\n\\n        int256 liquidity;\\n\\n        int256 amountIn;  //strp to swap\\n        int256 amountOutMin; //minimum usdc to receive on swap\\n    }\\n\\n    modifier onlyStaker (address staker) {\\n        require(msg.sender == staker, \\\"STAKER_ONLY\\\");\\n         _;\\n    }\\n\\n    function _stake(\\n        IStripsLpToken slpToken,\\n        address staker,\\n        int256 amount\\n    ) external onlyStaker(staker) {\\n        require(amount > 0, \\\"WRONG_AMOUNT\\\");\\n        slpToken.accumulatePnl();\\n\\n        //The staker already has stake, need to store current Profit\\n        if (slpToken.balanceOf(staker) > 0){\\n            slpToken.saveProfit(staker);\\n        }\\n\\n        SafeERC20.safeTransferFrom(IERC20(slpToken.getParams().stakingToken), \\n                                    staker, \\n                                    address(this), \\n                                    uint(amount));\\n\\n        slpToken.mint(staker, uint(amount));\\n\\n        if (IStakeble(address(this)).isRewardable()){\\n            address rewarder = IRewardable(address(this)).getRewarder();\\n            IRewarder(rewarder).rewardStaker(staker);\\n        }\\n    }\\n\\n  \\n    function _unstake(\\n        IStripsLpToken slpToken,\\n        address staker,\\n        int256 amount\\n    ) external onlyStaker(staker) {\\n        slpToken.canUnstake(staker, uint(amount));\\n\\n        slpToken.accumulatePnl();\\n\\n        (int256 stakingProfit,\\n            int256 tradingProfit) = slpToken.claimProfit(staker, uint(amount));\\n\\n        require(stakingProfit > 0 && tradingProfit >= 0, \\\"NO_PROFIT\\\");\\n\\n        if (stakingProfit > 0){\\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().stakingToken), \\n                                    staker, \\n                                    uint(stakingProfit));\\n        }\\n\\n        if (tradingProfit > 0){\\n            int256 diff = int256(IERC20(slpToken.getParams().tradingToken).balanceOf(address(this))) - tradingProfit;\\n            if (diff < 0){\\n                /*Burn LP to get USDC*/\\n                diff *= -1;\\n\\n                _burnPair(slpToken, diff);\\n            }\\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().tradingToken), \\n                                    staker, \\n                                    uint(tradingProfit));\\n\\n        }\\n\\n        StakebleEvents.logUnstakeData(SLPToken(address(slpToken)).owner(), \\n                                                staker, \\n                                                amount,\\n                                                stakingProfit,\\n                                                tradingProfit);\\n\\n        if (IStakeble(address(this)).isRewardable()){\\n            address rewarder = IRewardable(address(this)).getRewarder();\\n            IRewarder(rewarder).rewardStaker(staker);\\n        }\\n    }\\n\\n    function _burnPair(\\n        IStripsLpToken slpToken,\\n        int256 requiredAmount\\n    ) public {\\n        //ONLY if we are in Owner context (address(this) == owner), otherwise revert\\n        slpToken.checkOwnership();\\n\\n        require(requiredAmount > 0, \\\"WRONG_AMOUNT\\\");\\n    /*\\n            Steps for burning LP:\\n            1. Find reserves\\n            2. Calc liquidity amount to burn\\n            3. Burn\\n            4. Swap STRP to USDC with slippage\\n            5. Reflect lp and usdc growth\\n         */\\n\\n        BurnParams memory params;\\n\\n        params.strp = IStakeble(address(this)).getStrp();\\n        params.usdc = slpToken.getParams().tradingToken;\\n        \\n        params.router = IUniswapV2Router02(IStakeble(address(this)).getSushiRouter());\\n        params.factory = IUniswapV2Factory(params.router.factory());\\n        params.pair = IUniswapV2Pair(params.factory.getPair(\\n            params.strp,\\n            params.usdc));\\n        require(address(params.pair) != address(0), \\\"ZERO_PAIR_CONTRACT\\\");\\n\\n        (uint112 reserve0,\\n            uint112 reserve1,) = params.pair.getReserves();\\n\\n        if (address(params.strp) == params.pair.token0()){\\n            params.strpReserve = int256(uint(reserve0));\\n            params.usdcReserve = int256(uint(reserve1));\\n        }else{\\n            params.strpReserve = int256(uint(reserve1));\\n            params.usdcReserve = int256(uint(reserve0));\\n        }\\n\\n        /*How much liquidity we need to burn? */\\n        int256 supply = int256(params.pair.totalSupply());\\n\\n        /*Just 10% maximum for don't care about the fee */\\n        params.liquidity = (requiredAmount.muld(supply).divd(params.usdcReserve)).muld(SignedBaseMath.onpointOne());\\n\\n\\n        /*\\n            Need to calc balance before burn - as we need to change PNL to differ\\n         */\\n        int256 lp_balance = int256(params.pair.balanceOf(address(this)));\\n        int256 usdc_balance = int256(IERC20(params.usdc).balanceOf(address(this)));\\n\\n        /*BURN:\\n            address tokenA,\\n            address tokenB,\\n            uint liquidity,\\n            uint amountAMin,\\n            uint amountBMin,\\n            address to,\\n            uint deadline\\n         */\\n        params.pair.approve(address(params.router), uint(params.liquidity));\\n        params.router.removeLiquidity(\\n            address(params.usdc), \\n            address(params.strp), \\n            uint(params.liquidity), \\n            uint(requiredAmount),\\n            0, \\n            address(this), \\n            block.timestamp + 200);\\n\\n        /*\\n            Change reserves\\n         */\\n        (reserve0,\\n            reserve1,) = params.pair.getReserves();\\n\\n        if (address(params.strp) == params.pair.token0()){\\n            params.strpReserve = int256(uint(reserve0));\\n            params.usdcReserve = int256(uint(reserve1));\\n        }else{\\n            params.strpReserve = int256(uint(reserve1));\\n            params.usdcReserve = int256(uint(reserve0));\\n        }\\n\\n\\n        /*NOW SWAP */\\n        params.amountIn = int256(IERC20(params.strp).balanceOf(address(this)));\\n        require(params.amountIn > 0, \\\"BURN_FAILED_ZERO_STRP\\\");\\n\\n        IERC20(params.strp).approve(address(params.router), uint(params.amountIn));\\n        params.amountOutMin = int256(params.router.quote(uint(params.amountIn), uint(params.strpReserve), uint(params.usdcReserve)));\\n\\n        /*10% slippage */\\n        params.amountOutMin = params.amountOutMin.muld(SignedBaseMath.ninetyPercent());\\n        address[] memory path = new address[](2);\\n        path[0] = params.strp;\\n        path[1] = params.usdc;\\n\\n        params.router.swapExactTokensForTokens(\\n            uint(params.amountIn),\\n            uint(params.amountOutMin),\\n            path,\\n            address(this),\\n            block.timestamp + 200\\n        );\\n        \\n        /*Calc change in balance */\\n        int256 lp_diff = int256(params.pair.balanceOf(address(this))) - lp_balance;\\n        require (lp_diff < 0, \\\"LP_BURN_ERROR\\\");\\n\\n        int256 usdc_diff = int256(IERC20(params.usdc).balanceOf(address(this))) - usdc_balance;\\n        require (usdc_diff > 0, \\\"USDC_BURN_ERROR\\\");\\n\\n        /*Reflect change*/\\n        slpToken.changeStakingPnl(lp_diff);\\n        slpToken.changeTradingPnl(usdc_diff);\\n    }\\n}\\n\\n\\n\\n/*\\n********** The staking PNL distribution explained ****************************\\n\\n|.........(pnl0)(ts0)|staker1(+sa1).............(pnl1)(ts1)|staker2 (+sa2)...........(pnl2)(ts2)|staker3 (+sa3)........(pnl3)(ts3)|staker2 (-sa21)\\n\\n\\npnl(i) - pnl of the market at moment(i)\\nts(i) - SLP total Supply at moment (i)\\n+-sa(i) - staked amount of staker (i) \\n\\nWhen staker2 unstake (-sa21) the formula to calculate the profit:\\n\\nprofit = (pnl2 - pnl1) * sa21/ts2 + (pnl3 - pnl2) * sa21/ts3 = sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3] \\n\\nMOMENT 0:\\n1. totalCummulativePnl = 0\\n\\nWHEN STAKER1 STAKE (corner case):\\n1. if ts0 == 0, ts0 =1\\n2. totalCummulativePnl += pnl0 / ts0  \\n3. staker1.initialStakedPnl = totalCummulativePnl\\n4. prevPnl = pnl0\\n\\nWHEN STAKER2 STAKE:\\n1. currentPnl = pnl1\\n2. currentStakedPnl = (currentPnl - prevPnl) / ts1\\n3. totalCummulativePnl += currentStakedPnl\\n4. staker2.initialStakedPnl = totalCummulativePnl\\n5. prevPnl = currentPnl(pnl1)\\n\\nWHEN STAKER3 STAKE:\\n0. currentPnl = pnl2\\n1. currentStakedPnl = (currentPnl - prevPnl) / ts2\\n2. totalCummulativePnl += currentStakedPnl\\n3. staker3.initialStakedPnl = totalCummulativePnl\\n4. prevPnl = currentPnl(pnl2)\\n\\nWHEN STAKER2 UNSTAKE:\\n1. currentPnl = pnl3\\n2. currentStakedPnl = (currentPnl - prevPnl) / ts3\\n3. totalCummulativePnl += currentStakedPnl\\n4. cummulativeGrowth = totalCummulativePnl - staker2.initialStakedPnl\\n5. profit = sa21 * cummulativeGrowth\\n6. PAY profit - send real money  (this profit will be excluded from total on the next step when we will calc pnl again)\\n7. prevPnl = currentPnl\\n\\n\\nLet's unwind the formula\\n\\nWHEN STAKER2 UNSTAKE:\\n\\nprofit = sa21 * cummulativeGrowth = sa21 * [totalCummulativePnl - staker2.initialStakedPnl] =\\n= sa21 * [pnl0/ts0 + (pnl1 - pnl0)/ts1 + (pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3 - pnl0/ts0 - (pnl1 - pnl0) / ts1] =\\n= sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3]\\n\\n\\n******************************************************************************\\n*/\",\"keccak256\":\"0x890f76b7a6b4ff33703020593e169e719be1487579c37cf7652f05ee79437846\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewardable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"./IRewarder.sol\\\";\\n\\ninterface IRewardable {\\n    function createRewarder(IRewarder.InitParams memory _params) external;\\n    function getRewarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x41b21e1eb0519392072e64c1443706859afd275eda09e3b8ae400aa1efc7c6ba\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"},\"contracts/markets/Getters.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport { MState } from \\\"./State.sol\\\";\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StakingImpl } from \\\"../impl/StakingImpl.sol\\\";\\nimport { AssetOracle } from \\\"../oracle/AssetOracle.sol\\\";\\n\\nabstract contract MGetters is\\n    IMarket,\\n    MState\\n{\\n    using StorageMarketLib for StorageMarketLib.State;\\n    using SignedBaseMath for int256;\\n\\n    function currentPrice() external view override returns (int256) {\\n        return m_state.currentPrice();\\n    }\\n\\n    function oraclePrice() external view override returns (int256) {\\n        return m_state.oraclePrice();\\n    }\\n    \\n    /**\\n     * @notice total longs positions notional for this market. \\n     * @return in USDC\\n     */\\n    function getLongs() external view override returns (int256) \\n    {\\n        return m_state.totalLongs;\\n    }\\n\\n    /**\\n     * @notice total shorts positions notional for this market. \\n     * @return in USDC\\n     */\\n    function getShorts() external view override returns (int256) {\\n        return m_state.totalShorts;\\n    }\\n\\n    /**\\n     * @notice using to receive the maximum position size for the current market\\n     * @return maximum position size (after leverage) in USDC\\n     */\\n    function maxNotional() external view override returns (int256) {\\n        return m_state.maxNotional();\\n    }\\n\\n\\n    function getPrices() external view override returns (int256, int256) {\\n        return m_state.getPrices();\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return m_state.getLiquidity();\\n    }\\n\\n    function getPartedLiquidity() external view override returns (int256 tradingLiquidity, int256 stakingLiquidity) {\\n        tradingLiquidity = m_state.calcTradingLiqudity();\\n        stakingLiquidity = m_state.calcStakingLiqudity();\\n    }\\n\\n    function getAssetOracle() external view override returns (address)\\n    {\\n        return address(m_state.params.assetOracle);\\n    }\\n\\n    function getPairOracle() external view override returns (address)\\n    {\\n        return address(m_state.params.pairOracle);\\n    }\\n\\n    function currentOracleIndex() external view override returns (uint256) \\n    {\\n        return AssetOracle(address(m_state.params.assetOracle)).lastCumulativeIndex();\\n    }\\n\\n\\n}\",\"keccak256\":\"0xa8fc18b599fca330a72444c5778fc121637c7a371628323bdace0efd4025bc06\"},\"contracts/markets/IrsMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { MGetters } from \\\"./Getters.sol\\\";\\nimport { StakingImpl } from \\\"../impl/StakingImpl.sol\\\";\\nimport { SlpFactoryImpl } from \\\"../impl/SlpFactoryImpl.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n//Market contract for particular derivative\\n//Should implement asset specific methods and calculations\\n//TODO: set owner STRIPS\\ncontract IrsMarket is\\n    IMarket,\\n    IStakeble,\\n    IRewardable,\\n    MGetters,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SignedBaseMath for int256;\\n    using StorageMarketLib for StorageMarketLib.State;\\n\\n    bytes32 public constant STRIPS_ROLE = keccak256(\\\"STRIPS_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    modifier notSuspended() {\\n        require(m_state.isSuspended == false, \\\"SUSPENDED\\\");\\n        require(address(m_state.slpToken) != address(0), \\\"SLP_NOT_CREATED\\\");\\n         _;\\n    }\\n\\n    function initialize (\\n        StorageMarketLib.InitParams memory _params,\\n        address _sushiRouter,\\n        address _dao\\n    ) public initializer\\n    {\\n        require(Address.isContract(_sushiRouter), \\\"SUSHI_ROUTER_NOT_A_CONTRACT\\\");\\n        require(address(_params.stripsProxy) != address(0), \\\"NO_STRIPS_ERROR\\\");\\n        require(_dao != address(0), \\\"ZERO_DAO\\\");\\n\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        m_state.dao = _dao;\\n        m_state.params = _params;\\n        m_state.sushiRouter = _sushiRouter;\\n\\n        m_state.createdAt = block.timestamp;\\n\\n        if (m_state.ratio == 0){\\n            m_state.ratio = SignedBaseMath.oneDecimal();\\n        }\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(OWNER_ROLE, msg.sender);\\n        _setupRole(STRIPS_ROLE, address(_params.stripsProxy));\\n    }\\n\\n    function isRewardable() external view override returns (bool)\\n    {\\n        return true;        \\n    }\\n\\n    function changeDao(address _newDao) external onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        m_state.dao = _newDao;\\n    }\\n\\n\\n    function getStrips() external view override returns (address) {\\n        return address(m_state.params.stripsProxy);\\n    }\\n\\n    function createRewarder(IRewarder.InitParams memory _params) external override onlyRole(OWNER_ROLE)\\n    {\\n        require(address(m_state.rewarder) == address(0), \\\"REWARDER_EXIST\\\");\\n\\n        m_state.rewarder = SlpFactoryImpl._rewarderFactory(_params);\\n\\n    }\\n\\n    function getRewarder() external view override returns (address)\\n    {\\n        return address(m_state.rewarder);\\n    }\\n\\n\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external override onlyRole(OWNER_ROLE) {\\n        require(address(m_state.slpToken) == address(0), \\\"LP_TOKEN_EXIST\\\");\\n\\n        \\n        m_state.slpToken = SlpFactoryImpl._slpFactory(_params,\\n                                                    \\\"SLP Token\\\",\\n                                                    \\\"SLP\\\");\\n    }\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external override onlyRole(STRIPS_ROLE) {\\n        m_state.approveStrips(_token, _amount);\\n    }\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n        \\n        if (isLong == true){\\n            m_state.totalLongs += notional;\\n            m_state._updateRatio(notional, 0);\\n        }else{\\n            m_state.totalShorts += notional;\\n            m_state._updateRatio(0, notional);\\n        }\\n\\n        return m_state.currentPrice();\\n    }\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n\\n        //TODO: check for slippage, if it's big then the trader PAY slippage\\n        if (isLong){\\n            m_state.totalLongs -= notional;\\n            require(m_state.totalLongs >= 0, \\\"TOTALLONGS_LT_0\\\");\\n            \\n            m_state._updateRatio(0 - notional, 0);\\n        }else{\\n            m_state.totalShorts -= notional;\\n            require(m_state.totalShorts >= 0, \\\"TOTALSHORTS_LT_0\\\");\\n\\n            m_state._updateRatio(0, 0 - notional);\\n        }\\n\\n        return m_state.currentPrice();\\n    }\\n\\n\\n    // SHORT: openPrice = initialPrice * (demand / (supply + notional))\\n    // LONG: openPrice = initialPrice * (demand / (supply + notional))\\n    // demand = total_longs + stackedLiquidity;\\n    // supply = total_shorts + stackedLiquidity \\n    function priceChange(\\n        int256 notional,\\n        bool isLong\\n    ) public view override returns (int256){\\n        if (isLong){\\n            return _priceChangeOnLong(notional);\\n        }\\n\\n        return _priceChangeOnShort(notional);\\n    }\\n\\n    function _priceChangeOnLong(\\n        int256 notional\\n    ) private view returns (int256){\\n\\n        int256 ratio = m_state._whatIfRatio(notional, 0);\\n\\n        return m_state.params.initialPrice.muld(ratio);\\n    }\\n\\n    function _priceChangeOnShort(\\n        int256 notional\\n    ) private view returns (int256){\\n        int256 ratio = m_state._whatIfRatio(0, notional);\\n\\n        return m_state.params.initialPrice.muld(ratio);\\n    }\\n\\n\\n    /*\\n    ********************************************************************\\n    * Stake/Unstake related functions\\n    ********************************************************************\\n    */\\n    function liveTime() external view override returns (uint){\\n        return block.timestamp - m_state.createdAt;\\n    }\\n\\n    function isInsurance() external view override returns (bool){\\n        return false;\\n    }\\n\\n    function totalStaked() external view override returns (int256)\\n    {\\n        return m_state.calcStakingLiqudity();\\n    }\\n\\n    function getSlpToken() external view override returns (address) {\\n        return address(m_state.slpToken);\\n    }\\n\\n    function getStakingToken() external view override returns (address)\\n    {\\n        return address(m_state.params.stakingToken);\\n    }\\n\\n    function getTradingToken() external view override returns (address)\\n    {\\n        return address(m_state.params.tradingToken);\\n    }\\n\\n    function ensureFunds(int256 amount) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) {\\n        int256 diff = m_state.calcTradingLiqudity() - amount;\\n        if (diff >= 0){\\n            return;\\n        }\\n\\n        //diff *= -1;\\n        StakingImpl._burnPair(m_state.slpToken,\\n                                amount);\\n    }\\n\\n    function stake(int256 amount) external override nonReentrant notSuspended {\\n        StakingImpl._stake(m_state.slpToken,\\n                            msg.sender,\\n                            amount);\\n    }\\n\\n    function unstake(int256 amount) external override nonReentrant notSuspended {\\n        StakingImpl._unstake(m_state.slpToken,\\n                            msg.sender,\\n                            amount);\\n        \\n    }\\n\\n    function externalLiquidityChanged() external override nonReentrant onlyRole(STRIPS_ROLE){\\n\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\\n        m_state.slpToken.changeTradingPnl(amount);\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\\n        m_state.slpToken.changeStakingPnl(amount);\\n    }\\n\\n\\n    /* UTILS */\\n    function changeSushiRouter(address _router) external override onlyRole(OWNER_ROLE)\\n    {\\n        require(Address.isContract(_router), \\\"SUSHI_ROUTER_NOT_A_CONTRACT\\\");\\n\\n        m_state.sushiRouter = _router;\\n\\n    }\\n    function getSushiRouter() external view override returns (address)\\n    {\\n        return m_state.sushiRouter;\\n    }\\n\\n    function getStrp() external view override returns (address)\\n    {\\n        return address(m_state.params.strpToken);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0d5a0b0dee9c907c7093f44e6531e7e61f139d7bbde710ddb9662400a62927dc\"},\"contracts/markets/State.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\n\\nabstract contract MState\\n{\\n    StorageMarketLib.State public m_state;\\n}\",\"keccak256\":\"0x409f664b11793d8b100b1ba2d0439bf859ec29c14f674ac2c59aee3eb252a1b2\"},\"contracts/oracle/AssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\n\\ncontract AssetOracle is IAssetOracle\\n{\\n    using SignedBaseMath for int256;\\n\\n    address public stripsProxy;\\n    address public keeper;\\n    uint public lastTimeStamp;\\n\\n    int256 public lastApr;\\n\\n    uint256 public lastCumulativeIndex;\\n    uint256 public lastBlockNumUpdate;\\n    int256[] public cumulativeOracleAvg;\\n\\n    int256 constant ANN_PERIOD_SEC = 31536000;\\n    \\n    modifier activeOnly() {\\n        require(lastTimeStamp != 0, \\\"NOT_ACTIVE\\\");\\n         _;\\n    }\\n\\n    modifier keeperOnly() {\\n        require(msg.sender == keeper, \\\"NOT_A_KEEPER\\\");\\n         _;\\n    }\\n\\n    constructor(\\n        address _stripsProxy,\\n        address _keeper\\n    ){\\n        require(_keeper != address(0), \\\"BROKEN_KEEPER\\\");\\n        require(Address.isContract(_stripsProxy), \\\"STRIPS_NOT_A_CONTRACT\\\");\\n\\n        stripsProxy = _stripsProxy;\\n        keeper = _keeper;\\n    }\\n\\n    function getPrice() external view override activeOnly returns (int256){\\n        return lastApr;\\n    }\\n\\n    function changeKeeper(address _keeper) external keeperOnly {\\n        keeper = _keeper;\\n    }\\n\\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\\n        if (block.timestamp > lastTimeStamp){\\n            upkeepNeeded = true;\\n        }else{\\n            upkeepNeeded = false;\\n        }\\n    }\\n\\n    function accumulateOracle() internal {\\n        int256 aprPerSec = lastApr / ANN_PERIOD_SEC;\\n\\n        if (lastCumulativeIndex != 0){\\n            aprPerSec += cumulativeOracleAvg[lastCumulativeIndex-1];\\n        }\\n\\n        cumulativeOracleAvg.push(aprPerSec);\\n        lastCumulativeIndex += 1;\\n    }\\n\\n    function performUpkeep(bytes calldata _data) public virtual override keeperOnly {\\n        require(block.timestamp > lastTimeStamp, \\\"NO_NEED_UPDATE\\\");\\n        lastTimeStamp = block.timestamp;\\n\\n        lastApr = abi.decode(_data, (int256));\\n\\n        //TODO: calc and set APY here\\n        accumulateOracle();\\n    }\\n\\n    function calcOracleAverage(uint256 fromIndex) external view virtual override activeOnly returns (int256) {        \\n        require(lastCumulativeIndex > 0, \\\"ORACLE_NEVER_UPDATED\\\");\\n\\n        int256 avg = cumulativeOracleAvg[lastCumulativeIndex-1];\\n\\n        int256 len = int256(lastCumulativeIndex - fromIndex);\\n        if (len == 0){\\n            if (fromIndex > 1){\\n                return avg - cumulativeOracleAvg[fromIndex-2];\\n            }else{\\n                return avg;\\n            }\\n        }\\n\\n        if (fromIndex != 0){\\n            avg -= cumulativeOracleAvg[fromIndex-1];\\n        }\\n\\n        return avg / len;\\n    }\\n}\",\"keccak256\":\"0x4a28f53d7638dc351eb2cff77502f722f5fd75d6439d8e61f2b708df68adddaa\"},\"contracts/reward/Rewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Rewarder contract\\n * @dev Tracks stakers' and traders' contributions, calculates and pays rewards in SRP token.\\n * Deployed per asset (per market) as a separate instance.\\n * @author Strips Finance\\n **/\\ncontract Rewarder is IRewarder {\\n    bool private lock;\\n    address public owner;\\n\\n\\n    using SignedBaseMath for int256;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_AN_OWNER\\\");\\n         _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == params.admin, \\\"NOT_AN_ADMIN\\\");\\n         _;\\n    }\\n\\n    modifier onlyStripsOrOwner() {\\n        require(msg.sender == owner || msg.sender == params.stripsProxy, \\\"NOT_AN_OWNER_OR_STRIPS\\\");\\n         _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(lock == false, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        lock = true;\\n        _;\\n        lock = false;\\n    }\\n\\n    InitParams public params;\\n\\n    // Info on each participant of the reward program (common for both traders and stakers)\\n    struct TraderInfo {\\n        bool isClaimed;\\n\\n        /*Time when the position was opened. Use that to detect wash trades */\\n        uint256 lastTradeTime;\\n\\n        /*Number of period when the trader did his last trade */\\n        uint256 lastPeriod;\\n        \\n        /* The value of total AMM trading volume for lastPeriod */\\n        int256 accInitial;\\n        \\n        /*Cummulative trader's trade volume for the period */\\n        int256 periodTradingVolume;\\n\\n        /*Total current reward, it's not go to 0 if trader goes inactive, as you can claim at anytime */\\n        int256 reward;\\n    }\\n\\n    struct StakerInfo{\\n        uint256 timeInitial;\\n        int256 accInitial;\\n\\n        int256 slp;\\n        int256 reward;\\n    }\\n\\n    int256 public totalTradingRewardsClaimed;\\n    int256 public totalStakingRewardsClaimed;\\n\\n    uint256 public currentPeriod;\\n    uint256 public startTime;\\n\\n    /*Staking */\\n    uint256 public lastStakeTime;\\n    int256 public supplyStakeTotal;\\n    int256 public accStakeTotal;\\n\\n    /*Trading */\\n    uint256 public lastTradeTime;\\n    int256 public tradingVolumeTotal;\\n    int256 public accTradeTotal;\\n\\n\\n    mapping(uint256 => int256) public accPerPeriod;\\n    mapping(address => TraderInfo) public traders;\\n    mapping(address => StakerInfo) public stakers;\\n\\n    constructor(\\n        InitParams memory _params\\n    ) {\\n        params = _params;\\n        owner = msg.sender;\\n        startTime = 0;\\n\\n        totalTradingRewardsClaimed = 0;\\n        totalStakingRewardsClaimed = 0;\\n    }\\n\\n    function currentTradingReward() external view override returns(int256)\\n    {\\n        return params.rewardTotalPerSecTrader;\\n    }\\n\\n    function currentStakingReward() external view override returns (int256)\\n    {\\n        return params.rewardTotalPerSecStaker;\\n    }\\n\\n\\n    function changeTradingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (!isSwitched && tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accTradeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        }\\n\\n        params.rewardTotalPerSecTrader = _newRewardPerSec;\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    function changeStakingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        params.rewardTotalPerSecStaker = _newRewardPerSec;\\n        lastStakeTime = block.timestamp;\\n    }\\n\\n\\n    function changeDao(address _newDao) external onlyAdmin\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        params.dao = _newDao;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyAdmin\\n    {\\n        require(_newOwner != address(0), \\\"ZERO_OWNER\\\");\\n        owner = _newOwner;\\n    }\\n\\n    function changeAdmin(address _newAdmin) external onlyAdmin\\n    {\\n        require(_newAdmin != address(0), \\\"ZERO_ADMIN\\\");\\n        params.admin = _newAdmin;\\n    }\\n\\n\\n    /**\\n     * @dev Should be called each time someone stake/unstake.\\n     * @param _staker address of the staker\\n     **/\\n    function rewardStaker(address _staker) external override nonReentrant onlyStripsOrOwner {\\n        /*Accumulare reward for previous period and update accumulator */\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        /*Accumulate for the previous period if there was any supply */\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n        lastStakeTime = block.timestamp;\\n        supplyStakeTotal = int256(params.slpToken.totalSupply());\\n\\n        /*Update staker's stake*/\\n        stakers[_staker].accInitial = accStakeTotal;\\n        stakers[_staker].slp = int256(params.slpToken.balanceOf(_staker));\\n        stakers[_staker].timeInitial = block.timestamp;\\n    }\\n\\n    function claimStakingReward(address _staker) external override {\\n\\n        /*Accumulare reward and update staker's initial */\\n        //stakers[_staker].reward = totalStakerReward(_staker).muld(params.rewardTotalPerSecStaker);\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        if (stakers[_staker].reward <= 0){\\n            return;\\n        }\\n\\n        int256 accInstant = accStakeTotal;\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _staker, \\n                                    uint(stakers[_staker].reward));\\n        \\n        emit StakingRewardClaimed(\\n            _staker, \\n            stakers[_staker].reward\\n        );\\n\\n        totalStakingRewardsClaimed += stakers[_staker].reward;\\n\\n        /*Reset reward and time*/\\n        stakers[_staker].reward = 0;\\n        stakers[_staker].timeInitial = block.timestamp;\\n        stakers[_staker].accInitial = accInstant;\\n    }\\n\\n    function totalStakerReward(address _staker) public view override returns (int256 reward){\\n        /*If staker didn't stake he can't have reward yet */\\n        if (stakers[_staker].timeInitial == 0){\\n            return 0;\\n        }\\n\\n        /*if supply is 0 it means that everyone usntake and no more accumulation */\\n        if (supplyStakeTotal <= 0){\\n            return stakers[_staker].reward;\\n        }\\n\\n        /*Accumulate reward till current time */\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        int256 accInstant = accStakeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        return stakers[_staker].reward + stakers[_staker].slp.muld(accInstant - stakers[_staker].accInitial);\\n    }\\n\\n\\n    function totalTradeReward(address _trader) public view override returns (int256 reward){\\n        uint256 traderLastTrade = traders[_trader].lastTradeTime;\\n\\n        /*If trader didn't or no one trade then it's 0 */\\n        if (traderLastTrade == 0 || lastTradeTime == 0){\\n            return 0;\\n        }\\n\\n        /* What's the number of the current period? */\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /*Which period the trader last trade */\\n        uint256 traderLastPeriod = traders[_trader].lastPeriod;\\n\\n        int256 accInstant = 0;\\n        /* Accumulate reward for the previous period - ONLY till the end of period */\\n        if (_period > traderLastPeriod){\\n            accInstant = accPerPeriod[traderLastPeriod];\\n            if (accInstant == 0){\\n                /* updatePeriod never called. Need to calc accumulator first */\\n                /* |t(1)----period1---(traderLastTrade)----(lastTradeTime)<----timeDiff---->|(end of period)------call HERE| */\\n\\n                if (tradingVolumeTotal <= 0){\\n                    return traders[_trader].reward;\\n                }\\n\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accInstant = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n            }\\n\\n            int256 _newReward = traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n\\n            return traders[_trader].reward + _newReward;\\n        }\\n\\n        /*It's the same period*/\\n        if (tradingVolumeTotal <= 0){\\n            /*no one trade yet*/\\n            return traders[_trader].reward;\\n        }\\n        \\n        \\n        int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n        accInstant = accTradeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        return traders[_trader].reward + traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n    }\\n\\n\\n    \\n    /**\\n     * @dev Should be called each time trader trader.\\n     * @param _trader address of the trader\\n     * @param _notional current trade position size\\n     **/\\n    function rewardTrader(address _trader, int256 _notional) external override nonReentrant onlyStripsOrOwner {\\n        if (startTime == 0){\\n            /*Setup start time for all periods once first trader ever happened*/\\n            startTime = block.timestamp;\\n            currentPeriod = 0;\\n        }\\n\\n        int256 boostedNotional = _notional.muld(_booster(_trader));\\n        \\n        if ((block.timestamp - traders[_trader].lastTradeTime) < params.washTime && traders[_trader].isClaimed == false){\\n            /*If it's a wash trade just update period and return */\\n            _updatePeriod(boostedNotional);\\n\\n            lastTradeTime = block.timestamp;\\n            return;\\n        }\\n        \\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        bool isSwitched = _updatePeriod(boostedNotional);\\n        if (currentPeriod != traders[_trader].lastPeriod){\\n            isSwitched = true;\\n        }\\n\\n        /*Update trader */\\n        if (isSwitched){\\n            /*Reset volume */\\n            traders[_trader].periodTradingVolume = boostedNotional;\\n        }else{\\n            /*Accumulate trading volume for trader */\\n            traders[_trader].periodTradingVolume += boostedNotional;\\n        }\\n\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = false;\\n\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].accInitial = accTradeTotal;\\n\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Send all current reward to the trader\\n     **/\\n    function claimTradingReward(address _trader) external override {\\n\\n        //Accumulate any reward till this taime\\n        //traders[_trader].reward = totalTradeReward(_trader).muld(params.rewardTotalPerSecTrader);\\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        if (traders[_trader].reward <= 0){\\n            return;\\n        }\\n\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (isSwitched){\\n            traders[_trader].periodTradingVolume = 0;\\n        }\\n\\n        /*move accumulator */\\n        int256 accInstant = accTradeTotal;\\n        \\n        if (tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n        }\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _trader, \\n                                    uint(traders[_trader].reward));\\n\\n        emit TradingRewardClaimed(\\n            _trader,\\n            traders[_trader].reward\\n        );\\n\\n\\n        totalTradingRewardsClaimed += traders[_trader].reward;\\n\\n        /*Reset all params */\\n        traders[_trader].accInitial = accInstant;\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = true;\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].reward = 0;\\n\\n    }\\n\\n    /**\\n     * @dev Calls on each actions\\n     * @param _notional current trade notional\\n     * @return isSwitched true if period switched\\n     **/\\n    function _updatePeriod(int256 _notional) internal returns (bool isSwitched) {\\n        isSwitched = false;\\n\\n        /* _periods are not incremented by ONE.  It can be 1,2,5,8,12 Depends on when the last trade happened*/\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /* Reset period */\\n        if (_period > currentPeriod){\\n            if (lastTradeTime != 0){\\n                /* Calc the rest and save */\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accPerPeriod[currentPeriod] = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n                /* Reset total AMM trading volume and accumulator */\\n                tradingVolumeTotal = 0;\\n                accTradeTotal = 0;\\n\\n            } //else: //It's the first trade ever, just setup period\\n\\n            isSwitched = true;\\n            /*Switch period */\\n            currentPeriod = _period;\\n\\n        }\\n\\n        /* If it's the trade then change volume and accumulate it */\\n        if (_notional > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            if (lastTradeTime != 0 && tradingVolumeTotal > 0){\\n                // If it's not the first trade in period OR the first trade EVER\\n                int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n                accTradeTotal += (timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal));\\n            }\\n            tradingVolumeTotal += _notional;\\n        }\\n    }\\n\\n    function _booster(address _trader) internal returns (int256){\\n        int256 supply = int256(params.slpToken.totalSupply());\\n        if (supply <= 0) {\\n            return SignedBaseMath.oneDecimal();\\n        }\\n        return SignedBaseMath.oneDecimal() + int256(params.slpToken.balanceOf(_trader)).divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb3a36161c8ca25e23e1389aa2e77701981cc55bf4569d2aee48c9a64a6b1573b\"},\"contracts/token/SLPToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title SLP token using for adding \\\"stakebility\\\" to any asset\\n * @dev created by the asset. All calls for changing PNL are ownable:\\n * Have 2 tokens by default:\\n *  staking - the token that is using for staking to Asset (UNIV2 pair by default for the current version)\\n *  trading - the token that is using for accumulating profit. By default it's USDC\\n * @author Strips Finance\\n **/\\ncontract SLPToken is \\n    IStripsLpToken,\\n    ERC20, \\n    ReentrancyGuard,\\n    Ownable\\n{ \\n    using SignedBaseMath for int256;\\n\\n    // Developed to be able to track 2-tokens asset\\n    struct StakerData {\\n        bool exist;\\n\\n        //save initial staking/trading cummulative PNL on staker's stake event.\\n        int256 initialStakingPnl;\\n        int256 initialTradingPnl;\\n        \\n        uint256 initialBlockNum;\\n        uint256 initialTimeStamp;\\n\\n        //Save the current staking/trading unrealized profit when the staker stake 2+ time.\\n        int256 unrealizedStakingProfit;\\n        int256 unrealizedTradingProfit;\\n    }\\n\\n    int256 public prevStakingPnl;\\n    int256 public prevTradingPnl;\\n\\n    int256 public cummulativeStakingPnl;\\n    int256 public cummulativeTradingPnl;\\n    \\n    //For tracking trading/staking \\\"growth\\\", should be changed by the OWNER only \\n    int256 public cumTradingPNL;\\n    int256 public cumStakingPNL;\\n        \\n    \\n    //All data setup on init\\n    TokenParams private params;\\n    mapping (address => StakerData) public stakers;\\n\\n    /*To not have stack too deep error */\\n    struct InternalCalcs {\\n        int256 amount;\\n        int256 assetPnl;\\n        int256 currentTradingPnl;\\n        int256 currentStakingPnl;\\n\\n        int256 instantCummulativeStakingPnl;\\n        int256 isntantCummulativeTradingPnl;\\n\\n        int256 unstakeShare;\\n        int256 feeShare;\\n    }\\n\\n\\n    constructor(TokenParams memory _params,\\n                string memory _name,\\n                string memory _symbol) \\n                ERC20(_name, _symbol) \\n    {\\n        params = _params;\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumTradingPNL += amount;\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumStakingPNL += amount;\\n    }\\n\\n    function claimProfit(address staker, uint256 amount) public override onlyOwner returns (int256 stakingProfit, int256 tradingProfit)\\n    {\\n        ProfitParams memory profit = calcProfit(staker, amount);\\n        if (profit.stakingFee > 0){\\n            changeStakingPnl(profit.stakingFee);\\n        }\\n\\n        if (profit.lpProfit > 0){\\n            changeStakingPnl(profit.lpProfit);\\n        }\\n\\n        if (profit.usdcLoss < 0){\\n            changeTradingPnl(profit.usdcLoss);\\n        }\\n\\n\\n        burn(staker, amount);\\n\\n        stakingProfit = profit.unstakeAmountLP;\\n        tradingProfit = profit.unstakeAmountERC20;\\n    }\\n\\n\\n    function getPairPrice() external view override returns (int256)\\n    {\\n        return IUniswapLpOracle(params.pairOracle).getPrice();\\n    }\\n\\n    function getBurnableToken() external view override returns (address)\\n    {\\n        return params.stakingToken;\\n    }\\n\\n    function getParams() external view override returns (TokenParams memory)\\n    {   \\n        return params;\\n    }\\n\\n    function checkOwnership() external view override onlyOwner returns (address) {\\n        //DO nothing, just revert if call is not from owner\\n\\n        return owner();\\n    }\\n\\n    function totalPnl() external view override returns (int256 usdcTotal, int256 lpTotal)\\n    {\\n        int256 unrealizedPnl = IStrips(params.stripsProxy).assetPnl(owner());\\n\\n        usdcTotal = unrealizedPnl + cumTradingPNL;\\n        lpTotal = cumStakingPNL;\\n    }\\n\\n    function stakingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        current = cumStakingPNL;\\n\\n        if (_totalSupply == 0){\\n            cummulative = cummulativeStakingPnl + current;\\n        } else {\\n            cummulative = cummulativeStakingPnl + (current - prevStakingPnl).divd(_totalSupply);\\n        }\\n\\n    }\\n\\n    function tradingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        int256 assetPnl = IStrips(params.stripsProxy).assetPnl(_owner);\\n\\n        current = assetPnl + cumTradingPNL;\\n        \\n        if (_totalSupply == 0){\\n            cummulative = cummulativeTradingPnl + current;\\n        } else {\\n            cummulative = cummulativeTradingPnl + (current - prevTradingPnl).divd(_totalSupply);\\n        }\\n    }\\n\\n\\n    function accumulatePnl() public override onlyOwner {\\n        int256 currentStakingPnl = 0;\\n        int256 currentTradingPnl = 0;\\n\\n        (currentStakingPnl, cummulativeStakingPnl) = stakingPnl();\\n        prevStakingPnl = currentStakingPnl;\\n\\n\\n        (currentTradingPnl, cummulativeTradingPnl) = tradingPnl();\\n        prevTradingPnl = currentTradingPnl;\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function saveProfit(address staker) public override onlyOwner {\\n        int256 tokenBalance = int256(balanceOf(staker));\\n        \\n        stakers[staker].unrealizedStakingProfit += (cummulativeStakingPnl - stakers[staker].initialStakingPnl).muld(tokenBalance);\\n        stakers[staker].unrealizedTradingProfit += (cummulativeTradingPnl - stakers[staker].initialTradingPnl).muld(tokenBalance);\\n    }\\n\\n\\n    /*All checks should be made inside caller */\\n    function mint(address staker, uint256 amount) public override onlyOwner \\n    {        \\n        stakers[staker] = StakerData({\\n            exist: true,\\n\\n            initialStakingPnl:cummulativeStakingPnl,\\n            initialTradingPnl:cummulativeTradingPnl,\\n    \\n            initialBlockNum:block.number,\\n            initialTimeStamp:block.timestamp,\\n\\n            unrealizedStakingProfit: stakers[staker].unrealizedStakingProfit,\\n            unrealizedTradingProfit: stakers[staker].unrealizedTradingProfit\\n        });\\n\\n        _mint(staker, amount);\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function burn(address staker, uint256 amount) public override onlyOwner \\n    {\\n        int256 burnShare = int256(amount).divd(int256(balanceOf(staker)));\\n\\n        stakers[staker].unrealizedStakingProfit -= (stakers[staker].unrealizedStakingProfit.muld(burnShare));\\n        stakers[staker].unrealizedTradingProfit -= (stakers[staker].unrealizedTradingProfit.muld(burnShare));\\n\\n        _burn(staker, amount);\\n\\n        if (balanceOf(staker) == 0){\\n            delete stakers[staker];\\n        }\\n    }\\n\\n    function canUnstake(address staker, uint256 amount) external view override\\n    {\\n        require(stakers[staker].exist, \\\"NO_SUCH_STAKER\\\");\\n        require(block.number > stakers[staker].initialBlockNum, \\\"UNSTAKE_SAME_BLOCK\\\");\\n        require(amount > 0 && balanceOf(staker) >= amount, \\\"WRONG_UNSTAKE_AMOUNT\\\");\\n    }\\n\\n        \\n\\n\\n    /**\\n     * @dev Major view method that is using by frontend to view the current profit\\n     *  Here is how we show data on frontend (check ProfitParams below):\\n     *  1 - On major screen with the list of all stakes:\\n     *       totalStaked = 100 Lp tokens  (shows in LP amount of LP tokens user staked)\\n     *       stakingProfit (LP) = 10 LP ($10)  (shows the profit or loss that staker earned or lost in LP. Need to convert to USDC using profit.lpPrice)\\n     *       unstakeAmountERC20 (USDC) = -$100  (shows the profit or loss that staker earned in USDC)\\n     *       stakingFee = 1 LP (days left to 0 = penaltyLeft)\\n     *\\n     *  2 - on popup when staker select THE EXACT amount of SLP to unstake:\\n     *       profit.unstakeAmountLP (LP) = 100 LP ($100)   The amount that the staker will receive in LP, including collateral\\n     *       profit.unstakeAmountERC20 (USDC) = $10 | 0.   The amount that the staker will receive in USDC. Will be 0 if pnl is negative.\\n     *       _ hide the penalty\\n     *\\n     * @param staker staker address\\n     * @param amount amount of SLP tokens for unstake\\n     * @return profit ProfitParams all data that is required to show the profit, check IStripsLpToken interface\\n     *       struct ProfitParams\\n     *           // LP unstaked amount \\n     *           int256 unstakeAmountLP;\\n     *\\n     *           //USDC unstaked amount  \\n     *           int256 unstakeAmountERC20;\\n     *\\n     *          //LP profit or loss not including collateral\\n     *           int256 stakingProfit;   \\n     *           \\n     *           //Fee that is paid if unstake in less than 7 days (paid in LP tokens)\\n     *           int256 stakingFee;\\n     *\\n     *          //Time in seconds left untill penalty will become 0\\n     *           int256 penaltyLeft;\\n     *\\n     *           //Collateral in LP that staker staked\\n     *           uint256 totalStaked;\\n     *\\n     *           //The current LP price (in USDC), using for conversion\\n     *           int256 lpPrice;\\n     **/\\n    function calcProfit(address staker, uint256 amount) public view override returns (ProfitParams memory profit)\\n    {\\n        profit.totalStaked = balanceOf(staker);\\n        require(amount > 0 && amount <= profit.totalStaked, \\\"WRONG_AMOUNT\\\");\\n        \\n        InternalCalcs memory internalCalcs;\\n        internalCalcs.amount = int256(amount);\\n\\n        (internalCalcs.currentStakingPnl, \\n            internalCalcs.instantCummulativeStakingPnl) = stakingPnl();\\n        \\n        (internalCalcs.currentTradingPnl, \\n            internalCalcs.isntantCummulativeTradingPnl) = tradingPnl();\\n\\n        internalCalcs.unstakeShare = internalCalcs.amount.divd(int256(profit.totalStaked));\\n        profit.stakingProfit = internalCalcs.amount.muld(internalCalcs.instantCummulativeStakingPnl - stakers[staker].initialStakingPnl) +  internalCalcs.unstakeShare.muld(stakers[staker].unrealizedStakingProfit);\\n        profit.unstakeAmountERC20 = internalCalcs.amount.muld(internalCalcs.isntantCummulativeTradingPnl - stakers[staker].initialTradingPnl) + internalCalcs.unstakeShare.muld(stakers[staker].unrealizedTradingProfit);\\n\\n        (internalCalcs.feeShare, \\n            profit.penaltyLeft) = calcFeeLeft(staker);\\n\\n        profit.stakingFee = internalCalcs.amount.muld(internalCalcs.feeShare);\\n        profit.unstakeAmountLP = internalCalcs.amount + profit.stakingProfit - profit.stakingFee;\\n\\n        profit.lpPrice = IUniswapLpOracle(params.pairOracle).getPrice();\\n        if (profit.unstakeAmountERC20 < 0){\\n            profit.usdcLoss = profit.unstakeAmountERC20;\\n            profit.lpProfit = -1 * profit.usdcLoss.divd(profit.lpPrice);\\n            profit.unstakeAmountLP = profit.unstakeAmountLP  - profit.lpProfit;\\n\\n            profit.unstakeAmountERC20 = 0;\\n            \\n        }\\n\\n    }\\n    \\n\\n    /*\\n        2% fee during 7 days now.\\n    */\\n    function calcFeeLeft(\\n        address staker\\n    ) public view override returns (int256 feeShare, \\n                                int256 periodLeft)\\n    {\\n        feeShare = 0;\\n        periodLeft = 0;\\n\\n        int256 time_elapsed = int256(block.timestamp - stakers[staker].initialTimeStamp);\\n\\n        if (time_elapsed >= params.penaltyPeriod){\\n            return (0, 0);\\n        }\\n        \\n        feeShare = params.penaltyFee - params.penaltyFee.divd(params.penaltyPeriod.toDecimal()).muld(time_elapsed.toDecimal());\\n        periodLeft = params.penaltyPeriod - time_elapsed;\\n    }\\n\\n    function setPenaltyFee(int256 _fee) external override onlyOwner{\\n        require(_fee >= 0, \\\"WRONG_FEE\\\");\\n\\n        params.penaltyFee = _fee;\\n    }\\n\\n    function setParams(TokenParams memory _params) external override onlyOwner{\\n        params = _params;\\n    }\\n\\n\\n    function transfer(address recipient, uint256 amount) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(msg.sender, recipient, amount);\\n\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(sender, recipient, amount);\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferStake(address sender, address recipient, uint256 amount) private {\\n        require(stakers[sender].exist, \\\"STAKER_NOT_FOUND\\\");\\n        require(stakers[recipient].exist == false, \\\"MERGE_NOT_POSSIBLE\\\");\\n\\n        int256 transferShare = int256(amount / balanceOf(sender));\\n\\n        stakers[recipient] = stakers[sender];\\n\\n        int256 stakingProfit = transferShare * stakers[sender].unrealizedStakingProfit;\\n        int256 tradingProfit = transferShare * stakers[sender].unrealizedTradingProfit;\\n\\n        if (stakingProfit != 0){\\n            stakers[sender].unrealizedStakingProfit -= stakingProfit;\\n            stakers[recipient].unrealizedStakingProfit = stakingProfit;\\n        }\\n\\n        if (tradingProfit != 0){\\n            stakers[sender].unrealizedTradingProfit -= tradingProfit;\\n            stakers[recipient].unrealizedTradingProfit = tradingProfit;\\n        }\\n\\n        if (amount == balanceOf(sender)){\\n            delete stakers[sender];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1578fe2e4327eebd21ad4dc9d774d8719a147144de2dbde25fd1a6d10b31baef\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fba806100206000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c806379ea9dd411610167578063badf44d9116100ce578063d547741f11610087578063d547741f1461060d578063d8826fec14610620578063dc028c0814610633578063e2b99e6b14610646578063e58378bb1461064e578063e71acffe1461066357600080fd5b8063badf44d9146105bf578063bc49abd8146105d2578063bd9a548b146105da578063c52aa2cf146105f7578063c6be2371146105fe578063ca4fa4951461060557600080fd5b80639015dcc9116101205780639015dcc91461056957806391d148541461057a57806393e106011461058d5780639d1b464a1461059e5780639f9106d1146105a6578063a217fddf146105b757600080fd5b806379ea9dd41461051c5780637a891c191461052d5780637b6fc88314610535578063807354ce14610548578063817b1cd2146105595780638ec812ee1461056157600080fd5b806336284eb01161020b578063668aa824116101c4578063668aa8241461040a5780636f4d80e5146104125780637003075e146104d657806372667cdb146104eb57806377b71df01461050157806378cff5761461051457600080fd5b806336284eb01461039c57806336568abe146103af578063367d13d0146103c25780634dde1fb1146103d3578063538b5aa5146103e45780635690f64d146103f757600080fd5b80631f3623231161025d5780631f36232314610325578063207919fa1461033857806320d7b9971461034b578063248a9ca31461035e5780632f2ff15d146103815780632f8dfa4c1461039457600080fd5b806301ffc9a71461029a5780630910a510146102c25780630a2ce6d7146102d85780630f3bee3d146102ed57806312bffc8814610312575b600080fd5b6102ad6102a8366004612553565b610676565b60405190151581526020015b60405180910390f35b6102ca6106ad565b6040519081526020016102b9565b6102eb6102e636600461250c565b6106be565b005b6003546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b6102eb610320366004612758565b6107bf565b6102eb61033336600461250c565b6108cd565b6102eb6103463660046124a9565b610a01565b6102ca6103593660046124e1565b610a91565b6102ca61036c36600461250c565b60009081526078602052604090206001015490565b6102eb61038f366004612524565b610c6f565b600b546102ca565b6102ca6103aa3660046124e1565b610c9a565b6102eb6103bd366004612524565b610dc1565b6007546001600160a01b03166102fa565b6002546001600160a01b03166102fa565b6102eb6103f23660046125f0565b610e3f565b6102eb61040536600461257b565b610f4d565b6102ca610f72565b6000546040805161010081810183526001546001600160a01b0390811683526002548116602084015260035481169383019390935260045460608301526005546080830152600654831660a0830152600754831660c0830152600854831660e0830152600954600a54600b54600c54600d54600e54600f546010546011546012546104bd9d8d169c998a169a988a169997989697959694959394929360ff831693909204909116908d565b6040516102b99d9c9b9a9998979695949392919061288f565b6102ca600080516020612f6583398151915281565b60115461010090046001600160a01b03166102fa565b6102eb61050f36600461250c565b610f7e565b6102eb611042565b6008546001600160a01b03166102fa565b600c546102ca565b6102eb61054336600461268b565b61108b565b6009546001600160a01b03166102fa565b6102ca6112fc565b6102ca611308565b600a546001600160a01b03166102fa565b6102ad610588366004612524565b611314565b6001546001600160a01b03166102fa565b6102ca61133f565b6006546001600160a01b03166102fa565b6102ca600081565b6102eb6105cd36600461250c565b61134b565b6102ca6113f4565b6105e2611404565b604080519283526020830191909152016102b9565b60016102ad565b60006102ad565b6105e2611419565b6102eb61061b366004612524565b611438565b6102eb61062e3660046124a9565b61145e565b6102ca6106413660046125cc565b6114ce565b6102ca6114f6565b6102ca600080516020612f4583398151915281565b6102eb61067136600461250c565b611573565b60006001600160e01b03198216637965db0b60e01b14806106a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106b960006115e5565b905090565b600260aa5414156106ea5760405162461bcd60e51b81526004016106e190612a72565b60405180910390fd5b600260aa5560115460ff16156107125760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b031661073a5760405162461bcd60e51b81526004016106e1906129d8565b600954604051632e5e0b6160e01b81526001600160a01b039091166004820152336024820152604481018290527300CFC161b2608f9da75573150b6b2D78Ba9968C690632e5e0b61906064015b60006040518083038186803b15801561079f57600080fd5b505af41580156107b3573d6000803e3d6000fd5b5050600160aa55505050565b600080516020612f458339815191526107d88133611622565b6009546001600160a01b0316156108225760405162461bcd60e51b815260206004820152600e60248201526d131417d513d2d15397d1561254d560921b60448201526064016106e1565b604051630e9f89fb60e41b815273eFE5e66C9aDd90B2B1E697C4d7c61d9DB40c93Eb9063e9f89fb090610859908590600401612b58565b60206040518083038186803b15801561087157600080fd5b505af4158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612598565b600980546001600160a01b0319166001600160a01b03929092169190911790555050565b600260aa5414156108f05760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff16156109185760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b03166109405760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f658339815191526109598133611622565b6000826109666000611686565b6109709190612e72565b90506000811261098057506109f8565b600954604051637e1c8e3560e01b81526001600160a01b039091166004820152602481018490527300CFC161b2608f9da75573150b6b2D78Ba9968C690637e1c8e359060440160006040518083038186803b1580156109de57600080fd5b505af41580156109f2573d6000803e3d6000fd5b50505050505b5050600160aa55565b600080516020612f45833981519152610a1a8133611622565b813b610a685760405162461bcd60e51b815260206004820152601b60248201527f53555348495f524f555445525f4e4f545f415f434f4e5452414354000000000060448201526064016106e1565b50601180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000600260aa541415610ab65760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610ade5760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610b065760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f65833981519152610b1f8133611622565b60008313610b5f5760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b60448201526064016106e1565b8315610be057826000600b016000828254610b7a9190612e72565b9091555050600b5460001315610bc45760405162461bcd60e51b815260206004820152600f60248201526e0544f54414c4c4f4e47535f4c545f3608c1b60448201526064016106e1565b610bdb610bd2846000612e72565b60009081611705565b610c58565b826000600c016000828254610bf59190612e72565b9091555050600c5460001315610c405760405162461bcd60e51b815260206004820152601060248201526f0544f54414c53484f5254535f4c545f360841b60448201526064016106e1565b610c586000610c4f8582612e72565b60009190611705565b610c626000611850565b600160aa55949350505050565b600082815260786020526040902060010154610c8b8133611622565b610c958383611867565b505050565b6000600260aa541415610cbf5760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610ce75760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610d0f5760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f65833981519152610d288133611622565b60008313610d685760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b60448201526064016106e1565b60018415151415610d9a57826000600b016000828254610d889190612c52565b90915550610bdb905060008481611705565b826000600c016000828254610daf9190612c52565b90915550610c58905060008085611705565b6001600160a01b0381163314610e315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e1565b610e3b82826118ed565b5050565b600080516020612f45833981519152610e588133611622565b600a546001600160a01b031615610ea25760405162461bcd60e51b815260206004820152600e60248201526d149155d05491115497d1561254d560921b60448201526064016106e1565b60405163bdf3bf1960e01b815273eFE5e66C9aDd90B2B1E697C4d7c61d9DB40c93Eb9063bdf3bf1990610ed9908590600401612aa9565b60206040518083038186803b158015610ef157600080fd5b505af4158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190612598565b600a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080516020612f65833981519152610f668133611622565b610c9560008484611954565b60006106b960006119ab565b600260aa541415610fa15760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610fc95760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610ff15760405162461bcd60e51b81526004016106e1906129d8565b60095460405163dfbcd6db60e01b81526001600160a01b039091166004820152336024820152604481018290527300CFC161b2608f9da75573150b6b2D78Ba9968C69063dfbcd6db90606401610787565b600260aa5414156110655760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f658339815191526110838133611622565b50600160aa55565b601354610100900460ff16806110a4575060135460ff16155b6110c05760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff161580156110e2576013805461ffff19166101011790555b823b6111305760405162461bcd60e51b815260206004820152601b60248201527f53555348495f524f555445525f4e4f545f415f434f4e5452414354000000000060448201526064016106e1565b83516001600160a01b03166111795760405162461bcd60e51b815260206004820152600f60248201526e2727afa9aa2924a829afa2a92927a960891b60448201526064016106e1565b6001600160a01b0382166111ba5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b60448201526064016106e1565b6111c26119f2565b6111ca611a76565b600080546001600160a01b03199081166001600160a01b03858116919091179092558551600180548316918416919091179055602086015160028054831691841691909117905560408601516003805483169184169190911790556060860151600455608086015160055560a086015160068054831691841691909117905560c086015160078054831691841691909117905560e08601516008805490921690831617905560118054610100600160a81b0319166101009286169290920291909117905542601255600f546112a5576112a1611ad5565b600f555b6112b0600033611aea565b6112c8600080516020612f4583398151915233611aea565b6112e4600080516020612f658339815191528560000151611aea565b80156112f6576013805461ff00191690555b50505050565b60006106b96000611af4565b60006106b96000611b27565b60009182526078602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006106b96000611850565b600260aa54141561136e5760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f6583398151915261138c8133611622565b60095460405163badf44d960e01b8152600481018490526001600160a01b039091169063badf44d9906024015b600060405180830381600087803b1580156113d357600080fd5b505af11580156113e7573d6000803e3d6000fd5b5050600160aa5550505050565b6012546000906106b99042612eb1565b6000806114116000611c30565b915091509091565b6000806114266000611686565b91506114326000611af4565b90509091565b6000828152607860205260409020600101546114548133611622565b610c9583836118ed565b600061146a8133611622565b6001600160a01b0382166114ab5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b60448201526064016106e1565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081156114e6576114df83611cc5565b90506106a7565b6114ef83611ce3565b9392505050565b60025460408051636da5ebf960e11b815290516000926001600160a01b03169163db4bd7f2916004808301926020929190829003018186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b991906125b4565b600260aa5414156115965760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f658339815191526115b48133611622565b60095460405163738d67ff60e11b8152600481018490526001600160a01b039091169063e71acffe906024016113b9565b6000806115f183611af4565b9050801561160f5761160c61160584611cf1565b8290611d38565b90505b61161883611686565b6114ef9082612c52565b61162c8282611314565b610e3b57611644816001600160a01b03166014611d46565b61164f836020611d46565b60405160200161166092919061281a565b60408051601f198184030181529082905262461bcd60e51b82526106e1916004016129a5565b60078101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156116cd57600080fd5b505afa1580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a791906125b4565b6000611710846115e5565b90508360100154600014156117635761174084600f015461172f611ad5565b6117399190612c52565b8290611f28565b600e8501819055600f8501546117569190611d38565b600d850155601084018190555b60008460100154826117759190612e72565b905061179f61160586600f015461178a611ad5565b6117949190612c52565b600f88015490611f28565b6117a99085612c52565b85600d0160008282546117bc9190612c52565b9091555050600f8501546117d29061172f611ad5565b6117dc9084612c52565b85600e0160008282546117ef9190612c52565b9091555050600d850154600012158061180d5750600085600e015413155b1561182a5760405162461bcd60e51b81526004016106e190612a4f565b600e850154600d86015461183d91611f28565b600f860155506010909301929092555050565b600f81015460048201546000916106a79190611d38565b6118718282611314565b610e3b5760008281526078602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118f78282611314565b15610e3b5760008281526078602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081136119915760405162461bcd60e51b815260206004820152600a60248201526910905117d05353d5539560b21b60448201526064016106e1565b6001830154610c959083906001600160a01b031683611f46565b600281015460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b1580156116cd57600080fd5b601354610100900460ff1680611a0b575060135460ff16155b611a275760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611a49576013805461ffff19166101011790555b611a5161208c565b611a5961208c565b611a6161208c565b8015611a73576013805461ff00191690555b50565b601354610100900460ff1680611a8f575060135460ff16155b611aab5760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611acd576013805461ffff19166101011790555b611a616120f6565b60006106b9670de0b6b3a76400006001612dd0565b610e3b8282611867565b60068101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016116b5565b600080611b33836115e5565b905060008113611b465750600092915050565b600183015460405163192be89360e21b81523060048201526000916001600160a01b0316906364afa24c9060240160206040518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc491906125b4565b9050600084600c015485600b0154611bdc9190612e72565b90506000811215611bf657611bf360001982612dd0565b90505b611c27611c01612166565b611c0c90600a612dd0565b82611c178587612c52565b611c219190612e72565b90611d38565b95945050505050565b600080611c3c83611850565b600284015460408051634c6afee560e11b815290519294506001600160a01b03909116916398d5fdca91600480820192602092909190829003018186803b158015611c8657600080fd5b505afa158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe91906125b4565b9050915091565b600080611cd381848161217a565b6004549091506114ef9082611d38565b600080611cd381808561217a565b600381015460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b1580156116cd57600080fd5b60006114ef8383601261226f565b60606000611d55836002612e53565b611d60906002612c93565b67ffffffffffffffff811115611d8657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611db0576020820181803683370190505b509050600360fc1b81600081518110611dd957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e1657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611e3a846002612e53565b611e45906001612c93565b90505b6001811115611ed9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e8757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611eab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611ed281612ef4565b9050611e48565b5083156114ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e1565b60008160011415611f3a5750816106a7565b6114ef83836012612296565b801580611fcf5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611f9557600080fd5b505afa158015611fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcd91906125b4565b155b61203a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106e1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610c959084906122ac565b601354610100900460ff16806120a5575060135460ff16155b6120c15760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611a61576013805461ffff19166101011790558015611a73576013805461ff001916905550565b601354610100900460ff168061210f575060135460ff16155b61212b5760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff1615801561214d576013805461ffff19166101011790555b600160aa558015611a73576013805461ff001916905550565b60006106b9662386f26fc100006001612dd0565b600f830154600e840154600d85015460108601546000939291908461219e896115e5565b9050816121c3576121b18561172f611ad5565b93506121bd8486611d38565b92508091505b60006121cf8383612e72565b90506121f1611605876121e0611ad5565b6121ea9190612c52565b8890611f28565b6121fb908a612c52565b6122059085612c52565b93506122138661172f611ad5565b61221d9089612c52565b6122279086612c52565b945060008413158061223a575060008513155b156122575760405162461bcd60e51b81526004016106e190612a4f565b6122618486611f28565b9a9950505050505050505050565b600061227a8261237e565b6122848486612dd0565b61228e9190612cab565b949350505050565b6000826122a28361237e565b6122849086612dd0565b6000612301826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661238e9092919063ffffffff16565b805190915015610c95578080602001905181019061231f91906124c5565b610c955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e1565b60006106a760ff8316600a612d28565b606061228e848460008585843b6123e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e1565b600080866001600160a01b0316858760405161240391906127fe565b60006040518083038185875af1925050503d8060008114612440576040519150601f19603f3d011682016040523d82523d6000602084013e612445565b606091505b5091509150612455828286612460565b979650505050505050565b6060831561246f5750816114ef565b82511561247f5782518084602001fd5b8160405162461bcd60e51b81526004016106e191906129a5565b80356124a481612f21565b919050565b6000602082840312156124ba578081fd5b81356114ef81612f21565b6000602082840312156124d6578081fd5b81516114ef81612f36565b600080604083850312156124f3578081fd5b82356124fe81612f36565b946020939093013593505050565b60006020828403121561251d578081fd5b5035919050565b60008060408385031215612536578182fd5b82359150602083013561254881612f21565b809150509250929050565b600060208284031215612564578081fd5b81356001600160e01b0319811681146114ef578182fd5b6000806040838503121561258d578182fd5b82356124fe81612f21565b6000602082840312156125a9578081fd5b81516114ef81612f21565b6000602082840312156125c5578081fd5b5051919050565b600080604083850312156125de578182fd5b82359150602083013561254881612f36565b60006101208284031215612602578081fd5b61260a612be8565b823581526020830135602082015261262460408401612499565b604082015261263560608401612499565b606082015261264660808401612499565b608082015261265760a08401612499565b60a082015261266860c08401612499565b60c082015260e08381013590820152610100928301359281019290925250919050565b60008060008385036101408112156126a1578182fd5b610100808212156126b0578283fd5b6126b8612c20565b915085356126c581612f21565b82526126d360208701612499565b60208301526126e460408701612499565b6040830152606086013560608301526080860135608083015261270960a08701612499565b60a083015261271a60c08701612499565b60c083015261272b60e08701612499565b60e083015281945061273e818701612499565b9350505061274f6101208501612499565b90509250925092565b600060c08284031215612769578081fd5b60405160c0810181811067ffffffffffffffff8211171561279857634e487b7160e01b83526041600452602483fd5b60405282356127a681612f21565b815260208301356127b681612f21565b602082015260408301356127c981612f21565b604082015260608301356127dc81612f21565b60608201526080838101359082015260a0928301359281019290925250919050565b60008251612810818460208701612ec8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612852816017850160208801612ec8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612883816028840160208801612ec8565b01602801949350505050565b6001600160a01b038e811682528d5181166020808401919091528e015181166040808401919091528e0151166060808301919091528d01516080808301919091528d015160a0808301919091528d01516102808201906128fa60c08401826001600160a01b03169052565b5060c08e01516001600160a01b03811660e08401525060e08e01516001600160a01b038116610100840152506001600160a01b038d166101208301526001600160a01b038c166101408301528a61016083015289610180830152886101a0830152876101c0830152866101e08301528561020083015261297f61022083018615159052565b6001600160a01b039390931661024082015261026001529b9a5050505050505050505050565b60208152600082518060208401526129c4816040850160208701612ec8565b601f01601f19169190910160400192915050565b6020808252600f908201526e14d31417d393d517d0d49150551151608a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526009908201526814d554d4115391115160ba1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81518152602080830151908201526040808301516001600160a01b031690820152606080830151610120830191612aea908401826001600160a01b03169052565b506080830151612b0560808401826001600160a01b03169052565b5060a0830151612b2060a08401826001600160a01b03169052565b5060c0830151612b3b60c08401826001600160a01b03169052565b5060e083015160e083015261010080840151818401525092915050565b600061010060018060a01b03808551168452806020860151166020850152806040860151166040850152806060860151166060850152506080840151608084015260a084015160a08401528060c0840152600981840152506829a628102a37b5b2b760b91b6101208301526101408060e084015261228e81840160038152620534c560ec1b602082015260400190565b604051610120810167ffffffffffffffff81118282101715612c1a57634e487b7160e01b600052604160045260246000fd5b60405290565b604051610100810167ffffffffffffffff81118282101715612c1a57634e487b7160e01b600052604160045260246000fd5b600080821280156001600160ff1b0384900385131615612c7457612c74612f0b565b600160ff1b8390038412811615612c8d57612c8d612f0b565b50500190565b60008219821115612ca657612ca6612f0b565b500190565b600082612cc657634e487b7160e01b81526012600452602481fd5b600160ff1b821460001984141615612ce057612ce0612f0b565b500590565b600181815b80851115612d20578160001904821115612d0657612d06612f0b565b80851615612d1357918102915b93841c9390800290612cea565b509250929050565b60006114ef8383600082612d3e575060016106a7565b81612d4b575060006106a7565b8160018114612d615760028114612d6b57612d87565b60019150506106a7565b60ff841115612d7c57612d7c612f0b565b50506001821b6106a7565b5060208310610133831016604e8410600b8410161715612daa575081810a6106a7565b612db48383612ce5565b8060001904821115612dc857612dc8612f0b565b029392505050565b60006001600160ff1b0381841382841380821686840486111615612df657612df6612f0b565b600160ff1b84871282811687830589121615612e1457612e14612f0b565b858712925087820587128484161615612e2f57612e2f612f0b565b87850587128184161615612e4557612e45612f0b565b505050929093029392505050565b6000816000190483118215151615612e6d57612e6d612f0b565b500290565b60008083128015600160ff1b850184121615612e9057612e90612f0b565b6001600160ff1b0384018313811615612eab57612eab612f0b565b50500390565b600082821015612ec357612ec3612f0b565b500390565b60005b83811015612ee3578181015183820152602001612ecb565b838111156112f65750506000910152565b600081612f0357612f03612f0b565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611a7357600080fd5b8015158114611a7357600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214edfd026bd2d3fa1c600c8569d94bb4eed03cfafe0c37f74f3ca61c14b05898e31a26469706673582212203a9564f9e7cf257ebf9ec11d63f84bb4c61f93886beabf4785c199b35d832acd64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c806379ea9dd411610167578063badf44d9116100ce578063d547741f11610087578063d547741f1461060d578063d8826fec14610620578063dc028c0814610633578063e2b99e6b14610646578063e58378bb1461064e578063e71acffe1461066357600080fd5b8063badf44d9146105bf578063bc49abd8146105d2578063bd9a548b146105da578063c52aa2cf146105f7578063c6be2371146105fe578063ca4fa4951461060557600080fd5b80639015dcc9116101205780639015dcc91461056957806391d148541461057a57806393e106011461058d5780639d1b464a1461059e5780639f9106d1146105a6578063a217fddf146105b757600080fd5b806379ea9dd41461051c5780637a891c191461052d5780637b6fc88314610535578063807354ce14610548578063817b1cd2146105595780638ec812ee1461056157600080fd5b806336284eb01161020b578063668aa824116101c4578063668aa8241461040a5780636f4d80e5146104125780637003075e146104d657806372667cdb146104eb57806377b71df01461050157806378cff5761461051457600080fd5b806336284eb01461039c57806336568abe146103af578063367d13d0146103c25780634dde1fb1146103d3578063538b5aa5146103e45780635690f64d146103f757600080fd5b80631f3623231161025d5780631f36232314610325578063207919fa1461033857806320d7b9971461034b578063248a9ca31461035e5780632f2ff15d146103815780632f8dfa4c1461039457600080fd5b806301ffc9a71461029a5780630910a510146102c25780630a2ce6d7146102d85780630f3bee3d146102ed57806312bffc8814610312575b600080fd5b6102ad6102a8366004612553565b610676565b60405190151581526020015b60405180910390f35b6102ca6106ad565b6040519081526020016102b9565b6102eb6102e636600461250c565b6106be565b005b6003546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b6102eb610320366004612758565b6107bf565b6102eb61033336600461250c565b6108cd565b6102eb6103463660046124a9565b610a01565b6102ca6103593660046124e1565b610a91565b6102ca61036c36600461250c565b60009081526078602052604090206001015490565b6102eb61038f366004612524565b610c6f565b600b546102ca565b6102ca6103aa3660046124e1565b610c9a565b6102eb6103bd366004612524565b610dc1565b6007546001600160a01b03166102fa565b6002546001600160a01b03166102fa565b6102eb6103f23660046125f0565b610e3f565b6102eb61040536600461257b565b610f4d565b6102ca610f72565b6000546040805161010081810183526001546001600160a01b0390811683526002548116602084015260035481169383019390935260045460608301526005546080830152600654831660a0830152600754831660c0830152600854831660e0830152600954600a54600b54600c54600d54600e54600f546010546011546012546104bd9d8d169c998a169a988a169997989697959694959394929360ff831693909204909116908d565b6040516102b99d9c9b9a9998979695949392919061288f565b6102ca600080516020612f6583398151915281565b60115461010090046001600160a01b03166102fa565b6102eb61050f36600461250c565b610f7e565b6102eb611042565b6008546001600160a01b03166102fa565b600c546102ca565b6102eb61054336600461268b565b61108b565b6009546001600160a01b03166102fa565b6102ca6112fc565b6102ca611308565b600a546001600160a01b03166102fa565b6102ad610588366004612524565b611314565b6001546001600160a01b03166102fa565b6102ca61133f565b6006546001600160a01b03166102fa565b6102ca600081565b6102eb6105cd36600461250c565b61134b565b6102ca6113f4565b6105e2611404565b604080519283526020830191909152016102b9565b60016102ad565b60006102ad565b6105e2611419565b6102eb61061b366004612524565b611438565b6102eb61062e3660046124a9565b61145e565b6102ca6106413660046125cc565b6114ce565b6102ca6114f6565b6102ca600080516020612f4583398151915281565b6102eb61067136600461250c565b611573565b60006001600160e01b03198216637965db0b60e01b14806106a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106b960006115e5565b905090565b600260aa5414156106ea5760405162461bcd60e51b81526004016106e190612a72565b60405180910390fd5b600260aa5560115460ff16156107125760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b031661073a5760405162461bcd60e51b81526004016106e1906129d8565b600954604051632e5e0b6160e01b81526001600160a01b0390911660048201523360248201526044810182905273__$d66304e481bdf2800eccec9f89a098a24a$__90632e5e0b61906064015b60006040518083038186803b15801561079f57600080fd5b505af41580156107b3573d6000803e3d6000fd5b5050600160aa55505050565b600080516020612f458339815191526107d88133611622565b6009546001600160a01b0316156108225760405162461bcd60e51b815260206004820152600e60248201526d131417d513d2d15397d1561254d560921b60448201526064016106e1565b604051630e9f89fb60e41b815273__$c4fda02c71b4354d0125dbaa89864d6861$__9063e9f89fb090610859908590600401612b58565b60206040518083038186803b15801561087157600080fd5b505af4158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612598565b600980546001600160a01b0319166001600160a01b03929092169190911790555050565b600260aa5414156108f05760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff16156109185760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b03166109405760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f658339815191526109598133611622565b6000826109666000611686565b6109709190612e72565b90506000811261098057506109f8565b600954604051637e1c8e3560e01b81526001600160a01b0390911660048201526024810184905273__$d66304e481bdf2800eccec9f89a098a24a$__90637e1c8e359060440160006040518083038186803b1580156109de57600080fd5b505af41580156109f2573d6000803e3d6000fd5b50505050505b5050600160aa55565b600080516020612f45833981519152610a1a8133611622565b813b610a685760405162461bcd60e51b815260206004820152601b60248201527f53555348495f524f555445525f4e4f545f415f434f4e5452414354000000000060448201526064016106e1565b50601180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000600260aa541415610ab65760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610ade5760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610b065760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f65833981519152610b1f8133611622565b60008313610b5f5760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b60448201526064016106e1565b8315610be057826000600b016000828254610b7a9190612e72565b9091555050600b5460001315610bc45760405162461bcd60e51b815260206004820152600f60248201526e0544f54414c4c4f4e47535f4c545f3608c1b60448201526064016106e1565b610bdb610bd2846000612e72565b60009081611705565b610c58565b826000600c016000828254610bf59190612e72565b9091555050600c5460001315610c405760405162461bcd60e51b815260206004820152601060248201526f0544f54414c53484f5254535f4c545f360841b60448201526064016106e1565b610c586000610c4f8582612e72565b60009190611705565b610c626000611850565b600160aa55949350505050565b600082815260786020526040902060010154610c8b8133611622565b610c958383611867565b505050565b6000600260aa541415610cbf5760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610ce75760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610d0f5760405162461bcd60e51b81526004016106e1906129d8565b600080516020612f65833981519152610d288133611622565b60008313610d685760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b60448201526064016106e1565b60018415151415610d9a57826000600b016000828254610d889190612c52565b90915550610bdb905060008481611705565b826000600c016000828254610daf9190612c52565b90915550610c58905060008085611705565b6001600160a01b0381163314610e315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106e1565b610e3b82826118ed565b5050565b600080516020612f45833981519152610e588133611622565b600a546001600160a01b031615610ea25760405162461bcd60e51b815260206004820152600e60248201526d149155d05491115497d1561254d560921b60448201526064016106e1565b60405163bdf3bf1960e01b815273__$c4fda02c71b4354d0125dbaa89864d6861$__9063bdf3bf1990610ed9908590600401612aa9565b60206040518083038186803b158015610ef157600080fd5b505af4158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190612598565b600a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080516020612f65833981519152610f668133611622565b610c9560008484611954565b60006106b960006119ab565b600260aa541415610fa15760405162461bcd60e51b81526004016106e190612a72565b600260aa5560115460ff1615610fc95760405162461bcd60e51b81526004016106e190612a4f565b6009546001600160a01b0316610ff15760405162461bcd60e51b81526004016106e1906129d8565b60095460405163dfbcd6db60e01b81526001600160a01b0390911660048201523360248201526044810182905273__$d66304e481bdf2800eccec9f89a098a24a$__9063dfbcd6db90606401610787565b600260aa5414156110655760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f658339815191526110838133611622565b50600160aa55565b601354610100900460ff16806110a4575060135460ff16155b6110c05760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff161580156110e2576013805461ffff19166101011790555b823b6111305760405162461bcd60e51b815260206004820152601b60248201527f53555348495f524f555445525f4e4f545f415f434f4e5452414354000000000060448201526064016106e1565b83516001600160a01b03166111795760405162461bcd60e51b815260206004820152600f60248201526e2727afa9aa2924a829afa2a92927a960891b60448201526064016106e1565b6001600160a01b0382166111ba5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b60448201526064016106e1565b6111c26119f2565b6111ca611a76565b600080546001600160a01b03199081166001600160a01b03858116919091179092558551600180548316918416919091179055602086015160028054831691841691909117905560408601516003805483169184169190911790556060860151600455608086015160055560a086015160068054831691841691909117905560c086015160078054831691841691909117905560e08601516008805490921690831617905560118054610100600160a81b0319166101009286169290920291909117905542601255600f546112a5576112a1611ad5565b600f555b6112b0600033611aea565b6112c8600080516020612f4583398151915233611aea565b6112e4600080516020612f658339815191528560000151611aea565b80156112f6576013805461ff00191690555b50505050565b60006106b96000611af4565b60006106b96000611b27565b60009182526078602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006106b96000611850565b600260aa54141561136e5760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f6583398151915261138c8133611622565b60095460405163badf44d960e01b8152600481018490526001600160a01b039091169063badf44d9906024015b600060405180830381600087803b1580156113d357600080fd5b505af11580156113e7573d6000803e3d6000fd5b5050600160aa5550505050565b6012546000906106b99042612eb1565b6000806114116000611c30565b915091509091565b6000806114266000611686565b91506114326000611af4565b90509091565b6000828152607860205260409020600101546114548133611622565b610c9583836118ed565b600061146a8133611622565b6001600160a01b0382166114ab5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b60448201526064016106e1565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081156114e6576114df83611cc5565b90506106a7565b6114ef83611ce3565b9392505050565b60025460408051636da5ebf960e11b815290516000926001600160a01b03169163db4bd7f2916004808301926020929190829003018186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b991906125b4565b600260aa5414156115965760405162461bcd60e51b81526004016106e190612a72565b600260aa55600080516020612f658339815191526115b48133611622565b60095460405163738d67ff60e11b8152600481018490526001600160a01b039091169063e71acffe906024016113b9565b6000806115f183611af4565b9050801561160f5761160c61160584611cf1565b8290611d38565b90505b61161883611686565b6114ef9082612c52565b61162c8282611314565b610e3b57611644816001600160a01b03166014611d46565b61164f836020611d46565b60405160200161166092919061281a565b60408051601f198184030181529082905262461bcd60e51b82526106e1916004016129a5565b60078101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156116cd57600080fd5b505afa1580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a791906125b4565b6000611710846115e5565b90508360100154600014156117635761174084600f015461172f611ad5565b6117399190612c52565b8290611f28565b600e8501819055600f8501546117569190611d38565b600d850155601084018190555b60008460100154826117759190612e72565b905061179f61160586600f015461178a611ad5565b6117949190612c52565b600f88015490611f28565b6117a99085612c52565b85600d0160008282546117bc9190612c52565b9091555050600f8501546117d29061172f611ad5565b6117dc9084612c52565b85600e0160008282546117ef9190612c52565b9091555050600d850154600012158061180d5750600085600e015413155b1561182a5760405162461bcd60e51b81526004016106e190612a4f565b600e850154600d86015461183d91611f28565b600f860155506010909301929092555050565b600f81015460048201546000916106a79190611d38565b6118718282611314565b610e3b5760008281526078602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118f78282611314565b15610e3b5760008281526078602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081136119915760405162461bcd60e51b815260206004820152600a60248201526910905117d05353d5539560b21b60448201526064016106e1565b6001830154610c959083906001600160a01b031683611f46565b600281015460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b1580156116cd57600080fd5b601354610100900460ff1680611a0b575060135460ff16155b611a275760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611a49576013805461ffff19166101011790555b611a5161208c565b611a5961208c565b611a6161208c565b8015611a73576013805461ff00191690555b50565b601354610100900460ff1680611a8f575060135460ff16155b611aab5760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611acd576013805461ffff19166101011790555b611a616120f6565b60006106b9670de0b6b3a76400006001612dd0565b610e3b8282611867565b60068101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016116b5565b600080611b33836115e5565b905060008113611b465750600092915050565b600183015460405163192be89360e21b81523060048201526000916001600160a01b0316906364afa24c9060240160206040518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc491906125b4565b9050600084600c015485600b0154611bdc9190612e72565b90506000811215611bf657611bf360001982612dd0565b90505b611c27611c01612166565b611c0c90600a612dd0565b82611c178587612c52565b611c219190612e72565b90611d38565b95945050505050565b600080611c3c83611850565b600284015460408051634c6afee560e11b815290519294506001600160a01b03909116916398d5fdca91600480820192602092909190829003018186803b158015611c8657600080fd5b505afa158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe91906125b4565b9050915091565b600080611cd381848161217a565b6004549091506114ef9082611d38565b600080611cd381808561217a565b600381015460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b1580156116cd57600080fd5b60006114ef8383601261226f565b60606000611d55836002612e53565b611d60906002612c93565b67ffffffffffffffff811115611d8657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611db0576020820181803683370190505b509050600360fc1b81600081518110611dd957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e1657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611e3a846002612e53565b611e45906001612c93565b90505b6001811115611ed9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e8757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611eab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611ed281612ef4565b9050611e48565b5083156114ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e1565b60008160011415611f3a5750816106a7565b6114ef83836012612296565b801580611fcf5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611f9557600080fd5b505afa158015611fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcd91906125b4565b155b61203a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106e1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610c959084906122ac565b601354610100900460ff16806120a5575060135460ff16155b6120c15760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff16158015611a61576013805461ffff19166101011790558015611a73576013805461ff001916905550565b601354610100900460ff168061210f575060135460ff16155b61212b5760405162461bcd60e51b81526004016106e190612a01565b601354610100900460ff1615801561214d576013805461ffff19166101011790555b600160aa558015611a73576013805461ff001916905550565b60006106b9662386f26fc100006001612dd0565b600f830154600e840154600d85015460108601546000939291908461219e896115e5565b9050816121c3576121b18561172f611ad5565b93506121bd8486611d38565b92508091505b60006121cf8383612e72565b90506121f1611605876121e0611ad5565b6121ea9190612c52565b8890611f28565b6121fb908a612c52565b6122059085612c52565b93506122138661172f611ad5565b61221d9089612c52565b6122279086612c52565b945060008413158061223a575060008513155b156122575760405162461bcd60e51b81526004016106e190612a4f565b6122618486611f28565b9a9950505050505050505050565b600061227a8261237e565b6122848486612dd0565b61228e9190612cab565b949350505050565b6000826122a28361237e565b6122849086612dd0565b6000612301826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661238e9092919063ffffffff16565b805190915015610c95578080602001905181019061231f91906124c5565b610c955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e1565b60006106a760ff8316600a612d28565b606061228e848460008585843b6123e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e1565b600080866001600160a01b0316858760405161240391906127fe565b60006040518083038185875af1925050503d8060008114612440576040519150601f19603f3d011682016040523d82523d6000602084013e612445565b606091505b5091509150612455828286612460565b979650505050505050565b6060831561246f5750816114ef565b82511561247f5782518084602001fd5b8160405162461bcd60e51b81526004016106e191906129a5565b80356124a481612f21565b919050565b6000602082840312156124ba578081fd5b81356114ef81612f21565b6000602082840312156124d6578081fd5b81516114ef81612f36565b600080604083850312156124f3578081fd5b82356124fe81612f36565b946020939093013593505050565b60006020828403121561251d578081fd5b5035919050565b60008060408385031215612536578182fd5b82359150602083013561254881612f21565b809150509250929050565b600060208284031215612564578081fd5b81356001600160e01b0319811681146114ef578182fd5b6000806040838503121561258d578182fd5b82356124fe81612f21565b6000602082840312156125a9578081fd5b81516114ef81612f21565b6000602082840312156125c5578081fd5b5051919050565b600080604083850312156125de578182fd5b82359150602083013561254881612f36565b60006101208284031215612602578081fd5b61260a612be8565b823581526020830135602082015261262460408401612499565b604082015261263560608401612499565b606082015261264660808401612499565b608082015261265760a08401612499565b60a082015261266860c08401612499565b60c082015260e08381013590820152610100928301359281019290925250919050565b60008060008385036101408112156126a1578182fd5b610100808212156126b0578283fd5b6126b8612c20565b915085356126c581612f21565b82526126d360208701612499565b60208301526126e460408701612499565b6040830152606086013560608301526080860135608083015261270960a08701612499565b60a083015261271a60c08701612499565b60c083015261272b60e08701612499565b60e083015281945061273e818701612499565b9350505061274f6101208501612499565b90509250925092565b600060c08284031215612769578081fd5b60405160c0810181811067ffffffffffffffff8211171561279857634e487b7160e01b83526041600452602483fd5b60405282356127a681612f21565b815260208301356127b681612f21565b602082015260408301356127c981612f21565b604082015260608301356127dc81612f21565b60608201526080838101359082015260a0928301359281019290925250919050565b60008251612810818460208701612ec8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612852816017850160208801612ec8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612883816028840160208801612ec8565b01602801949350505050565b6001600160a01b038e811682528d5181166020808401919091528e015181166040808401919091528e0151166060808301919091528d01516080808301919091528d015160a0808301919091528d01516102808201906128fa60c08401826001600160a01b03169052565b5060c08e01516001600160a01b03811660e08401525060e08e01516001600160a01b038116610100840152506001600160a01b038d166101208301526001600160a01b038c166101408301528a61016083015289610180830152886101a0830152876101c0830152866101e08301528561020083015261297f61022083018615159052565b6001600160a01b039390931661024082015261026001529b9a5050505050505050505050565b60208152600082518060208401526129c4816040850160208701612ec8565b601f01601f19169190910160400192915050565b6020808252600f908201526e14d31417d393d517d0d49150551151608a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526009908201526814d554d4115391115160ba1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81518152602080830151908201526040808301516001600160a01b031690820152606080830151610120830191612aea908401826001600160a01b03169052565b506080830151612b0560808401826001600160a01b03169052565b5060a0830151612b2060a08401826001600160a01b03169052565b5060c0830151612b3b60c08401826001600160a01b03169052565b5060e083015160e083015261010080840151818401525092915050565b600061010060018060a01b03808551168452806020860151166020850152806040860151166040850152806060860151166060850152506080840151608084015260a084015160a08401528060c0840152600981840152506829a628102a37b5b2b760b91b6101208301526101408060e084015261228e81840160038152620534c560ec1b602082015260400190565b604051610120810167ffffffffffffffff81118282101715612c1a57634e487b7160e01b600052604160045260246000fd5b60405290565b604051610100810167ffffffffffffffff81118282101715612c1a57634e487b7160e01b600052604160045260246000fd5b600080821280156001600160ff1b0384900385131615612c7457612c74612f0b565b600160ff1b8390038412811615612c8d57612c8d612f0b565b50500190565b60008219821115612ca657612ca6612f0b565b500190565b600082612cc657634e487b7160e01b81526012600452602481fd5b600160ff1b821460001984141615612ce057612ce0612f0b565b500590565b600181815b80851115612d20578160001904821115612d0657612d06612f0b565b80851615612d1357918102915b93841c9390800290612cea565b509250929050565b60006114ef8383600082612d3e575060016106a7565b81612d4b575060006106a7565b8160018114612d615760028114612d6b57612d87565b60019150506106a7565b60ff841115612d7c57612d7c612f0b565b50506001821b6106a7565b5060208310610133831016604e8410600b8410161715612daa575081810a6106a7565b612db48383612ce5565b8060001904821115612dc857612dc8612f0b565b029392505050565b60006001600160ff1b0381841382841380821686840486111615612df657612df6612f0b565b600160ff1b84871282811687830589121615612e1457612e14612f0b565b858712925087820587128484161615612e2f57612e2f612f0b565b87850587128184161615612e4557612e45612f0b565b505050929093029392505050565b6000816000190483118215151615612e6d57612e6d612f0b565b500290565b60008083128015600160ff1b850184121615612e9057612e90612f0b565b6001600160ff1b0384018313811615612eab57612eab612f0b565b50500390565b600082821015612ec357612ec3612f0b565b500390565b60005b83811015612ee3578181015183820152602001612ecb565b838111156112f65750506000910152565b600081612f0357612f03612f0b565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611a7357600080fd5b8015158114611a7357600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214edfd026bd2d3fa1c600c8569d94bb4eed03cfafe0c37f74f3ca61c14b05898e31a26469706673582212203a9564f9e7cf257ebf9ec11d63f84bb4c61f93886beabf4785c199b35d832acd64736f6c63430008040033",
  "libraries": {
    "StakingImpl": "0x00CFC161b2608f9da75573150b6b2D78Ba9968C6",
    "SlpFactoryImpl": "0xeFE5e66C9aDd90B2B1E697C4d7c61d9DB40c93Eb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLongs()": {
        "returns": {
          "_0": "in USDC"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getShorts()": {
        "returns": {
          "_0": "in USDC"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "maxNotional()": {
        "returns": {
          "_0": "maximum position size (after leverage) in USDC"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLongs()": {
        "notice": "total longs positions notional for this market. "
      },
      "getShorts()": {
        "notice": "total shorts positions notional for this market. "
      },
      "maxNotional()": {
        "notice": "using to receive the maximum position size for the current market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15210,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "m_state",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(State)12148_storage"
      },
      {
        "astId": 557,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 560,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 698,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "70",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "_roles",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)62_storage)"
      },
      {
        "astId": 352,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "121",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 611,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "_status",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 654,
        "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "171",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetOracle)9866": {
        "encoding": "inplace",
        "label": "contract IAssetOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2108": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)10093": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IStrips)10570": {
        "encoding": "inplace",
        "label": "contract IStrips",
        "numberOfBytes": "20"
      },
      "t_contract(IStripsLpToken)10721": {
        "encoding": "inplace",
        "label": "contract IStripsLpToken",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapLpOracle)10784": {
        "encoding": "inplace",
        "label": "contract IUniswapLpOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)3220": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)62_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)62_storage"
      },
      "t_struct(InitParams)12118_storage": {
        "encoding": "inplace",
        "label": "struct StorageMarketLib.InitParams",
        "members": [
          {
            "astId": 12098,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "stripsProxy",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IStrips)10570"
          },
          {
            "astId": 12101,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "assetOracle",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IAssetOracle)9866"
          },
          {
            "astId": 12104,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "pairOracle",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IUniswapLpOracle)10784"
          },
          {
            "astId": 12106,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "initialPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 12108,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "burningCoef",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 12111,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "stakingToken",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IUniswapV2Pair)3220"
          },
          {
            "astId": 12114,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "tradingToken",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(IERC20)2108"
          },
          {
            "astId": 12117,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "strpToken",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IERC20)2108"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)62_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 59,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 61,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(State)12148_storage": {
        "encoding": "inplace",
        "label": "struct StorageMarketLib.State",
        "members": [
          {
            "astId": 12120,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "dao",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12123,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "params",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(InitParams)12118_storage"
          },
          {
            "astId": 12126,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "slpToken",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(IStripsLpToken)10721"
          },
          {
            "astId": 12129,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "rewarder",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRewarder)10093"
          },
          {
            "astId": 12131,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "totalLongs",
            "offset": 0,
            "slot": "11",
            "type": "t_int256"
          },
          {
            "astId": 12133,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "totalShorts",
            "offset": 0,
            "slot": "12",
            "type": "t_int256"
          },
          {
            "astId": 12135,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "demand",
            "offset": 0,
            "slot": "13",
            "type": "t_int256"
          },
          {
            "astId": 12137,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "supply",
            "offset": 0,
            "slot": "14",
            "type": "t_int256"
          },
          {
            "astId": 12139,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "ratio",
            "offset": 0,
            "slot": "15",
            "type": "t_int256"
          },
          {
            "astId": 12141,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "_prevLiquidity",
            "offset": 0,
            "slot": "16",
            "type": "t_int256"
          },
          {
            "astId": 12143,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "isSuspended",
            "offset": 0,
            "slot": "17",
            "type": "t_bool"
          },
          {
            "astId": 12145,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "sushiRouter",
            "offset": 1,
            "slot": "17",
            "type": "t_address"
          },
          {
            "astId": 12147,
            "contract": "contracts/markets/IrsMarket.sol:IrsMarket",
            "label": "createdAt",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}