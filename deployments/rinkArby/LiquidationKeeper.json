{
  "address": "0x28984FD72584520dD4dE5E2B64c21a7d86a633b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStrips",
          "name": "_strips",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "liquidated",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reverted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionIndex",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "changeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionIndex",
          "type": "uint256"
        }
      ],
      "name": "setPositionIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStrips",
          "name": "_strips",
          "type": "address"
        }
      ],
      "name": "setStrips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strips",
      "outputs": [
        {
          "internalType": "contract IStrips",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0008dc0e750a2617517517afe19b4aaf0907d4b34b860b650b2a012755c516b",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0x28984FD72584520dD4dE5E2B64c21a7d86a633b9",
    "transactionIndex": 0,
    "gasUsed": "42072502",
    "logsBloom": "0x
    "blockHash": "0x33e4dd7b5851b9445bddb36921e4c35c8ada3285f453d97688f72d60fcbc7d05",
    "transactionHash": "0xe0008dc0e750a2617517517afe19b4aaf0907d4b34b860b650b2a012755c516b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7139144,
        "transactionHash": "0xe0008dc0e750a2617517517afe19b4aaf0907d4b34b860b650b2a012755c516b",
        "address": "0x28984FD72584520dD4dE5E2B64c21a7d86a633b9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fd16ebaf4aa6127cb555d360e2cffc93c11a41b",
          "0x0000000000000000000000006fd16ebaf4aa6127cb555d360e2cffc93c11a41b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x33e4dd7b5851b9445bddb36921e4c35c8ada3285f453d97688f72d60fcbc7d05"
      }
    ],
    "blockNumber": 7139144,
    "cumulativeGasUsed": "31801622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f65a46AE079e8903a527A4C8cac033f7928bC1B",
    "0xc3c961A4e3adb11B849A69551C0eeB9803cD2b37",
    100
  ],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStrips\",\"name\":\"_strips\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reverted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"LiquidatorDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"changeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionIndex\",\"type\":\"uint256\"}],\"name\":\"setPositionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrips\",\"name\":\"_strips\",\"type\":\"address\"}],\"name\":\"setStrips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strips\",\"outputs\":[{\"internalType\":\"contract IStrips\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeRewardToken(address)\":{\"details\":\"USDC by default, but can be changed \",\"params\":{\"_newToken\":\"address to move funds to*\"}},\"checkUpkeep(bytes)\":{\"details\":\"By original Chainlink Keeper specification, the keeper process calls `checkUpkeep` method in order to determine if your contract requires some work to be done. Since Strips is interested in the most recent data, we return `true` unconditionally. Input data gets ignored.\",\"returns\":{\"upkeepNeeded\":\"Indicates whether the Keeper should call performUpkeep or not.*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"performUpkeep(bytes)\":{\"details\":\"Liquidation Oracles execute the `performUpkeep` method to trigger liquidations. Calldata is ignored.*\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setPositionIndex(uint256)\":{\"details\":\"Set position index (cursor). Called by admin only.\",\"params\":{\"_positionIndex\":\"new cursor position*\"}},\"setSize(uint256)\":{\"details\":\"Set batch size (how many positions can be processed per call).\",\"params\":{\"_size\":\"number of positions elements to process per call*\"}},\"setStrips(address)\":{\"details\":\"Change strips (proxy) address to new address\",\"params\":{\"_strips\":\"new Strips address*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawRewards(address)\":{\"details\":\"Move USDC reward for liquidation \",\"params\":{\"_to\":\"address to move funds to*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/LiquidationKeeper.sol\":\"LiquidationKeeper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"},\"contracts/oracle/LiquidationKeeper.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {IStrips} from \\\"../interface/IStrips.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract LiquidationKeeper is KeeperCompatibleInterface, AccessControl {\\n    using SignedBaseMath for int256;\\n    using Address for address;\\n\\n    event LiquidatorDone(\\n        uint indexed length, \\n        uint indexed liquidated, \\n        uint indexed reverted,\\n        uint positionIndex\\n    );\\n\\n\\n    address public rewardToken;\\n\\n    IStrips public strips;\\n    // To efficiently iterate large array of positions (hundreds),\\n    // Liquidation Keeper remembers the last index it processed (i.e. cursor)\\n    uint256 public positionIndex;\\n    // size specifies how many positions can be processed per single call.\\n    // depends on many factors and to be selected experimentally\\n    uint256 public size;\\n\\n    constructor(IStrips _strips,\\n                address _rewardToken,\\n                uint256 _size) {\\n        strips = _strips;\\n        size = _size;\\n        rewardToken = _rewardToken;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev By original Chainlink Keeper specification, the keeper process calls `checkUpkeep` method\\n     * in order to determine if your contract requires some work to be done. Since Strips is interested\\n     * in the most recent data, we return `true` unconditionally. Input data gets ignored.\\n     * @return upkeepNeeded Indicates whether the Keeper should call performUpkeep or not.\\n     **/\\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\\n        upkeepNeeded = true;\\n    }\\n\\n    /**\\n     * @dev Liquidation Oracles execute the `performUpkeep` method to trigger liquidations. Calldata is ignored.\\n     **/\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        uint liquidated = 0;\\n        uint reverted = 0;\\n        bool found = false;\\n\\n        StorageStripsLib.PositionMeta[] memory liqPositions = strips.getPositionsForLiquidation(positionIndex, size);\\n        \\n        for (uint256 i; i < liqPositions.length; i++) {\\n            /*\\n                By default liquidatePosition will be reverted if something goes wrong OR position is not for liquidation\\n                BUT\\n                we don't want to stop loop if one of the liquidation is reverted\\n            */\\n            if (liqPositions[i].isActive){\\n                found = true;\\n\\n                (bool success, bytes memory returndata) = address(strips).call{value: 0}(\\n                    abi.encodeWithSelector(strips.liquidatePosition.selector, liqPositions[i]._market, liqPositions[i]._account)\\n                );\\n                \\n                /*For stats */\\n                if (success){\\n                    liquidated += 1;\\n                }else{\\n                    reverted += 1;\\n                }\\n            }\\n        }\\n\\n        // save cursor for next iteration or reset to 0 if overflow position count boundary\\n        if (positionIndex + size >= strips.getPositionsCount()) {\\n            positionIndex = 0;\\n        } else {\\n            positionIndex += size;\\n        }\\n\\n        if (found){\\n            emit LiquidatorDone(\\n                liqPositions.length,\\n                liquidated,\\n                reverted,\\n                positionIndex\\n            );\\n        }\\n\\n        strips.ping();\\n    }\\n\\n    /**\\n     * @dev Set position index (cursor). Called by admin only.\\n     * @param _positionIndex new cursor position\\n     **/\\n    function setPositionIndex(uint256 _positionIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        positionIndex = _positionIndex;\\n    }\\n\\n    /**\\n     * @dev Set batch size (how many positions can be processed per call).\\n     * @param _size number of positions elements to process per call\\n     **/\\n    function setSize(uint256 _size) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        size = _size;\\n    }\\n\\n    /**\\n     * @dev Change strips (proxy) address to new address\\n     * @param _strips new Strips address\\n     **/\\n    function setStrips(IStrips _strips) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        strips = _strips;\\n    }\\n\\n    /**\\n     * @dev Move USDC reward for liquidation \\n     * @param _to address to move funds to\\n     **/\\n    function withdrawRewards(address _to) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint balance = IERC20(rewardToken).balanceOf(address(this));\\n        if (balance == 0){\\n            return;\\n        }\\n\\n        SafeERC20.safeTransfer(IERC20(rewardToken), \\n                                    _to, \\n                                    balance);\\n    }\\n\\n    /**\\n     * @dev USDC by default, but can be changed \\n     * @param _newToken address to move funds to\\n     **/\\n    function changeRewardToken(address _newToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rewardToken = _newToken;\\n    }\\n\\n}\",\"keccak256\":\"0xeb17a5614e599ddd4859792f7d988b4c7d6da43230aa62dfb3a06fa70af7da4c\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014c6380380620014c683398101604081905262000034916200012f565b600280546001600160a01b038086166001600160a01b03199283161790925560048390556001805492851692909116919091179055620000766000336200007f565b5050506200018f565b6200008b82826200008f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200008b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008060006060848603121562000144578283fd5b8351620001518162000176565b6020850151909350620001648162000176565b80925050604084015190509250925092565b6001600160a01b03811681146200018c57600080fd5b50565b611327806200019f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806354de463e116100a2578063949d225d11610071578063949d225d14610268578063a217fddf14610271578063cbb7052a14610279578063d547741f1461028c578063f7c618c11461029f57600080fd5b806354de463e1461021357806357921ea3146102265780636e04ff0d1461022f57806391d148541461025557600080fd5b80632f2ff15d116100e95780632f2ff15d1461019c57806336568abe146101af57806342d86693146101c25780634585e33b146101d55780634cff4494146101e857600080fd5b806301ffc9a71461011b578063088ab8ce14610143578063170ab40514610158578063248a9ca31461016b575b600080fd5b61012e610129366004611022565b6102b2565b60405190151581526020015b60405180910390f35b610156610151366004610eae565b6102e9565b005b610156610166366004610fdb565b610318565b61018e610179366004610fdb565b60009081526020819052604090206001015490565b60405190815260200161013a565b6101566101aa366004610ff3565b61032a565b6101566101bd366004610ff3565b610355565b6101566101d0366004610eae565b6103d8565b6101566101e336600461104a565b610483565b6002546101fb906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b610156610221366004610eae565b610837565b61018e60035481565b61024761023d36600461104a565b5060019160609150565b60405161013a92919061118c565b61012e610263366004610ff3565b610866565b61018e60045481565b61018e600081565b610156610287366004610fdb565b61088f565b61015661029a366004610ff3565b6108a1565b6001546101fb906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006102f581336108c7565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061032481336108c7565b50600455565b60008281526020819052604090206001015461034681336108c7565b610350838361092b565b505050565b6001600160a01b03811633146103ca5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103d482826109af565b5050565b60006103e481336108c7565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906110b7565b90508061046c57505050565b600154610350906001600160a01b03168483610a14565b600254600354600480546040516305b1a01d60e51b81526000948594859485946001600160a01b039093169363b63403a0936104cb9392909101918252602082015260400190565b60006040518083038186803b1580156104e357600080fd5b505afa1580156104f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051f9190810190610eca565b905060005b81518110156106c15781818151811061054d57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151156106af5760025482516001945060009182916001600160a01b0390911690829063586e848f60e01b908790879081106105a357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518787815181106105cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516024016106019291906001600160a01b0392831681529116602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161063f91906110fb565b60006040518083038185875af1925050503d806000811461067c576040519150601f19603f3d011682016040523d82523d6000602084013e610681565b606091505b5091509150811561069e57610697600188611214565b96506106ac565b6106a9600187611214565b95505b50505b806106b981611292565b915050610524565b50600260009054906101000a90046001600160a01b03166001600160a01b0316631ca3b0cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074891906110b7565b6004546003546107589190611214565b10610767576000600355610781565b6004546003600082825461077b9190611214565b90915550505b81156107c757828482517ff01b82476460afac2527a12fa3ba37b3f5b61c50c8bee2a3147420af5217c8fe6003546040516107be91815260200190565b60405180910390a45b600260009054906101000a90046001600160a01b03166001600160a01b0316635c36b1866040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b50505050505050505050565b600061084381336108c7565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061089b81336108c7565b50600355565b6000828152602081905260409020600101546108bd81336108c7565b61035083836109af565b6108d18282610866565b6103d4576108e9816001600160a01b03166014610a66565b6108f4836020610a66565b604051602001610905929190611117565b60408051601f198184030181529082905262461bcd60e51b82526103c1916004016111a7565b6109358282610866565b6103d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561096b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6109b98282610866565b156103d4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610350908490610c4f565b60606000610a7583600261122c565b610a80906002611214565b67ffffffffffffffff811115610aa657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610ad0576020820181803683370190505b509050600360fc1b81600081518110610af957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b3657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610b5a84600261122c565b610b65906001611214565b90505b6001811115610bf9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610ba757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610bcb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610bf28161127b565b9050610b68565b508315610c485760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103c1565b9392505050565b6000610ca4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d219092919063ffffffff16565b8051909150156103505780806020019051810190610cc29190610fc1565b6103505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c1565b6060610d308484600085610d38565b949350505050565b606082471015610d995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103c1565b843b610de75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103c1565b600080866001600160a01b03168587604051610e0391906110fb565b60006040518083038185875af1925050503d8060008114610e40576040519150601f19603f3d011682016040523d82523d6000602084013e610e45565b606091505b5091509150610e55828286610e60565b979650505050505050565b60608315610e6f575081610c48565b825115610e7f5782518084602001fd5b8160405162461bcd60e51b81526004016103c191906111a7565b80518015158114610ea957600080fd5b919050565b600060208284031215610ebf578081fd5b8135610c48816112d9565b60006020808385031215610edc578182fd5b825167ffffffffffffffff80821115610ef3578384fd5b818501915085601f830112610f06578384fd5b815181811115610f1857610f186112c3565b610f26848260051b016111e3565b8181528481019250838501600783901b85018601891015610f45578687fd5b8694505b82851015610fb557608080828b031215610f61578788fd5b610f696111ba565b610f7283610e99565b815287830151610f81816112d9565b81890152604083810151610f94816112d9565b90820152606083810151908201528552600195909501949386019301610f49565b50979650505050505050565b600060208284031215610fd2578081fd5b610c4882610e99565b600060208284031215610fec578081fd5b5035919050565b60008060408385031215611005578081fd5b823591506020830135611017816112d9565b809150509250929050565b600060208284031215611033578081fd5b81356001600160e01b031981168114610c48578182fd5b6000806020838503121561105c578182fd5b823567ffffffffffffffff80821115611073578384fd5b818501915085601f830112611086578384fd5b813581811115611094578485fd5b8660208285010111156110a5578485fd5b60209290920196919550909350505050565b6000602082840312156110c8578081fd5b5051919050565b600081518084526110e781602086016020860161124b565b601f01601f19169290920160200192915050565b6000825161110d81846020870161124b565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161114f81601785016020880161124b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161118081602884016020880161124b565b01602801949350505050565b8215158152604060208201526000610d3060408301846110cf565b602081526000610c4860208301846110cf565b6040516080810167ffffffffffffffff811182821017156111dd576111dd6112c3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120c5761120c6112c3565b604052919050565b60008219821115611227576112276112ad565b500190565b6000816000190483118215151615611246576112466112ad565b500290565b60005b8381101561126657818101518382015260200161124e565b83811115611275576000848401525b50505050565b60008161128a5761128a6112ad565b506000190190565b60006000198214156112a6576112a66112ad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112ee57600080fd5b5056fea264697066735822122011be3eca340fecf65e38030ec5ab96a6d77ec34dd70d75978d6ee55fb43c851a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806354de463e116100a2578063949d225d11610071578063949d225d14610268578063a217fddf14610271578063cbb7052a14610279578063d547741f1461028c578063f7c618c11461029f57600080fd5b806354de463e1461021357806357921ea3146102265780636e04ff0d1461022f57806391d148541461025557600080fd5b80632f2ff15d116100e95780632f2ff15d1461019c57806336568abe146101af57806342d86693146101c25780634585e33b146101d55780634cff4494146101e857600080fd5b806301ffc9a71461011b578063088ab8ce14610143578063170ab40514610158578063248a9ca31461016b575b600080fd5b61012e610129366004611022565b6102b2565b60405190151581526020015b60405180910390f35b610156610151366004610eae565b6102e9565b005b610156610166366004610fdb565b610318565b61018e610179366004610fdb565b60009081526020819052604090206001015490565b60405190815260200161013a565b6101566101aa366004610ff3565b61032a565b6101566101bd366004610ff3565b610355565b6101566101d0366004610eae565b6103d8565b6101566101e336600461104a565b610483565b6002546101fb906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b610156610221366004610eae565b610837565b61018e60035481565b61024761023d36600461104a565b5060019160609150565b60405161013a92919061118c565b61012e610263366004610ff3565b610866565b61018e60045481565b61018e600081565b610156610287366004610fdb565b61088f565b61015661029a366004610ff3565b6108a1565b6001546101fb906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006102f581336108c7565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061032481336108c7565b50600455565b60008281526020819052604090206001015461034681336108c7565b610350838361092b565b505050565b6001600160a01b03811633146103ca5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103d482826109af565b5050565b60006103e481336108c7565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906110b7565b90508061046c57505050565b600154610350906001600160a01b03168483610a14565b600254600354600480546040516305b1a01d60e51b81526000948594859485946001600160a01b039093169363b63403a0936104cb9392909101918252602082015260400190565b60006040518083038186803b1580156104e357600080fd5b505afa1580156104f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051f9190810190610eca565b905060005b81518110156106c15781818151811061054d57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151156106af5760025482516001945060009182916001600160a01b0390911690829063586e848f60e01b908790879081106105a357634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518787815181106105cf57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516024016106019291906001600160a01b0392831681529116602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161063f91906110fb565b60006040518083038185875af1925050503d806000811461067c576040519150601f19603f3d011682016040523d82523d6000602084013e610681565b606091505b5091509150811561069e57610697600188611214565b96506106ac565b6106a9600187611214565b95505b50505b806106b981611292565b915050610524565b50600260009054906101000a90046001600160a01b03166001600160a01b0316631ca3b0cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074891906110b7565b6004546003546107589190611214565b10610767576000600355610781565b6004546003600082825461077b9190611214565b90915550505b81156107c757828482517ff01b82476460afac2527a12fa3ba37b3f5b61c50c8bee2a3147420af5217c8fe6003546040516107be91815260200190565b60405180910390a45b600260009054906101000a90046001600160a01b03166001600160a01b0316635c36b1866040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b50505050505050505050565b600061084381336108c7565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061089b81336108c7565b50600355565b6000828152602081905260409020600101546108bd81336108c7565b61035083836109af565b6108d18282610866565b6103d4576108e9816001600160a01b03166014610a66565b6108f4836020610a66565b604051602001610905929190611117565b60408051601f198184030181529082905262461bcd60e51b82526103c1916004016111a7565b6109358282610866565b6103d4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561096b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6109b98282610866565b156103d4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610350908490610c4f565b60606000610a7583600261122c565b610a80906002611214565b67ffffffffffffffff811115610aa657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610ad0576020820181803683370190505b509050600360fc1b81600081518110610af957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b3657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610b5a84600261122c565b610b65906001611214565b90505b6001811115610bf9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610ba757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610bcb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610bf28161127b565b9050610b68565b508315610c485760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103c1565b9392505050565b6000610ca4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d219092919063ffffffff16565b8051909150156103505780806020019051810190610cc29190610fc1565b6103505760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c1565b6060610d308484600085610d38565b949350505050565b606082471015610d995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103c1565b843b610de75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103c1565b600080866001600160a01b03168587604051610e0391906110fb565b60006040518083038185875af1925050503d8060008114610e40576040519150601f19603f3d011682016040523d82523d6000602084013e610e45565b606091505b5091509150610e55828286610e60565b979650505050505050565b60608315610e6f575081610c48565b825115610e7f5782518084602001fd5b8160405162461bcd60e51b81526004016103c191906111a7565b80518015158114610ea957600080fd5b919050565b600060208284031215610ebf578081fd5b8135610c48816112d9565b60006020808385031215610edc578182fd5b825167ffffffffffffffff80821115610ef3578384fd5b818501915085601f830112610f06578384fd5b815181811115610f1857610f186112c3565b610f26848260051b016111e3565b8181528481019250838501600783901b85018601891015610f45578687fd5b8694505b82851015610fb557608080828b031215610f61578788fd5b610f696111ba565b610f7283610e99565b815287830151610f81816112d9565b81890152604083810151610f94816112d9565b90820152606083810151908201528552600195909501949386019301610f49565b50979650505050505050565b600060208284031215610fd2578081fd5b610c4882610e99565b600060208284031215610fec578081fd5b5035919050565b60008060408385031215611005578081fd5b823591506020830135611017816112d9565b809150509250929050565b600060208284031215611033578081fd5b81356001600160e01b031981168114610c48578182fd5b6000806020838503121561105c578182fd5b823567ffffffffffffffff80821115611073578384fd5b818501915085601f830112611086578384fd5b813581811115611094578485fd5b8660208285010111156110a5578485fd5b60209290920196919550909350505050565b6000602082840312156110c8578081fd5b5051919050565b600081518084526110e781602086016020860161124b565b601f01601f19169290920160200192915050565b6000825161110d81846020870161124b565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161114f81601785016020880161124b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161118081602884016020880161124b565b01602801949350505050565b8215158152604060208201526000610d3060408301846110cf565b602081526000610c4860208301846110cf565b6040516080810167ffffffffffffffff811182821017156111dd576111dd6112c3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561120c5761120c6112c3565b604052919050565b60008219821115611227576112276112ad565b500190565b6000816000190483118215151615611246576112466112ad565b500290565b60005b8381101561126657818101518382015260200161124e565b83811115611275576000848401525b50505050565b60008161128a5761128a6112ad565b506000190190565b60006000198214156112a6576112a66112ad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112ee57600080fd5b5056fea264697066735822122011be3eca340fecf65e38030ec5ab96a6d77ec34dd70d75978d6ee55fb43c851a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeRewardToken(address)": {
        "details": "USDC by default, but can be changed ",
        "params": {
          "_newToken": "address to move funds to*"
        }
      },
      "checkUpkeep(bytes)": {
        "details": "By original Chainlink Keeper specification, the keeper process calls `checkUpkeep` method in order to determine if your contract requires some work to be done. Since Strips is interested in the most recent data, we return `true` unconditionally. Input data gets ignored.",
        "returns": {
          "upkeepNeeded": "Indicates whether the Keeper should call performUpkeep or not.*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "performUpkeep(bytes)": {
        "details": "Liquidation Oracles execute the `performUpkeep` method to trigger liquidations. Calldata is ignored.*"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setPositionIndex(uint256)": {
        "details": "Set position index (cursor). Called by admin only.",
        "params": {
          "_positionIndex": "new cursor position*"
        }
      },
      "setSize(uint256)": {
        "details": "Set batch size (how many positions can be processed per call).",
        "params": {
          "_size": "number of positions elements to process per call*"
        }
      },
      "setStrips(address)": {
        "details": "Change strips (proxy) address to new address",
        "params": {
          "_strips": "new Strips address*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawRewards(address)": {
        "details": "Move USDC reward for liquidation ",
        "params": {
          "_to": "address to move funds to*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 985,
        "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)980_storage)"
      },
      {
        "astId": 15883,
        "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15886,
        "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
        "label": "strips",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStrips)10570"
      },
      {
        "astId": 15888,
        "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
        "label": "positionIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15890,
        "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
        "label": "size",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStrips)10570": {
        "encoding": "inplace",
        "label": "contract IStrips",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)980_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)980_storage"
      },
      "t_struct(RoleData)980_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 977,
            "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 979,
            "contract": "contracts/oracle/LiquidationKeeper.sol:LiquidationKeeper",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}