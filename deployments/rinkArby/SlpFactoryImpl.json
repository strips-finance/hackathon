{
  "address": "0xeFE5e66C9aDd90B2B1E697C4d7c61d9DB40c93Eb",
  "abi": [],
  "transactionHash": "0xbe678745d43327399a0deb10c0e47eba12a730c53371b70d42839ce60572d127",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0xeFE5e66C9aDd90B2B1E697C4d7c61d9DB40c93Eb",
    "transactionIndex": 0,
    "gasUsed": "161354091",
    "logsBloom": "0x
    "blockHash": "0x9d3b920a98b799a3665004126aac39129d3645cc4560b969456d92379dd7a2a1",
    "transactionHash": "0xbe678745d43327399a0deb10c0e47eba12a730c53371b70d42839ce60572d127",
    "logs": [],
    "blockNumber": 7139056,
    "cumulativeGasUsed": "124996608",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/impl/SlpFactoryImpl.sol\":\"SlpFactoryImpl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/impl/SlpFactoryImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { Rewarder } from \\\"../reward/Rewarder.sol\\\";\\n\\nlibrary SlpFactoryImpl {\\n    using SignedBaseMath for int256;\\n    /*\\n        Factory method, to reduce contract size\\n        Creating code is huge\\n     */\\n    function _slpFactory(\\n        IStripsLpToken.TokenParams memory _params,\\n        string memory _name,\\n        string memory _symbol \\n    ) external returns (IStripsLpToken) \\n    {\\n        return new SLPToken(_params,\\n                            _name,\\n                            _symbol);\\n    }\\n\\n    function _rewarderFactory(\\n        IRewarder.InitParams memory _params\\n    ) external returns (IRewarder)\\n    {\\n        return new Rewarder(_params);\\n    }\\n}\\n\",\"keccak256\":\"0x84cc03cca7428033fd4da2c5419c216375522f258e1580abee5cde9d953792ac\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"},\"contracts/reward/Rewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Rewarder contract\\n * @dev Tracks stakers' and traders' contributions, calculates and pays rewards in SRP token.\\n * Deployed per asset (per market) as a separate instance.\\n * @author Strips Finance\\n **/\\ncontract Rewarder is IRewarder {\\n    bool private lock;\\n    address public owner;\\n\\n\\n    using SignedBaseMath for int256;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_AN_OWNER\\\");\\n         _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == params.admin, \\\"NOT_AN_ADMIN\\\");\\n         _;\\n    }\\n\\n    modifier onlyStripsOrOwner() {\\n        require(msg.sender == owner || msg.sender == params.stripsProxy, \\\"NOT_AN_OWNER_OR_STRIPS\\\");\\n         _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(lock == false, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        lock = true;\\n        _;\\n        lock = false;\\n    }\\n\\n    InitParams public params;\\n\\n    // Info on each participant of the reward program (common for both traders and stakers)\\n    struct TraderInfo {\\n        bool isClaimed;\\n\\n        /*Time when the position was opened. Use that to detect wash trades */\\n        uint256 lastTradeTime;\\n\\n        /*Number of period when the trader did his last trade */\\n        uint256 lastPeriod;\\n        \\n        /* The value of total AMM trading volume for lastPeriod */\\n        int256 accInitial;\\n        \\n        /*Cummulative trader's trade volume for the period */\\n        int256 periodTradingVolume;\\n\\n        /*Total current reward, it's not go to 0 if trader goes inactive, as you can claim at anytime */\\n        int256 reward;\\n    }\\n\\n    struct StakerInfo{\\n        uint256 timeInitial;\\n        int256 accInitial;\\n\\n        int256 slp;\\n        int256 reward;\\n    }\\n\\n    int256 public totalTradingRewardsClaimed;\\n    int256 public totalStakingRewardsClaimed;\\n\\n    uint256 public currentPeriod;\\n    uint256 public startTime;\\n\\n    /*Staking */\\n    uint256 public lastStakeTime;\\n    int256 public supplyStakeTotal;\\n    int256 public accStakeTotal;\\n\\n    /*Trading */\\n    uint256 public lastTradeTime;\\n    int256 public tradingVolumeTotal;\\n    int256 public accTradeTotal;\\n\\n\\n    mapping(uint256 => int256) public accPerPeriod;\\n    mapping(address => TraderInfo) public traders;\\n    mapping(address => StakerInfo) public stakers;\\n\\n    constructor(\\n        InitParams memory _params\\n    ) {\\n        params = _params;\\n        owner = msg.sender;\\n        startTime = 0;\\n\\n        totalTradingRewardsClaimed = 0;\\n        totalStakingRewardsClaimed = 0;\\n    }\\n\\n    function currentTradingReward() external view override returns(int256)\\n    {\\n        return params.rewardTotalPerSecTrader;\\n    }\\n\\n    function currentStakingReward() external view override returns (int256)\\n    {\\n        return params.rewardTotalPerSecStaker;\\n    }\\n\\n\\n    function changeTradingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (!isSwitched && tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accTradeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        }\\n\\n        params.rewardTotalPerSecTrader = _newRewardPerSec;\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    function changeStakingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        params.rewardTotalPerSecStaker = _newRewardPerSec;\\n        lastStakeTime = block.timestamp;\\n    }\\n\\n\\n    function changeDao(address _newDao) external onlyAdmin\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        params.dao = _newDao;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyAdmin\\n    {\\n        require(_newOwner != address(0), \\\"ZERO_OWNER\\\");\\n        owner = _newOwner;\\n    }\\n\\n    function changeAdmin(address _newAdmin) external onlyAdmin\\n    {\\n        require(_newAdmin != address(0), \\\"ZERO_ADMIN\\\");\\n        params.admin = _newAdmin;\\n    }\\n\\n\\n    /**\\n     * @dev Should be called each time someone stake/unstake.\\n     * @param _staker address of the staker\\n     **/\\n    function rewardStaker(address _staker) external override nonReentrant onlyStripsOrOwner {\\n        /*Accumulare reward for previous period and update accumulator */\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        /*Accumulate for the previous period if there was any supply */\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n        lastStakeTime = block.timestamp;\\n        supplyStakeTotal = int256(params.slpToken.totalSupply());\\n\\n        /*Update staker's stake*/\\n        stakers[_staker].accInitial = accStakeTotal;\\n        stakers[_staker].slp = int256(params.slpToken.balanceOf(_staker));\\n        stakers[_staker].timeInitial = block.timestamp;\\n    }\\n\\n    function claimStakingReward(address _staker) external override {\\n\\n        /*Accumulare reward and update staker's initial */\\n        //stakers[_staker].reward = totalStakerReward(_staker).muld(params.rewardTotalPerSecStaker);\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        if (stakers[_staker].reward <= 0){\\n            return;\\n        }\\n\\n        int256 accInstant = accStakeTotal;\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _staker, \\n                                    uint(stakers[_staker].reward));\\n        \\n        emit StakingRewardClaimed(\\n            _staker, \\n            stakers[_staker].reward\\n        );\\n\\n        totalStakingRewardsClaimed += stakers[_staker].reward;\\n\\n        /*Reset reward and time*/\\n        stakers[_staker].reward = 0;\\n        stakers[_staker].timeInitial = block.timestamp;\\n        stakers[_staker].accInitial = accInstant;\\n    }\\n\\n    function totalStakerReward(address _staker) public view override returns (int256 reward){\\n        /*If staker didn't stake he can't have reward yet */\\n        if (stakers[_staker].timeInitial == 0){\\n            return 0;\\n        }\\n\\n        /*if supply is 0 it means that everyone usntake and no more accumulation */\\n        if (supplyStakeTotal <= 0){\\n            return stakers[_staker].reward;\\n        }\\n\\n        /*Accumulate reward till current time */\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        int256 accInstant = accStakeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        return stakers[_staker].reward + stakers[_staker].slp.muld(accInstant - stakers[_staker].accInitial);\\n    }\\n\\n\\n    function totalTradeReward(address _trader) public view override returns (int256 reward){\\n        uint256 traderLastTrade = traders[_trader].lastTradeTime;\\n\\n        /*If trader didn't or no one trade then it's 0 */\\n        if (traderLastTrade == 0 || lastTradeTime == 0){\\n            return 0;\\n        }\\n\\n        /* What's the number of the current period? */\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /*Which period the trader last trade */\\n        uint256 traderLastPeriod = traders[_trader].lastPeriod;\\n\\n        int256 accInstant = 0;\\n        /* Accumulate reward for the previous period - ONLY till the end of period */\\n        if (_period > traderLastPeriod){\\n            accInstant = accPerPeriod[traderLastPeriod];\\n            if (accInstant == 0){\\n                /* updatePeriod never called. Need to calc accumulator first */\\n                /* |t(1)----period1---(traderLastTrade)----(lastTradeTime)<----timeDiff---->|(end of period)------call HERE| */\\n\\n                if (tradingVolumeTotal <= 0){\\n                    return traders[_trader].reward;\\n                }\\n\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accInstant = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n            }\\n\\n            int256 _newReward = traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n\\n            return traders[_trader].reward + _newReward;\\n        }\\n\\n        /*It's the same period*/\\n        if (tradingVolumeTotal <= 0){\\n            /*no one trade yet*/\\n            return traders[_trader].reward;\\n        }\\n        \\n        \\n        int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n        accInstant = accTradeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        return traders[_trader].reward + traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n    }\\n\\n\\n    \\n    /**\\n     * @dev Should be called each time trader trader.\\n     * @param _trader address of the trader\\n     * @param _notional current trade position size\\n     **/\\n    function rewardTrader(address _trader, int256 _notional) external override nonReentrant onlyStripsOrOwner {\\n        if (startTime == 0){\\n            /*Setup start time for all periods once first trader ever happened*/\\n            startTime = block.timestamp;\\n            currentPeriod = 0;\\n        }\\n\\n        int256 boostedNotional = _notional.muld(_booster(_trader));\\n        \\n        if ((block.timestamp - traders[_trader].lastTradeTime) < params.washTime && traders[_trader].isClaimed == false){\\n            /*If it's a wash trade just update period and return */\\n            _updatePeriod(boostedNotional);\\n\\n            lastTradeTime = block.timestamp;\\n            return;\\n        }\\n        \\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        bool isSwitched = _updatePeriod(boostedNotional);\\n        if (currentPeriod != traders[_trader].lastPeriod){\\n            isSwitched = true;\\n        }\\n\\n        /*Update trader */\\n        if (isSwitched){\\n            /*Reset volume */\\n            traders[_trader].periodTradingVolume = boostedNotional;\\n        }else{\\n            /*Accumulate trading volume for trader */\\n            traders[_trader].periodTradingVolume += boostedNotional;\\n        }\\n\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = false;\\n\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].accInitial = accTradeTotal;\\n\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Send all current reward to the trader\\n     **/\\n    function claimTradingReward(address _trader) external override {\\n\\n        //Accumulate any reward till this taime\\n        //traders[_trader].reward = totalTradeReward(_trader).muld(params.rewardTotalPerSecTrader);\\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        if (traders[_trader].reward <= 0){\\n            return;\\n        }\\n\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (isSwitched){\\n            traders[_trader].periodTradingVolume = 0;\\n        }\\n\\n        /*move accumulator */\\n        int256 accInstant = accTradeTotal;\\n        \\n        if (tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n        }\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _trader, \\n                                    uint(traders[_trader].reward));\\n\\n        emit TradingRewardClaimed(\\n            _trader,\\n            traders[_trader].reward\\n        );\\n\\n\\n        totalTradingRewardsClaimed += traders[_trader].reward;\\n\\n        /*Reset all params */\\n        traders[_trader].accInitial = accInstant;\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = true;\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].reward = 0;\\n\\n    }\\n\\n    /**\\n     * @dev Calls on each actions\\n     * @param _notional current trade notional\\n     * @return isSwitched true if period switched\\n     **/\\n    function _updatePeriod(int256 _notional) internal returns (bool isSwitched) {\\n        isSwitched = false;\\n\\n        /* _periods are not incremented by ONE.  It can be 1,2,5,8,12 Depends on when the last trade happened*/\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /* Reset period */\\n        if (_period > currentPeriod){\\n            if (lastTradeTime != 0){\\n                /* Calc the rest and save */\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accPerPeriod[currentPeriod] = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n                /* Reset total AMM trading volume and accumulator */\\n                tradingVolumeTotal = 0;\\n                accTradeTotal = 0;\\n\\n            } //else: //It's the first trade ever, just setup period\\n\\n            isSwitched = true;\\n            /*Switch period */\\n            currentPeriod = _period;\\n\\n        }\\n\\n        /* If it's the trade then change volume and accumulate it */\\n        if (_notional > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            if (lastTradeTime != 0 && tradingVolumeTotal > 0){\\n                // If it's not the first trade in period OR the first trade EVER\\n                int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n                accTradeTotal += (timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal));\\n            }\\n            tradingVolumeTotal += _notional;\\n        }\\n    }\\n\\n    function _booster(address _trader) internal returns (int256){\\n        int256 supply = int256(params.slpToken.totalSupply());\\n        if (supply <= 0) {\\n            return SignedBaseMath.oneDecimal();\\n        }\\n        return SignedBaseMath.oneDecimal() + int256(params.slpToken.balanceOf(_trader)).divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb3a36161c8ca25e23e1389aa2e77701981cc55bf4569d2aee48c9a64a6b1573b\"},\"contracts/token/SLPToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title SLP token using for adding \\\"stakebility\\\" to any asset\\n * @dev created by the asset. All calls for changing PNL are ownable:\\n * Have 2 tokens by default:\\n *  staking - the token that is using for staking to Asset (UNIV2 pair by default for the current version)\\n *  trading - the token that is using for accumulating profit. By default it's USDC\\n * @author Strips Finance\\n **/\\ncontract SLPToken is \\n    IStripsLpToken,\\n    ERC20, \\n    ReentrancyGuard,\\n    Ownable\\n{ \\n    using SignedBaseMath for int256;\\n\\n    // Developed to be able to track 2-tokens asset\\n    struct StakerData {\\n        bool exist;\\n\\n        //save initial staking/trading cummulative PNL on staker's stake event.\\n        int256 initialStakingPnl;\\n        int256 initialTradingPnl;\\n        \\n        uint256 initialBlockNum;\\n        uint256 initialTimeStamp;\\n\\n        //Save the current staking/trading unrealized profit when the staker stake 2+ time.\\n        int256 unrealizedStakingProfit;\\n        int256 unrealizedTradingProfit;\\n    }\\n\\n    int256 public prevStakingPnl;\\n    int256 public prevTradingPnl;\\n\\n    int256 public cummulativeStakingPnl;\\n    int256 public cummulativeTradingPnl;\\n    \\n    //For tracking trading/staking \\\"growth\\\", should be changed by the OWNER only \\n    int256 public cumTradingPNL;\\n    int256 public cumStakingPNL;\\n        \\n    \\n    //All data setup on init\\n    TokenParams private params;\\n    mapping (address => StakerData) public stakers;\\n\\n    /*To not have stack too deep error */\\n    struct InternalCalcs {\\n        int256 amount;\\n        int256 assetPnl;\\n        int256 currentTradingPnl;\\n        int256 currentStakingPnl;\\n\\n        int256 instantCummulativeStakingPnl;\\n        int256 isntantCummulativeTradingPnl;\\n\\n        int256 unstakeShare;\\n        int256 feeShare;\\n    }\\n\\n\\n    constructor(TokenParams memory _params,\\n                string memory _name,\\n                string memory _symbol) \\n                ERC20(_name, _symbol) \\n    {\\n        params = _params;\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumTradingPNL += amount;\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumStakingPNL += amount;\\n    }\\n\\n    function claimProfit(address staker, uint256 amount) public override onlyOwner returns (int256 stakingProfit, int256 tradingProfit)\\n    {\\n        ProfitParams memory profit = calcProfit(staker, amount);\\n        if (profit.stakingFee > 0){\\n            changeStakingPnl(profit.stakingFee);\\n        }\\n\\n        if (profit.lpProfit > 0){\\n            changeStakingPnl(profit.lpProfit);\\n        }\\n\\n        if (profit.usdcLoss < 0){\\n            changeTradingPnl(profit.usdcLoss);\\n        }\\n\\n\\n        burn(staker, amount);\\n\\n        stakingProfit = profit.unstakeAmountLP;\\n        tradingProfit = profit.unstakeAmountERC20;\\n    }\\n\\n\\n    function getPairPrice() external view override returns (int256)\\n    {\\n        return IUniswapLpOracle(params.pairOracle).getPrice();\\n    }\\n\\n    function getBurnableToken() external view override returns (address)\\n    {\\n        return params.stakingToken;\\n    }\\n\\n    function getParams() external view override returns (TokenParams memory)\\n    {   \\n        return params;\\n    }\\n\\n    function checkOwnership() external view override onlyOwner returns (address) {\\n        //DO nothing, just revert if call is not from owner\\n\\n        return owner();\\n    }\\n\\n    function totalPnl() external view override returns (int256 usdcTotal, int256 lpTotal)\\n    {\\n        int256 unrealizedPnl = IStrips(params.stripsProxy).assetPnl(owner());\\n\\n        usdcTotal = unrealizedPnl + cumTradingPNL;\\n        lpTotal = cumStakingPNL;\\n    }\\n\\n    function stakingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        current = cumStakingPNL;\\n\\n        if (_totalSupply == 0){\\n            cummulative = cummulativeStakingPnl + current;\\n        } else {\\n            cummulative = cummulativeStakingPnl + (current - prevStakingPnl).divd(_totalSupply);\\n        }\\n\\n    }\\n\\n    function tradingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        int256 assetPnl = IStrips(params.stripsProxy).assetPnl(_owner);\\n\\n        current = assetPnl + cumTradingPNL;\\n        \\n        if (_totalSupply == 0){\\n            cummulative = cummulativeTradingPnl + current;\\n        } else {\\n            cummulative = cummulativeTradingPnl + (current - prevTradingPnl).divd(_totalSupply);\\n        }\\n    }\\n\\n\\n    function accumulatePnl() public override onlyOwner {\\n        int256 currentStakingPnl = 0;\\n        int256 currentTradingPnl = 0;\\n\\n        (currentStakingPnl, cummulativeStakingPnl) = stakingPnl();\\n        prevStakingPnl = currentStakingPnl;\\n\\n\\n        (currentTradingPnl, cummulativeTradingPnl) = tradingPnl();\\n        prevTradingPnl = currentTradingPnl;\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function saveProfit(address staker) public override onlyOwner {\\n        int256 tokenBalance = int256(balanceOf(staker));\\n        \\n        stakers[staker].unrealizedStakingProfit += (cummulativeStakingPnl - stakers[staker].initialStakingPnl).muld(tokenBalance);\\n        stakers[staker].unrealizedTradingProfit += (cummulativeTradingPnl - stakers[staker].initialTradingPnl).muld(tokenBalance);\\n    }\\n\\n\\n    /*All checks should be made inside caller */\\n    function mint(address staker, uint256 amount) public override onlyOwner \\n    {        \\n        stakers[staker] = StakerData({\\n            exist: true,\\n\\n            initialStakingPnl:cummulativeStakingPnl,\\n            initialTradingPnl:cummulativeTradingPnl,\\n    \\n            initialBlockNum:block.number,\\n            initialTimeStamp:block.timestamp,\\n\\n            unrealizedStakingProfit: stakers[staker].unrealizedStakingProfit,\\n            unrealizedTradingProfit: stakers[staker].unrealizedTradingProfit\\n        });\\n\\n        _mint(staker, amount);\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function burn(address staker, uint256 amount) public override onlyOwner \\n    {\\n        int256 burnShare = int256(amount).divd(int256(balanceOf(staker)));\\n\\n        stakers[staker].unrealizedStakingProfit -= (stakers[staker].unrealizedStakingProfit.muld(burnShare));\\n        stakers[staker].unrealizedTradingProfit -= (stakers[staker].unrealizedTradingProfit.muld(burnShare));\\n\\n        _burn(staker, amount);\\n\\n        if (balanceOf(staker) == 0){\\n            delete stakers[staker];\\n        }\\n    }\\n\\n    function canUnstake(address staker, uint256 amount) external view override\\n    {\\n        require(stakers[staker].exist, \\\"NO_SUCH_STAKER\\\");\\n        require(block.number > stakers[staker].initialBlockNum, \\\"UNSTAKE_SAME_BLOCK\\\");\\n        require(amount > 0 && balanceOf(staker) >= amount, \\\"WRONG_UNSTAKE_AMOUNT\\\");\\n    }\\n\\n        \\n\\n\\n    /**\\n     * @dev Major view method that is using by frontend to view the current profit\\n     *  Here is how we show data on frontend (check ProfitParams below):\\n     *  1 - On major screen with the list of all stakes:\\n     *       totalStaked = 100 Lp tokens  (shows in LP amount of LP tokens user staked)\\n     *       stakingProfit (LP) = 10 LP ($10)  (shows the profit or loss that staker earned or lost in LP. Need to convert to USDC using profit.lpPrice)\\n     *       unstakeAmountERC20 (USDC) = -$100  (shows the profit or loss that staker earned in USDC)\\n     *       stakingFee = 1 LP (days left to 0 = penaltyLeft)\\n     *\\n     *  2 - on popup when staker select THE EXACT amount of SLP to unstake:\\n     *       profit.unstakeAmountLP (LP) = 100 LP ($100)   The amount that the staker will receive in LP, including collateral\\n     *       profit.unstakeAmountERC20 (USDC) = $10 | 0.   The amount that the staker will receive in USDC. Will be 0 if pnl is negative.\\n     *       _ hide the penalty\\n     *\\n     * @param staker staker address\\n     * @param amount amount of SLP tokens for unstake\\n     * @return profit ProfitParams all data that is required to show the profit, check IStripsLpToken interface\\n     *       struct ProfitParams\\n     *           // LP unstaked amount \\n     *           int256 unstakeAmountLP;\\n     *\\n     *           //USDC unstaked amount  \\n     *           int256 unstakeAmountERC20;\\n     *\\n     *          //LP profit or loss not including collateral\\n     *           int256 stakingProfit;   \\n     *           \\n     *           //Fee that is paid if unstake in less than 7 days (paid in LP tokens)\\n     *           int256 stakingFee;\\n     *\\n     *          //Time in seconds left untill penalty will become 0\\n     *           int256 penaltyLeft;\\n     *\\n     *           //Collateral in LP that staker staked\\n     *           uint256 totalStaked;\\n     *\\n     *           //The current LP price (in USDC), using for conversion\\n     *           int256 lpPrice;\\n     **/\\n    function calcProfit(address staker, uint256 amount) public view override returns (ProfitParams memory profit)\\n    {\\n        profit.totalStaked = balanceOf(staker);\\n        require(amount > 0 && amount <= profit.totalStaked, \\\"WRONG_AMOUNT\\\");\\n        \\n        InternalCalcs memory internalCalcs;\\n        internalCalcs.amount = int256(amount);\\n\\n        (internalCalcs.currentStakingPnl, \\n            internalCalcs.instantCummulativeStakingPnl) = stakingPnl();\\n        \\n        (internalCalcs.currentTradingPnl, \\n            internalCalcs.isntantCummulativeTradingPnl) = tradingPnl();\\n\\n        internalCalcs.unstakeShare = internalCalcs.amount.divd(int256(profit.totalStaked));\\n        profit.stakingProfit = internalCalcs.amount.muld(internalCalcs.instantCummulativeStakingPnl - stakers[staker].initialStakingPnl) +  internalCalcs.unstakeShare.muld(stakers[staker].unrealizedStakingProfit);\\n        profit.unstakeAmountERC20 = internalCalcs.amount.muld(internalCalcs.isntantCummulativeTradingPnl - stakers[staker].initialTradingPnl) + internalCalcs.unstakeShare.muld(stakers[staker].unrealizedTradingProfit);\\n\\n        (internalCalcs.feeShare, \\n            profit.penaltyLeft) = calcFeeLeft(staker);\\n\\n        profit.stakingFee = internalCalcs.amount.muld(internalCalcs.feeShare);\\n        profit.unstakeAmountLP = internalCalcs.amount + profit.stakingProfit - profit.stakingFee;\\n\\n        profit.lpPrice = IUniswapLpOracle(params.pairOracle).getPrice();\\n        if (profit.unstakeAmountERC20 < 0){\\n            profit.usdcLoss = profit.unstakeAmountERC20;\\n            profit.lpProfit = -1 * profit.usdcLoss.divd(profit.lpPrice);\\n            profit.unstakeAmountLP = profit.unstakeAmountLP  - profit.lpProfit;\\n\\n            profit.unstakeAmountERC20 = 0;\\n            \\n        }\\n\\n    }\\n    \\n\\n    /*\\n        2% fee during 7 days now.\\n    */\\n    function calcFeeLeft(\\n        address staker\\n    ) public view override returns (int256 feeShare, \\n                                int256 periodLeft)\\n    {\\n        feeShare = 0;\\n        periodLeft = 0;\\n\\n        int256 time_elapsed = int256(block.timestamp - stakers[staker].initialTimeStamp);\\n\\n        if (time_elapsed >= params.penaltyPeriod){\\n            return (0, 0);\\n        }\\n        \\n        feeShare = params.penaltyFee - params.penaltyFee.divd(params.penaltyPeriod.toDecimal()).muld(time_elapsed.toDecimal());\\n        periodLeft = params.penaltyPeriod - time_elapsed;\\n    }\\n\\n    function setPenaltyFee(int256 _fee) external override onlyOwner{\\n        require(_fee >= 0, \\\"WRONG_FEE\\\");\\n\\n        params.penaltyFee = _fee;\\n    }\\n\\n    function setParams(TokenParams memory _params) external override onlyOwner{\\n        params = _params;\\n    }\\n\\n\\n    function transfer(address recipient, uint256 amount) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(msg.sender, recipient, amount);\\n\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(sender, recipient, amount);\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferStake(address sender, address recipient, uint256 amount) private {\\n        require(stakers[sender].exist, \\\"STAKER_NOT_FOUND\\\");\\n        require(stakers[recipient].exist == false, \\\"MERGE_NOT_POSSIBLE\\\");\\n\\n        int256 transferShare = int256(amount / balanceOf(sender));\\n\\n        stakers[recipient] = stakers[sender];\\n\\n        int256 stakingProfit = transferShare * stakers[sender].unrealizedStakingProfit;\\n        int256 tradingProfit = transferShare * stakers[sender].unrealizedTradingProfit;\\n\\n        if (stakingProfit != 0){\\n            stakers[sender].unrealizedStakingProfit -= stakingProfit;\\n            stakers[recipient].unrealizedStakingProfit = stakingProfit;\\n        }\\n\\n        if (tradingProfit != 0){\\n            stakers[sender].unrealizedTradingProfit -= tradingProfit;\\n            stakers[recipient].unrealizedTradingProfit = tradingProfit;\\n        }\\n\\n        if (amount == balanceOf(sender)){\\n            delete stakers[sender];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1578fe2e4327eebd21ad4dc9d774d8719a147144de2dbde25fd1a6d10b31baef\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x614d8161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000435760003560e01c8063bdf3bf191462000048578063e9f89fb01462000089575b600080fd5b8180156200005557600080fd5b506200006d62000067366004620001f3565b620000ae565b6040516001600160a01b03909116815260200160405180910390f35b8180156200009657600080fd5b506200006d620000a83660046200029b565b620000ef565b600081604051620000bf9062000136565b620000cb9190620003d5565b604051809103906000f080158015620000e8573d6000803e3d6000fd5b5092915050565b6000838383604051620001029062000144565b620001109392919062000488565b604051809103906000f0801580156200012d573d6000803e3d6000fd5b50949350505050565b611e3f806200058583390190565b61298880620023c483390190565b80356200015f816200056b565b919050565b600082601f83011262000175578081fd5b813567ffffffffffffffff8082111562000193576200019362000555565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000555565b81604052838152866020858801011115620001d7578485fd5b8360208701602083013792830160200193909352509392505050565b6000610120828403121562000206578081fd5b6200021062000507565b82358152602083013560208201526200022c6040840162000152565b60408201526200023f6060840162000152565b6060820152620002526080840162000152565b60808201526200026560a0840162000152565b60a08201526200027860c0840162000152565b60c082015260e08381013590820152610100928301359281019290925250919050565b6000806000838503610100811215620002b2578283fd5b60c0811215620002c0578283fd5b50620002cb62000534565b8435620002d8816200056b565b81526020850135620002ea816200056b565b60208201526040850135620002ff816200056b565b6040820152606085013562000314816200056b565b60608201526080858101359082015260a08086013590820152925060c084013567ffffffffffffffff808211156200034a578384fd5b620003588783880162000164565b935060e08601359150808211156200036e578283fd5b506200037d8682870162000164565b9150509250925092565b60008151808452815b81811015620003ae5760208185018101518683018201520162000390565b81811115620003c05782602083870101525b50601f01601f19169290920160200192915050565b81518152602080830151908201526040808301516001600160a01b03169082015260608083015161012083019162000417908401826001600160a01b03169052565b5060808301516200043360808401826001600160a01b03169052565b5060a08301516200044f60a08401826001600160a01b03169052565b5060c08301516200046b60c08401826001600160a01b03169052565b5060e083015160e083015261010080840151818401525092915050565b600061010060018060a01b03808751168452806020880151166020850152806040880151166040850152806060880151166060850152506080860151608084015260a086015160a08401528060c0840152620004e78184018662000387565b905082810360e0840152620004fd818562000387565b9695505050505050565b604051610120810167ffffffffffffffff811182821017156200052e576200052e62000555565b60405290565b60405160c0810167ffffffffffffffff811182821017156200052e576200052e5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200058157600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001e3f38038062001e3f833981016040819052620000349162000110565b805160015560208101516002556040810151600380546001600160a01b03199081166001600160a01b03938416179091556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054909216921691909117905560e08101516008556101009081015160095560008054610100600160a81b03191633909202919091178155600d819055600a819055600b55620001f0565b80516001600160a01b03811681146200010b57600080fd5b919050565b6000610120828403121562000123578081fd5b6200012d620001b8565b82518152602083015160208201526200014960408401620000f3565b60408201526200015c60608401620000f3565b60608201526200016f60808401620000f3565b60808201526200018260a08401620000f3565b60a08201526200019560c08401620000f3565b60c082015260e08381015190820152610100928301519281019290925250919050565b60405161012081016001600160401b0381118282101715620001ea57634e487b7160e01b600052604160045260246000fd5b60405290565b611c3f80620002006000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806399005781116100f9578063cff0ab9611610097578063e5647b0111610071578063e5647b0114610497578063ed89bfcd146104a0578063f4506163146104a9578063fb748f47146104bc57600080fd5b8063cff0ab96146103eb578063d5eee8b61461047b578063d8826fec1461048457600080fd5b8063aa786607116100d3578063aa786607146103bd578063aaa94ee9146103c6578063be8b8ec3146103cf578063cdf775f8146103d857600080fd5b80639900578114610399578063a631fa7e146103a1578063a6f9dae1146103aa57600080fd5b806378e97925116101665780638f283970116101405780638f283970146102a85780639168ae72146102bb57806392a88fa21461031057806393e8bfeb1461038657600080fd5b806378e979251461024f5780637cd6d757146102585780638da5cb5b1461027857600080fd5b806350aee08d116101a257806350aee08d1461020d5780635446d77a1461022057806364d4db101461023357806375791c5d1461023c57600080fd5b806306040618146101c957806309ac11a6146101e557806347ff3147146101f8575b600080fd5b6101d2600c5481565b6040519081526020015b60405180910390f35b6101d26101f336600461184e565b6104c4565b61020b61020636600461184e565b610724565b005b61020b61021b36600461184e565b6108cb565b61020b61022e366004611868565b610a23565b6101d2600e5481565b61020b61024a3660046118b1565b610c8e565b6101d2600d5481565b6101d26102663660046118b1565b60146020526000908152604090205481565b6000546102909061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b61020b6102b636600461184e565b610d02565b6102f06102c936600461184e565b60166020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016101dc565b61035761031e36600461184e565b60156020526000908152604090208054600182015460028301546003840154600485015460059095015460ff9094169492939192909186565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c0016101dc565b61020b61039436600461184e565b610d91565b6008546101d2565b6101d260135481565b61020b6103b836600461184e565b61101d565b6101d2600a5481565b6101d2600f5481565b6101d260105481565b6101d26103e636600461184e565b6110b2565b6001546002546003546004546005546006546007546008546009546104279897966001600160a01b039081169681169581169481169316919089565b60408051998a5260208a01989098526001600160a01b039687169789019790975293851660608801529184166080870152831660a086015290911660c084015260e0830152610100820152610120016101dc565b6101d260115481565b61020b61049236600461184e565b6111b6565b6101d260125481565b6101d2600b5481565b61020b6104b73660046118b1565b611243565b6009546101d2565b6001600160a01b0381166000908152601560205260408120600101548015806104ed5750601154155b156104fb5750600092915050565b600154600d546000919061050f9042611b86565b61051991906119c5565b6001600160a01b0385166000908152601560205260408120600201549192508183111561066a5750600081815260146020526040902054806105e957600060125413610585575050506001600160a01b0390921660009081526015602052604090206005015492915050565b600154600d546011546000929161059b91611b86565b6105a59190611bc9565b6001546105b29190611b86565b90506105d86012546105d26001600701546105cc856112dc565b906112f6565b9061130b565b6013546105e59190611956565b9150505b6001600160a01b038616600090815260156020526040812060030154610635906106139084611b47565b6001600160a01b038916600090815260156020526040902060040154906112f6565b6001600160a01b03881660009081526015602052604090206005015490915061065f908290611956565b979650505050505050565b60006012541361069a575050506001600160a01b0390921660009081526015602052604090206005015492915050565b6000601154426106aa9190611b86565b90506106c46012546105d26001600701546105cc856112dc565b6013546106d19190611956565b6001600160a01b0388166000908152601560205260409020600301549092506106fe906106139084611b47565b6001600160a01b03881660009081526015602052604090206005015461065f9190611956565b61072d816104c4565b6001600160a01b0382166000908152601560205260408120600501829055126107535750565b600061075f6000611329565b90508015610784576001600160a01b0382166000908152601560205260408120600401555b601354601254600012156107ca576000601154426107a29190611b86565b90506107bc6012546105d26001600701546105cc856112dc565b6107c69083611956565b9150505b6004546006546001600160a01b038581166000908152601560205260409020600501546107ff9382169290911690869061146f565b6001600160a01b0383166000818152601560209081526040918290206005015491519182527fdddb394edd2ea6e057a431accbd95b8e49e302e87340157f9e4200b98c5d638d910160405180910390a26001600160a01b038316600090815260156020526040812060050154600a80549192909161087e908490611956565b90915550506001600160a01b039092166000908152601560205260408120600381019390935542600180850191909155835460ff1916178355600c54600284015560059092019190915550565b6108d4816110b2565b6001600160a01b0382166000908152601660205260408120600301829055126108fa5750565b601054600f5460001215610940576000600e54426109189190611b86565b9050610932600f546105d26001600801546105cc856112dc565b61093c9083611956565b9150505b6004546006546001600160a01b038481166000908152601660205260409020600301546109759382169290911690859061146f565b6001600160a01b0382166000818152601660209081526040918290206003015491519182527fb3668e1a9f9a14105b3274ee9ec84ea1a75a2195afd659394bacea671e93f057910160405180910390a26001600160a01b038216600090815260166020526040812060030154600b8054919290916109f4908490611956565b90915550506001600160a01b039091166000908152601660205260408120600381019190915542815560010155565b60005460ff1615610a7b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60008054600160ff19909116179081905561010090046001600160a01b0316331480610ab157506005546001600160a01b031633145b610af65760405162461bcd60e51b81526020600482015260166024820152754e4f545f414e5f4f574e45525f4f525f53545249505360501b6044820152606401610a72565b600d54610b075742600d556000600c555b6000610b1c610b15846114cf565b83906112f6565b6002546001600160a01b03851660009081526015602052604090206001015491925090610b499042611b86565b108015610b6f57506001600160a01b03831660009081526015602052604090205460ff16155b15610b8857610b7d81611329565b505042601155610c80565b610b91836104c4565b6001600160a01b038416600090815260156020526040812060050191909155610bb982611329565b6001600160a01b038516600090815260156020526040902060020154600c5491925014610be4575060015b8015610c0d576001600160a01b0384166000908152601560205260409020600401829055610c3e565b6001600160a01b03841660009081526015602052604081206004018054849290610c38908490611956565b90915550505b50506001600160a01b03821660009081526015602052604090204260018201819055815460ff19168255600c5460028301556013546003909201919091556011555b50506000805460ff19169055565b6007546001600160a01b03163314610cb85760405162461bcd60e51b8152600401610a7290611930565b6000600e5442610cc89190611b86565b9050610ce2600f546105d26001600801546105cc856112dc565b60106000828254610cf39190611956565b90915550505060095542600e55565b6007546001600160a01b03163314610d2c5760405162461bcd60e51b8152600401610a7290611930565b6001600160a01b038116610d6f5760405162461bcd60e51b815260206004820152600a6024820152692d22a927afa0a226a4a760b11b6044820152606401610a72565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60005460ff1615610de45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a72565b60008054600160ff19909116179081905561010090046001600160a01b0316331480610e1a57506005546001600160a01b031633145b610e5f5760405162461bcd60e51b81526020600482015260166024820152754e4f545f414e5f4f574e45525f4f525f53545249505360501b6044820152606401610a72565b610e68816110b2565b6001600160a01b038216600090815260166020526040812060030191909155600f541315610ed2576000600e5442610ea09190611b86565b9050610eba600f546105d26001600801546105cc856112dc565b60106000828254610ecb9190611956565b9091555050505b42600e55600354604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5391906118c9565b600f556010546001600160a01b03828116600081815260166020526040908190206001019390935560035492516370a0823160e01b815260048101919091529116906370a082319060240160206040518083038186803b158015610fb657600080fd5b505afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee91906118c9565b6001600160a01b039091166000908152601660205260408120600281019290925542909155805460ff19169055565b6007546001600160a01b031633146110475760405162461bcd60e51b8152600401610a7290611930565b6001600160a01b03811661108a5760405162461bcd60e51b815260206004820152600a6024820152692d22a927afa7aba722a960b11b6044820152606401610a72565b600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b0381166000908152601660205260408120546110d757506000919050565b6000600f541361110057506001600160a01b031660009081526016602052604090206003015490565b6000600e54426111109190611b86565b9050600061112c600f546105d26001600801546105cc866112dc565b6010546111399190611956565b6001600160a01b038516600090815260166020526040902060010154909150611188906111669083611b47565b6001600160a01b038616600090815260166020526040902060020154906112f6565b6001600160a01b0385166000908152601660205260409020600301546111ae9190611956565b949350505050565b6007546001600160a01b031633146111e05760405162461bcd60e51b8152600401610a7290611930565b6001600160a01b0381166112215760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b6044820152606401610a72565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6007546001600160a01b0316331461126d5760405162461bcd60e51b8152600401610a7290611930565b60006112796000611329565b90508015801561128b57506000601254135b156112d2576000601154426112a09190611b86565b90506112ba6012546105d26001600701546105cc856112dc565b601360008282546112cb9190611956565b9091555050505b5060085542601155565b60006112f0670de0b6b3a764000083611ac4565b92915050565b600061130483836012611601565b9392505050565b6000816001141561131d5750816112f0565b61130483836012611620565b600154600d54600091829161133e9042611b86565b61134891906119c5565b9050600c548111156113d957601154156113cf57600154600d546011546000929161137291611b86565b61137c9190611bc9565b6001546113899190611b86565b90506113a36012546105d26001600701546105cc856112dc565b6013546113b09190611956565b600c546000908152601460205260408120919091556012819055601355505b600c819055600191505b6000831315611469576000601154426113f29190611b86565b905060115460001415801561140957506000601254135b156114505760006011544261141e9190611b86565b90506114386012546105d26001600701546105cc856112dc565b601360008282546114499190611956565b9091555050505b83601260008282546114629190611956565b9091555050505b50919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526114c9908590611636565b50505050565b600080600160020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561152357600080fd5b505afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b91906118c9565b90506000811361156d5761130461170d565b6003546040516370a0823160e01b81526001600160a01b0385811660048301526115ef9284929116906370a082319060240160206040518083038186803b1580156115b757600080fd5b505afa1580156115cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906118c9565b6115f761170d565b6113049190611956565b600061160c82611727565b6116168486611ac4565b6111ae9190611997565b60008261162c83611727565b6116169086611ac4565b600061168b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117379092919063ffffffff16565b80519091501561170857808060200190518101906116a99190611891565b6117085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a72565b505050565b6000611722670de0b6b3a76400006001611ac4565b905090565b60006112f060ff8316600a611a1c565b60606111ae848460008585843b6117905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a72565b600080866001600160a01b031685876040516117ac91906118e1565b60006040518083038185875af1925050503d80600081146117e9576040519150601f19603f3d011682016040523d82523d6000602084013e6117ee565b606091505b509150915061065f82828660608315611808575081611304565b8251156118185782518084602001fd5b8160405162461bcd60e51b8152600401610a7291906118fd565b80356001600160a01b038116811461184957600080fd5b919050565b60006020828403121561185f578081fd5b61130482611832565b6000806040838503121561187a578081fd5b61188383611832565b946020939093013593505050565b6000602082840312156118a2578081fd5b81518015158114611304578182fd5b6000602082840312156118c2578081fd5b5035919050565b6000602082840312156118da578081fd5b5051919050565b600082516118f3818460208701611b9d565b9190910192915050565b602081526000825180602084015261191c816040850160208701611b9d565b601f01601f19169190910160400192915050565b6020808252600c908201526b2727aa2fa0a72fa0a226a4a760a11b604082015260600190565b600080821280156001600160ff1b038490038513161561197857611978611bdd565b600160ff1b839003841281161561199157611991611bdd565b50500190565b6000826119a6576119a6611bf3565b600160ff1b8214600019841416156119c0576119c0611bdd565b500590565b6000826119d4576119d4611bf3565b500490565b600181815b80851115611a145781600019048211156119fa576119fa611bdd565b80851615611a0757918102915b93841c93908002906119de565b509250929050565b60006113048383600082611a32575060016112f0565b81611a3f575060006112f0565b8160018114611a555760028114611a5f57611a7b565b60019150506112f0565b60ff841115611a7057611a70611bdd565b50506001821b6112f0565b5060208310610133831016604e8410600b8410161715611a9e575081810a6112f0565b611aa883836119d9565b8060001904821115611abc57611abc611bdd565b029392505050565b60006001600160ff1b0381841382841380821686840486111615611aea57611aea611bdd565b600160ff1b84871282811687830589121615611b0857611b08611bdd565b858712925087820587128484161615611b2357611b23611bdd565b87850587128184161615611b3957611b39611bdd565b505050929093029392505050565b60008083128015600160ff1b850184121615611b6557611b65611bdd565b6001600160ff1b0384018313811615611b8057611b80611bdd565b50500390565b600082821015611b9857611b98611bdd565b500390565b60005b83811015611bb8578181015183820152602001611ba0565b838111156114c95750506000910152565b600082611bd857611bd8611bf3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212202d0f4aea296b327d89fb11f489c42ef89b4b994078a30f60bfbe7f4e03873a5164736f6c6343000804003360806040523480156200001157600080fd5b506040516200298838038062002988833981016040819052620000349162000290565b8151829082906200004d9060039060208501906200013c565b508051620000639060049060208401906200013c565b50506001600555506200007633620000ea565b50508051600d80546001600160a01b039283166001600160a01b0319918216179091556020830151600e80549184169183169190911790556040830151600f8054918416918316919091179055606083015160108054919093169116179055608081015160115560a0015160125562000425565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014a90620003d2565b90600052602060002090601f0160209004810192826200016e5760008555620001b9565b82601f106200018957805160ff1916838001178555620001b9565b82800160010185558215620001b9579182015b82811115620001b95782518255916020019190600101906200019c565b50620001c7929150620001cb565b5090565b5b80821115620001c75760008155600101620001cc565b80516001600160a01b0381168114620001fa57600080fd5b919050565b600082601f83011262000210578081fd5b81516001600160401b038111156200022c576200022c6200040f565b602062000242601f8301601f191682016200039f565b828152858284870101111562000256578384fd5b835b838110156200027557858101830151828201840152820162000258565b838111156200028657848385840101525b5095945050505050565b6000806000838503610100811215620002a7578384fd5b60c0811215620002b5578384fd5b50620002c062000374565b620002cb85620001e2565b8152620002db60208601620001e2565b6020820152620002ee60408601620001e2565b60408201526200030160608601620001e2565b60608201526080858101519082015260a0808601519082015260c08501519093506001600160401b038082111562000337578384fd5b6200034587838801620001ff565b935060e08601519150808211156200035b578283fd5b506200036a86828701620001ff565b9150509250925092565b60405160c081016001600160401b03811182821017156200039957620003996200040f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620003ca57620003ca6200040f565b604052919050565b600181811c90821680620003e757607f821691505b602082108114156200040957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61255380620004356000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80638da5cb5b1161013b578063c89a8c54116100b8578063ef69819e1161007c578063ef69819e14610688578063f0588acc14610690578063f23ae99614610698578063f2fde38b146106a0578063fa9405bd146106b357600080fd5b8063c89a8c5414610617578063ce44ec7014610620578063dd62ed3e14610629578063e71acffe14610662578063ed45f39d1461067557600080fd5b8063a097fffd116100ff578063a097fffd146105ba578063a09ec42d146105cd578063a457c2d7146105de578063a9059cbb146105f1578063badf44d91461060457600080fd5b80638da5cb5b146104ff5780638e8ed341146105105780639168ae721461051957806395d89b411461059f5780639dc29fac146105a757600080fd5b806339509351116101c95780635e615a6b1161018d5780635e615a6b146103d75780636a40acf2146104b45780636e94857d146104c757806370a08231146104e4578063715018a6146104f757600080fd5b8063395093511461038157806340c10f191461039457806342ac3379146103a9578063534ca4b7146103b15780635e598d12146103c457600080fd5b806318160ddd1161021057806318160ddd1461032e578063219a1d771461033657806323b872dd146103565780632583a78714610369578063313ce5671461037257600080fd5b8063018812e01461024d578063018e15c8146102d657806306fdde03146102ed578063095ea7b3146103025780630d52435614610325575b600080fd5b61026061025b3660046120d7565b6106c6565b6040516102cd9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b60405180910390f35b6102df60095481565b6040519081526020016102cd565b6102f56109f4565b6040516102cd91906121cf565b6103156103103660046120d7565b610a86565b60405190151581526020016102cd565b6102df60075481565b6002546102df565b61033e610a9d565b6040516001600160a01b0390911681526020016102cd565b61031561036436600461209c565b610adf565b6102df600b5481565b604051601281526020016102cd565b61031561038f3660046120d7565b610aff565b6103a76103a23660046120d7565b610b3b565b005b6102df610c15565b6103a76103bf366004612100565b610c92565b6103a76103d23660046120d7565b610cfe565b61045b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c081018252600d546001600160a01b039081168252600e5481166020830152600f548116928201929092526010549091166060820152601154608082015260125460a082015290565b6040516102cd919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151909116908201526080808301519082015260a0918201519181019190915260c00190565b6103a76104c2366004612050565b610e11565b6104cf610f10565b604080519283526020830191909152016102cd565b6102df6104f2366004612050565b611012565b6103a761102d565b6006546001600160a01b031661033e565b6102df600a5481565b610568610527366004612050565b601360205260009081526040902080546001820154600283015460038401546004850154600586015460069096015460ff9095169593949293919290919087565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016102cd565b6102f5611063565b6103a76105b53660046120d7565b611072565b6103a76105c8366004612130565b6111c5565b6010546001600160a01b031661033e565b6103156105ec3660046120d7565b61125d565b6103156105ff3660046120d7565b6112f6565b6103a7610612366004612100565b611314565b6102df60085481565b6102df600c5481565b6102df61063736600461206a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103a7610670366004612100565b611358565b6104cf6106833660046120d7565b611394565b6103a7611454565b6104cf6114a5565b6104cf611562565b6103a76106ae366004612050565b6115cf565b6104cf6106c1366004612050565b61166a565b6107156040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61071e83611012565b60a0820152811580159061073657508060a001518211155b6107765760405162461bcd60e51b815260206004820152600c60248201526b15d493d391d7d05353d5539560a21b60448201526064015b60405180910390fd5b6107be60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8281526107c9611562565b608083015260608201526107db610f10565b60a080840191909152604083019190915282015181516107fa916116f8565b60c082019081526001600160a01b038516600090815260136020526040902060050154905161082891611716565b6001600160a01b038516600090815260136020526040902060010154608083015161085e9161085691612460565b835190611716565b6108689190612257565b6040808401919091526001600160a01b03851660009081526013602052206006015460c082015161089891611716565b6001600160a01b03851660009081526013602052604090206002015460a08301516108c69161085691612460565b6108d09190612257565b60208301526108de8461166a565b608084015260e0820181905281516108f591611716565b606083018190526040830151825161090d9190612257565b6109179190612460565b8252600e5460408051634c6afee560e11b815290516001600160a01b03909216916398d5fdca91600480820192602092909190829003018186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190612118565b60c08301526020820151600013156109ed576020820151610100830181905260c08301516109c491906116f8565b6109d0906000196123dd565b60e0830181905282516109e39190612460565b8252600060208301525b5092915050565b606060038054610a03906124b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2f906124b6565b8015610a7c5780601f10610a5157610100808354040283529160200191610a7c565b820191906000526020600020905b815481529060010190602001808311610a5f57829003601f168201915b5050505050905090565b6000610a93338484611724565b5060015b92915050565b6006546000906001600160a01b03163314610aca5760405162461bcd60e51b815260040161076d90612222565b506006546001600160a01b031690565b905090565b6000610aec848484611848565b610af7848484611ad6565b949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610a93918590610b36908690612298565b611724565b6006546001600160a01b03163314610b655760405162461bcd60e51b815260040161076d90612222565b6040805160e08101825260018082526009546020808401918252600a54848601908152436060860190815242608087019081526001600160a01b038a166000818152601380875299812060058101805460a08c0190815260068301805460c08e01908152959094529b9097529851895460ff191690151517895595519688019690965591516002870155516003860155516004909401939093559251909155519055610c118282611b80565b5050565b600e5460408051634c6afee560e11b815290516000926001600160a01b0316916398d5fdca916004808301926020929190829003018186803b158015610c5a57600080fd5b505afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190612118565b6006546001600160a01b03163314610cbc5760405162461bcd60e51b815260040161076d90612222565b6000811215610cf95760405162461bcd60e51b815260206004820152600960248201526857524f4e475f46454560b81b604482015260640161076d565b601255565b6001600160a01b03821660009081526013602052604090205460ff16610d575760405162461bcd60e51b815260206004820152600e60248201526d2727afa9aaa1a42fa9aa20a5a2a960911b604482015260640161076d565b6001600160a01b0382166000908152601360205260409020600301544311610db65760405162461bcd60e51b8152602060048201526012602482015271554e5354414b455f53414d455f424c4f434b60701b604482015260640161076d565b600081118015610dce575080610dcb83611012565b10155b610c115760405162461bcd60e51b815260206004820152601460248201527315d493d391d7d55394d51052d157d05353d5539560621b604482015260640161076d565b6006546001600160a01b03163314610e3b5760405162461bcd60e51b815260040161076d90612222565b6000610e4682611012565b6001600160a01b038316600090815260136020526040902060010154600954919250610e7d918391610e7791612460565b90611716565b6001600160a01b03831660009081526013602052604081206005018054909190610ea8908490612257565b90915550506001600160a01b038216600090815260136020526040902060020154600a54610edc918391610e779190612460565b6001600160a01b03831660009081526013602052604081206006018054909190610f07908490612257565b90915550505050565b6000806000610f276006546001600160a01b031690565b90506000610f3460025490565b600d5460405163192be89360e21b81526001600160a01b038581166004830152929350600092909116906364afa24c9060240160206040518083038186803b158015610f7f57600080fd5b505afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb79190612118565b9050600b5481610fc79190612257565b945081610fe35784600a54610fdc9190612257565b935061100b565b610ffb8260085487610ff59190612460565b906116f8565b600a546110089190612257565b93505b5050509091565b6001600160a01b031660009081526020819052604090205490565b6006546001600160a01b031633146110575760405162461bcd60e51b815260040161076d90612222565b6110616000611c5f565b565b606060048054610a03906124b6565b6006546001600160a01b0316331461109c5760405162461bcd60e51b815260040161076d90612222565b60006110b16110aa84611012565b83906116f8565b6001600160a01b0384166000908152601360205260409020600501549091506110da9082611716565b6001600160a01b03841660009081526013602052604081206005018054909190611105908490612460565b90915550506001600160a01b0383166000908152601360205260409020600601546111309082611716565b6001600160a01b0384166000908152601360205260408120600601805490919061115b908490612460565b9091555061116b90508383611cb1565b61117483611012565b6111c0576001600160a01b0383166000908152601360205260408120805460ff191681556001810182905560028101829055600381018290556004810182905560058101829055600601555b505050565b6006546001600160a01b031633146111ef5760405162461bcd60e51b815260040161076d90612222565b8051600d80546001600160a01b039283166001600160a01b0319918216179091556020830151600e80549184169183169190911790556040830151600f8054918416918316919091179055606083015160108054919093169116179055608081015160115560a00151601255565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156112df5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161076d565b6112ec3385858403611724565b5060019392505050565b6000611303338484611848565b61130d8383611dff565b9392505050565b6006546001600160a01b0316331461133e5760405162461bcd60e51b815260040161076d90612222565b80600c60008282546113509190612257565b909155505050565b6006546001600160a01b031633146113825760405162461bcd60e51b815260040161076d90612222565b80600b60008282546113509190612257565b600080336001600160a01b03166113b36006546001600160a01b031690565b6001600160a01b0316146113d95760405162461bcd60e51b815260040161076d90612222565b60006113e585856106c6565b9050600081606001511315611401576114018160600151611314565b60008160e00151131561141b5761141b8160e00151611314565b6000816101000151121561143757611437816101000151611358565b6114418585611072565b8051602090910151909590945092505050565b6006546001600160a01b0316331461147e5760405162461bcd60e51b815260040161076d90612222565b600080611489611562565b6009556007819055915061149b610f10565b600a556008555050565b600d54600090819081906001600160a01b03166364afa24c6114cf6006546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561150e57600080fd5b505afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115469190612118565b9050600b54816115569190612257565b9250600c549150509091565b60008060006115796006546001600160a01b031690565b9050600061158660025490565b600c5494509050806115a757836009546115a09190612257565b92506115c9565b6115b98160075486610ff59190612460565b6009546115c69190612257565b92505b50509091565b6006546001600160a01b031633146115f95760405162461bcd60e51b815260040161076d90612222565b6001600160a01b03811661165e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161076d565b61166781611c5f565b50565b6001600160a01b03811660009081526013602052604081206004015481908190611694904261249f565b60115490915081126116ac5750600093849350915050565b6116d26116b882611e0c565b610e776116c9600d60040154611e0c565b601254906116f8565b6012546116df9190612460565b6011549093506116f0908290612460565b915050915091565b6000816001141561170a575081610a97565b61130d83836012611e20565b600061130d83836012611e40565b6001600160a01b0383166117865760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161076d565b6001600160a01b0382166117e75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161076d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526013602052604090205460ff166118a35760405162461bcd60e51b815260206004820152601060248201526f14d51052d15497d393d517d193d5539160821b604482015260640161076d565b6001600160a01b03821660009081526013602052604090205460ff16156119015760405162461bcd60e51b81526020600482015260126024820152714d455247455f4e4f545f504f535349424c4560701b604482015260640161076d565b600061190c84611012565b61191690836122de565b6001600160a01b03858116600081815260136020526040808220938816825281208354815460ff191660ff909116151517815560018085015490820155600280850154908201556003808501549082015560048085015490820155600580850180549183019190915560069485015494909101939093559081529054919250906119a090836123dd565b6001600160a01b038616600090815260136020526040812060060154919250906119ca90846123dd565b90508115611a21576001600160a01b038616600090815260136020526040812060050180548492906119fd908490612460565b90915550506001600160a01b03851660009081526013602052604090206005018290555b8015611a76576001600160a01b03861660009081526013602052604081206006018054839290611a52908490612460565b90915550506001600160a01b03851660009081526013602052604090206006018190555b611a7f86611012565b841415611ace576001600160a01b0386166000908152601360205260408120805460ff191681556001810182905560028101829055600381018290556004810182905560058101829055600601555b505050505050565b6000611ae3848484611e55565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015611b685760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161076d565b611b758533858403611724565b506001949350505050565b6001600160a01b038216611bd65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161076d565b8060026000828254611be89190612298565b90915550506001600160a01b03821660009081526020819052604081208054839290611c15908490612298565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216611d115760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161076d565b6001600160a01b03821660009081526020819052604090205481811015611d855760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161076d565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611db490849061249f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000610a93338484611e55565b6000610a97670de0b6b3a7640000836123dd565b600082611e2c83612024565b611e3690866123dd565b610af791906122b0565b6000611e4b82612024565b611e3684866123dd565b6001600160a01b038316611eb95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161076d565b6001600160a01b038216611f1b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161076d565b6001600160a01b03831660009081526020819052604090205481811015611f935760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161076d565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611fca908490612298565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161201691815260200190565b60405180910390a350505050565b6000610a9760ff8316600a612335565b80356001600160a01b038116811461204b57600080fd5b919050565b600060208284031215612061578081fd5b61130d82612034565b6000806040838503121561207c578081fd5b61208583612034565b915061209360208401612034565b90509250929050565b6000806000606084860312156120b0578081fd5b6120b984612034565b92506120c760208501612034565b9150604084013590509250925092565b600080604083850312156120e9578182fd5b6120f283612034565b946020939093013593505050565b600060208284031215612111578081fd5b5035919050565b600060208284031215612129578081fd5b5051919050565b600060c08284031215612141578081fd5b60405160c0810181811067ffffffffffffffff8211171561217057634e487b7160e01b83526041600452602483fd5b60405261217c83612034565b815261218a60208401612034565b602082015261219b60408401612034565b60408201526121ac60608401612034565b60608201526080830135608082015260a083013560a08201528091505092915050565b6000602080835283518082850152825b818110156121fb578581018301518582016040015282016121df565b8181111561220c5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600080821280156001600160ff1b0384900385131615612279576122796124f1565b600160ff1b8390038412811615612292576122926124f1565b50500190565b600082198211156122ab576122ab6124f1565b500190565b6000826122bf576122bf612507565b600160ff1b8214600019841416156122d9576122d96124f1565b500590565b6000826122ed576122ed612507565b500490565b600181815b8085111561232d578160001904821115612313576123136124f1565b8085161561232057918102915b93841c93908002906122f7565b509250929050565b600061130d838360008261234b57506001610a97565b8161235857506000610a97565b816001811461236e576002811461237857612394565b6001915050610a97565b60ff841115612389576123896124f1565b50506001821b610a97565b5060208310610133831016604e8410600b84101617156123b7575081810a610a97565b6123c183836122f2565b80600019048211156123d5576123d56124f1565b029392505050565b60006001600160ff1b0381841382841380821686840486111615612403576124036124f1565b600160ff1b84871282811687830589121615612421576124216124f1565b85871292508782058712848416161561243c5761243c6124f1565b87850587128184161615612452576124526124f1565b505050929093029392505050565b60008083128015600160ff1b85018412161561247e5761247e6124f1565b6001600160ff1b0384018313811615612499576124996124f1565b50500390565b6000828210156124b1576124b16124f1565b500390565b600181811c908216806124ca57607f821691505b602082108114156124eb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea264697066735822122034751ba4ed2a1b27eae072609296d30208c597a0959fd8e197db09a5a9ebfab264736f6c63430008040033a2646970667358221220b8421d7b6bd5f9edb6615b1f67a24ee4e88387dc6ce70552036efa8e26a430a664736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}