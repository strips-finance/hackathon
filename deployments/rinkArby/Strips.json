{
  "address": "0x5f65a46AE079e8903a527A4C8cac033f7928bC1B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "marketPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "oraclePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradersTotalPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "uniLpPrice",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "ammIsLong",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "ammTradingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammFundingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammTotalPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammInitialPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammEntryPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammTradingLiquidity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammStakingLiquidity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "ammTotalLiquidity",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "tradingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "fundingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "totalPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "initialPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "entryPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpTradingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpStakingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpTradingCummulativePnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpStakingCummulativePnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpTradingPnlGrowth",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpStakingPnlGrowth",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "slpTotalSupply",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "stakerInitialStakingPnl",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "stakerInitialTradingPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "stakerInitialBlockNum",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "stakerUnrealizedStakingProfit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "stakerUnrealizedTradingProfit",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradingRewardsTotal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "stakingRewardsTotal",
              "type": "int256"
            }
          ],
          "indexed": false,
          "internalType": "struct IStripsEvents.CheckParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogCheckData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "insurance",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "lpLiquidity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "usdcLiquidity",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "sipTotalSupply",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IStripsEvents.CheckInsuranceParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogCheckInsuranceData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "LogNewMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isLiquidated",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "notional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "collateral",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "initialPrice",
              "type": "int256"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrips.PositionParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogPositionUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "next",
          "type": "uint256"
        }
      ],
      "name": "PingDone",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IStrips.AdminActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStrips.AdminActionArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "adminDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isAdd",
          "type": "bool"
        }
      ],
      "name": "changeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDao",
          "type": "address"
        }
      ],
      "name": "changeDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPinger",
          "type": "address"
        }
      ],
      "name": "changePinger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "check_insurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "check_trader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_closeRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_slippage",
          "type": "int256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g_state",
      "outputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSuspended",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPositionIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "fundFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "daoFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "liquidatorFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marketFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "insuranceProfitOnPositionClosed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "liquidationMarginRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minimumPricePossible",
              "type": "int256"
            }
          ],
          "internalType": "struct StorageStripsLib.RiskParams",
          "name": "riskParams",
          "type": "tuple"
        },
        {
          "internalType": "contract IInsuranceFund",
          "name": "insuranceFund",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tradingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastAlive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keepAliveInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpOracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "getPositionsForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "contract IMarket",
              "name": "_market",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_posIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageStripsLib.PositionMeta[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isInsurance",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "slpToken",
                  "type": "address"
                },
                {
                  "internalType": "int256",
                  "name": "marketPrice",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "oraclePrice",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "maxNotional",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "tvl",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "apy",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "minimumMargin",
                  "type": "int256"
                }
              ],
              "internalType": "struct IStrips.AssetData[]",
              "name": "assetData",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IStrips.StakingData[]",
              "name": "stakingData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrips.StakingInfo",
          "name": "stakingInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTradingInfo",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isInsurance",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "slpToken",
                  "type": "address"
                },
                {
                  "internalType": "int256",
                  "name": "marketPrice",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "oraclePrice",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "maxNotional",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "tvl",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "apy",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "minimumMargin",
                  "type": "int256"
                }
              ],
              "internalType": "struct IStrips.AssetData[]",
              "name": "assetData",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "contract IMarket",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "int256",
                  "name": "pnl",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "pnlWhatIf",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "marginRatio",
                  "type": "int256"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "isLong",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isActive",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isLiquidated",
                      "type": "bool"
                    },
                    {
                      "internalType": "int256",
                      "name": "notional",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "collateral",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "initialPrice",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct IStrips.PositionParams",
                  "name": "positionParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IStrips.PositionData[]",
              "name": "positionData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrips.TradingInfo",
          "name": "tradingInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "fundFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "daoFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "liquidatorFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marketFeeRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "insuranceProfitOnPositionClosed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "liquidationMarginRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minimumPricePossible",
              "type": "int256"
            }
          ],
          "internalType": "struct StorageStripsLib.RiskParams",
          "name": "_riskParams",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tradingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_keepAliveInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "leverage",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slippage",
          "type": "int256"
        }
      ],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "payKeeperReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pinger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IStrips.StateActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStrips.StateActionArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "stateDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_suspend",
          "type": "bool"
        }
      ],
      "name": "suspendChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IStrips.ViewActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStrips.ViewActionArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "viewDispatcher",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a856ddc500ff41b832952e30542c3c21c321263a06bd892118eaed2e8411b71",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0x5f65a46AE079e8903a527A4C8cac033f7928bC1B",
    "transactionIndex": 0,
    "gasUsed": "112398014",
    "logsBloom": "0x
    "blockHash": "0x0790916cf85cf674bd15462cfc5f7788ef306c72ff52c211584e8c26eee1f4b5",
    "transactionHash": "0x1a856ddc500ff41b832952e30542c3c21c321263a06bd892118eaed2e8411b71",
    "logs": [],
    "blockNumber": 7139135,
    "cumulativeGasUsed": "86780152",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"marketPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"oraclePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersTotalPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"uniLpPrice\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"ammIsLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"ammTradingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammFundingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammTotalPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammInitialPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammEntryPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammTradingLiquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammStakingLiquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"ammTotalLiquidity\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"tradingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fundingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"entryPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpTradingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpStakingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpTradingCummulativePnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpStakingCummulativePnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpTradingPnlGrowth\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpStakingPnlGrowth\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slpTotalSupply\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakerInitialStakingPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakerInitialTradingPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"stakerInitialBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"stakerUnrealizedStakingProfit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakerUnrealizedTradingProfit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradingRewardsTotal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stakingRewardsTotal\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct IStripsEvents.CheckParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogCheckData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"insurance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"lpLiquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"usdcLiquidity\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"sipTotalSupply\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IStripsEvents.CheckInsuranceParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogCheckInsuranceData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"LogNewMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct IStrips.PositionParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogPositionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"PingDone\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IStrips.AdminActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IStrips.AdminActionArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"adminDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"assetPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"changeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDao\",\"type\":\"address\"}],\"name\":\"changeDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPinger\",\"type\":\"address\"}],\"name\":\"changePinger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check_insurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"check_trader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_closeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_slippage\",\"type\":\"int256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g_state\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSuspended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPositionIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"fundFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"daoFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidatorFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marketFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"insuranceProfitOnPositionClosed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidationMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minimumPricePossible\",\"type\":\"int256\"}],\"internalType\":\"struct StorageStripsLib.RiskParams\",\"name\":\"riskParams\",\"type\":\"tuple\"},{\"internalType\":\"contract IInsuranceFund\",\"name\":\"insuranceFund\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastAlive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepAliveInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpOracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getPositionsForLiquidation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract IMarket\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_posIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageStripsLib.PositionMeta[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInsurance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slpToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"marketPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"oraclePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tvl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"apy\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minimumMargin\",\"type\":\"int256\"}],\"internalType\":\"struct IStrips.AssetData[]\",\"name\":\"assetData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrips.StakingData[]\",\"name\":\"stakingData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrips.StakingInfo\",\"name\":\"stakingInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTradingInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInsurance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slpToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"marketPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"oraclePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tvl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"apy\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minimumMargin\",\"type\":\"int256\"}],\"internalType\":\"struct IStrips.AssetData[]\",\"name\":\"assetData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"pnlWhatIf\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginRatio\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"notional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"}],\"internalType\":\"struct IStrips.PositionParams\",\"name\":\"positionParams\",\"type\":\"tuple\"}],\"internalType\":\"struct IStrips.PositionData[]\",\"name\":\"positionData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrips.TradingInfo\",\"name\":\"tradingInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"fundFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"daoFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidatorFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marketFeeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"insuranceProfitOnPositionClosed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidationMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minimumPricePossible\",\"type\":\"int256\"}],\"internalType\":\"struct StorageStripsLib.RiskParams\",\"name\":\"_riskParams\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keepAliveInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"leverage\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slippage\",\"type\":\"int256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"payKeeperReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IStrips.StateActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IStrips.StateActionArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"stateDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_suspend\",\"type\":\"bool\"}],\"name\":\"suspendChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IStrips.ViewActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IStrips.ViewActionArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"viewDispatcher\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPositionsForLiquidation(uint256,uint256)\":{\"details\":\"Return the list of liquidateable positions. NOT Efficien - rewrite for more efficient way Used by LiquidationKeeper to find liquidateable positions and efficiently iterate over them.\",\"params\":{\"_length\":\"the max length of returned list.\",\"_start\":\"position index to start from\"},\"returns\":{\"_0\":\"The list of Meta Data on position that is enough for liquidation*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ping()\":{\"notice\":\"Sets timestamp of last call for the availability of contract methods when interacting with keepers. The call can only be made by the user who has PINGER_ROLE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strips/Strips.sol\":\"Strips\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\",\"keccak256\":\"0xa52b795338492390cf88dcd1520683ed7b6635568b83401d5191d0cf77cdc746\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/external/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x7cc5d7b58e5f68a1cfad4cd838b8354cda08ce8a65c89f5f5175ba3b839b5bab\"},\"contracts/impl/SlpFactoryImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { Rewarder } from \\\"../reward/Rewarder.sol\\\";\\n\\nlibrary SlpFactoryImpl {\\n    using SignedBaseMath for int256;\\n    /*\\n        Factory method, to reduce contract size\\n        Creating code is huge\\n     */\\n    function _slpFactory(\\n        IStripsLpToken.TokenParams memory _params,\\n        string memory _name,\\n        string memory _symbol \\n    ) external returns (IStripsLpToken) \\n    {\\n        return new SLPToken(_params,\\n                            _name,\\n                            _symbol);\\n    }\\n\\n    function _rewarderFactory(\\n        IRewarder.InitParams memory _params\\n    ) external returns (IRewarder)\\n    {\\n        return new Rewarder(_params);\\n    }\\n}\\n\",\"keccak256\":\"0x84cc03cca7428033fd4da2c5419c216375522f258e1580abee5cde9d953792ac\"},\"contracts/impl/StakingImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { StakebleEvents, IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\n\\nimport { IUniswapV2Router02 } from \\\"../external/interfaces/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Factory } from \\\"../external/interfaces/IUniswapV2Factory.sol\\\";\\n\\n\\nlibrary StakingImpl {\\n    using SignedBaseMath for int256;\\n\\n    struct BurnParams{\\n        IUniswapV2Router02 router;\\n        IUniswapV2Factory factory;\\n        IUniswapV2Pair pair;\\n\\n        address strp;\\n        address usdc;\\n\\n        int256 strpReserve;\\n        int256 usdcReserve;\\n\\n        int256 liquidity;\\n\\n        int256 amountIn;  //strp to swap\\n        int256 amountOutMin; //minimum usdc to receive on swap\\n    }\\n\\n    modifier onlyStaker (address staker) {\\n        require(msg.sender == staker, \\\"STAKER_ONLY\\\");\\n         _;\\n    }\\n\\n    function _stake(\\n        IStripsLpToken slpToken,\\n        address staker,\\n        int256 amount\\n    ) external onlyStaker(staker) {\\n        require(amount > 0, \\\"WRONG_AMOUNT\\\");\\n        slpToken.accumulatePnl();\\n\\n        //The staker already has stake, need to store current Profit\\n        if (slpToken.balanceOf(staker) > 0){\\n            slpToken.saveProfit(staker);\\n        }\\n\\n        SafeERC20.safeTransferFrom(IERC20(slpToken.getParams().stakingToken), \\n                                    staker, \\n                                    address(this), \\n                                    uint(amount));\\n\\n        slpToken.mint(staker, uint(amount));\\n\\n        if (IStakeble(address(this)).isRewardable()){\\n            address rewarder = IRewardable(address(this)).getRewarder();\\n            IRewarder(rewarder).rewardStaker(staker);\\n        }\\n    }\\n\\n  \\n    function _unstake(\\n        IStripsLpToken slpToken,\\n        address staker,\\n        int256 amount\\n    ) external onlyStaker(staker) {\\n        slpToken.canUnstake(staker, uint(amount));\\n\\n        slpToken.accumulatePnl();\\n\\n        (int256 stakingProfit,\\n            int256 tradingProfit) = slpToken.claimProfit(staker, uint(amount));\\n\\n        require(stakingProfit > 0 && tradingProfit >= 0, \\\"NO_PROFIT\\\");\\n\\n        if (stakingProfit > 0){\\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().stakingToken), \\n                                    staker, \\n                                    uint(stakingProfit));\\n        }\\n\\n        if (tradingProfit > 0){\\n            int256 diff = int256(IERC20(slpToken.getParams().tradingToken).balanceOf(address(this))) - tradingProfit;\\n            if (diff < 0){\\n                /*Burn LP to get USDC*/\\n                diff *= -1;\\n\\n                _burnPair(slpToken, diff);\\n            }\\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().tradingToken), \\n                                    staker, \\n                                    uint(tradingProfit));\\n\\n        }\\n\\n        StakebleEvents.logUnstakeData(SLPToken(address(slpToken)).owner(), \\n                                                staker, \\n                                                amount,\\n                                                stakingProfit,\\n                                                tradingProfit);\\n\\n        if (IStakeble(address(this)).isRewardable()){\\n            address rewarder = IRewardable(address(this)).getRewarder();\\n            IRewarder(rewarder).rewardStaker(staker);\\n        }\\n    }\\n\\n    function _burnPair(\\n        IStripsLpToken slpToken,\\n        int256 requiredAmount\\n    ) public {\\n        //ONLY if we are in Owner context (address(this) == owner), otherwise revert\\n        slpToken.checkOwnership();\\n\\n        require(requiredAmount > 0, \\\"WRONG_AMOUNT\\\");\\n    /*\\n            Steps for burning LP:\\n            1. Find reserves\\n            2. Calc liquidity amount to burn\\n            3. Burn\\n            4. Swap STRP to USDC with slippage\\n            5. Reflect lp and usdc growth\\n         */\\n\\n        BurnParams memory params;\\n\\n        params.strp = IStakeble(address(this)).getStrp();\\n        params.usdc = slpToken.getParams().tradingToken;\\n        \\n        params.router = IUniswapV2Router02(IStakeble(address(this)).getSushiRouter());\\n        params.factory = IUniswapV2Factory(params.router.factory());\\n        params.pair = IUniswapV2Pair(params.factory.getPair(\\n            params.strp,\\n            params.usdc));\\n        require(address(params.pair) != address(0), \\\"ZERO_PAIR_CONTRACT\\\");\\n\\n        (uint112 reserve0,\\n            uint112 reserve1,) = params.pair.getReserves();\\n\\n        if (address(params.strp) == params.pair.token0()){\\n            params.strpReserve = int256(uint(reserve0));\\n            params.usdcReserve = int256(uint(reserve1));\\n        }else{\\n            params.strpReserve = int256(uint(reserve1));\\n            params.usdcReserve = int256(uint(reserve0));\\n        }\\n\\n        /*How much liquidity we need to burn? */\\n        int256 supply = int256(params.pair.totalSupply());\\n\\n        /*Just 10% maximum for don't care about the fee */\\n        params.liquidity = (requiredAmount.muld(supply).divd(params.usdcReserve)).muld(SignedBaseMath.onpointOne());\\n\\n\\n        /*\\n            Need to calc balance before burn - as we need to change PNL to differ\\n         */\\n        int256 lp_balance = int256(params.pair.balanceOf(address(this)));\\n        int256 usdc_balance = int256(IERC20(params.usdc).balanceOf(address(this)));\\n\\n        /*BURN:\\n            address tokenA,\\n            address tokenB,\\n            uint liquidity,\\n            uint amountAMin,\\n            uint amountBMin,\\n            address to,\\n            uint deadline\\n         */\\n        params.pair.approve(address(params.router), uint(params.liquidity));\\n        params.router.removeLiquidity(\\n            address(params.usdc), \\n            address(params.strp), \\n            uint(params.liquidity), \\n            uint(requiredAmount),\\n            0, \\n            address(this), \\n            block.timestamp + 200);\\n\\n        /*\\n            Change reserves\\n         */\\n        (reserve0,\\n            reserve1,) = params.pair.getReserves();\\n\\n        if (address(params.strp) == params.pair.token0()){\\n            params.strpReserve = int256(uint(reserve0));\\n            params.usdcReserve = int256(uint(reserve1));\\n        }else{\\n            params.strpReserve = int256(uint(reserve1));\\n            params.usdcReserve = int256(uint(reserve0));\\n        }\\n\\n\\n        /*NOW SWAP */\\n        params.amountIn = int256(IERC20(params.strp).balanceOf(address(this)));\\n        require(params.amountIn > 0, \\\"BURN_FAILED_ZERO_STRP\\\");\\n\\n        IERC20(params.strp).approve(address(params.router), uint(params.amountIn));\\n        params.amountOutMin = int256(params.router.quote(uint(params.amountIn), uint(params.strpReserve), uint(params.usdcReserve)));\\n\\n        /*10% slippage */\\n        params.amountOutMin = params.amountOutMin.muld(SignedBaseMath.ninetyPercent());\\n        address[] memory path = new address[](2);\\n        path[0] = params.strp;\\n        path[1] = params.usdc;\\n\\n        params.router.swapExactTokensForTokens(\\n            uint(params.amountIn),\\n            uint(params.amountOutMin),\\n            path,\\n            address(this),\\n            block.timestamp + 200\\n        );\\n        \\n        /*Calc change in balance */\\n        int256 lp_diff = int256(params.pair.balanceOf(address(this))) - lp_balance;\\n        require (lp_diff < 0, \\\"LP_BURN_ERROR\\\");\\n\\n        int256 usdc_diff = int256(IERC20(params.usdc).balanceOf(address(this))) - usdc_balance;\\n        require (usdc_diff > 0, \\\"USDC_BURN_ERROR\\\");\\n\\n        /*Reflect change*/\\n        slpToken.changeStakingPnl(lp_diff);\\n        slpToken.changeTradingPnl(usdc_diff);\\n    }\\n}\\n\\n\\n\\n/*\\n********** The staking PNL distribution explained ****************************\\n\\n|.........(pnl0)(ts0)|staker1(+sa1).............(pnl1)(ts1)|staker2 (+sa2)...........(pnl2)(ts2)|staker3 (+sa3)........(pnl3)(ts3)|staker2 (-sa21)\\n\\n\\npnl(i) - pnl of the market at moment(i)\\nts(i) - SLP total Supply at moment (i)\\n+-sa(i) - staked amount of staker (i) \\n\\nWhen staker2 unstake (-sa21) the formula to calculate the profit:\\n\\nprofit = (pnl2 - pnl1) * sa21/ts2 + (pnl3 - pnl2) * sa21/ts3 = sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3] \\n\\nMOMENT 0:\\n1. totalCummulativePnl = 0\\n\\nWHEN STAKER1 STAKE (corner case):\\n1. if ts0 == 0, ts0 =1\\n2. totalCummulativePnl += pnl0 / ts0  \\n3. staker1.initialStakedPnl = totalCummulativePnl\\n4. prevPnl = pnl0\\n\\nWHEN STAKER2 STAKE:\\n1. currentPnl = pnl1\\n2. currentStakedPnl = (currentPnl - prevPnl) / ts1\\n3. totalCummulativePnl += currentStakedPnl\\n4. staker2.initialStakedPnl = totalCummulativePnl\\n5. prevPnl = currentPnl(pnl1)\\n\\nWHEN STAKER3 STAKE:\\n0. currentPnl = pnl2\\n1. currentStakedPnl = (currentPnl - prevPnl) / ts2\\n2. totalCummulativePnl += currentStakedPnl\\n3. staker3.initialStakedPnl = totalCummulativePnl\\n4. prevPnl = currentPnl(pnl2)\\n\\nWHEN STAKER2 UNSTAKE:\\n1. currentPnl = pnl3\\n2. currentStakedPnl = (currentPnl - prevPnl) / ts3\\n3. totalCummulativePnl += currentStakedPnl\\n4. cummulativeGrowth = totalCummulativePnl - staker2.initialStakedPnl\\n5. profit = sa21 * cummulativeGrowth\\n6. PAY profit - send real money  (this profit will be excluded from total on the next step when we will calc pnl again)\\n7. prevPnl = currentPnl\\n\\n\\nLet's unwind the formula\\n\\nWHEN STAKER2 UNSTAKE:\\n\\nprofit = sa21 * cummulativeGrowth = sa21 * [totalCummulativePnl - staker2.initialStakedPnl] =\\n= sa21 * [pnl0/ts0 + (pnl1 - pnl0)/ts1 + (pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3 - pnl0/ts0 - (pnl1 - pnl0) / ts1] =\\n= sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3]\\n\\n\\n******************************************************************************\\n*/\",\"keccak256\":\"0x890f76b7a6b4ff33703020593e169e719be1487579c37cf7652f05ee79437846\"},\"contracts/impl/StripsAdminImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\n\\n\\nlibrary StripsAdminImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n\\n    function dispatcher(\\n        StorageStripsLib.State storage state,\\n        IStrips.AdminActionArgs memory args\\n    ) external\\n    {\\n        if (args.actionType == IStrips.AdminActionType.AddMarket){\\n            _addMarket(state, args.data);\\n        }else if (args.actionType == IStrips.AdminActionType.AddOracle){\\n            _addOracle(state, args.data);\\n        }else if (args.actionType == IStrips.AdminActionType.RemoveOracle){\\n            _removeOracle(state, args.data);\\n        }else if (args.actionType == IStrips.AdminActionType.ChangeOracle){\\n            _changeOracleReward(state, args.data);\\n        }else if (args.actionType == IStrips.AdminActionType.SetInsurance){\\n            _setInsurance(state, args.data);\\n        }else if (args.actionType == IStrips.AdminActionType.ChangeRisk){\\n            _changeRiskParams(state, args.data);\\n        }else {\\n            require(true == false, \\\"UNKNOWN_ACTIONTYPE\\\");\\n        }\\n    }\\n\\n\\n    function _addMarket(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public {\\n        IStrips.AddMarketParams memory params = abi.decode(data, (IStrips.AddMarketParams));\\n\\n        state.addMarket(IMarket(params.market));\\n\\n        emit LogNewMarket(params.market);\\n    }\\n\\n    function _addOracle(StorageStripsLib.State storage state,\\n                        bytes memory data) public\\n    {\\n        IStrips.AddOracleParams memory params = abi.decode(data, (IStrips.AddOracleParams));\\n\\n        state.addOracle(params.oracle,\\n                        params.keeperReward);\\n    }\\n\\n    function _removeOracle(StorageStripsLib.State storage state,\\n                            bytes memory data) public\\n    {\\n        IStrips.RemoveOracleParams memory params = abi.decode(data, (IStrips.RemoveOracleParams));\\n\\n        state.removeOracle(params.oracle);\\n    }\\n\\n\\n    function _changeOracleReward(StorageStripsLib.State storage state,\\n                                bytes memory data) public\\n    {\\n        IStrips.ChangeOracleParams memory params = abi.decode(data, (IStrips.ChangeOracleParams));\\n\\n        state.changeOracleReward(params.oracle,\\n                                    params.newReward);\\n    }\\n\\n    function _setInsurance(StorageStripsLib.State storage state,\\n                            bytes memory data) public\\n    {\\n        IStrips.SetInsuranceParams memory params = abi.decode(data, (IStrips.SetInsuranceParams));\\n\\n        state.setInsurance(IInsuranceFund(params.insurance));\\n\\n    }\\n\\n    function _changeRiskParams(StorageStripsLib.State storage state,\\n                                bytes memory data) public\\n    {\\n        IStrips.ChangeRiskParams memory params = abi.decode(data, (IStrips.ChangeRiskParams));\\n        state.setRiskParams(params.riskParams);\\n    }\\n}\",\"keccak256\":\"0x37972391de4d498dac7faa260f3a4fe6ca8f205488cd1ce75d913081a97082de\"},\"contracts/impl/StripsStateImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\nimport { StripsEvents, IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\n\\nlibrary StripsStateImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    function dispatcher(\\n        StorageStripsLib.State storage state,\\n        IStrips.StateActionArgs memory args\\n    ) external \\n    {\\n        if (args.actionType == IStrips.StateActionType.ClaimRewards){\\n            claimRewards(state, args.data);\\n        }\\n    }\\n\\n    function claimRewards(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public {\\n        IStrips.ClaimRewardsParams memory params = abi.decode(data, (IStrips.ClaimRewardsParams));\\n        require(params.account != address(0), \\\"BROKEN_ACCOUNT\\\");\\n\\n        IMarket[] memory _markets = state.allMarkets;\\n        require(_markets.length > 0, \\\"NO_MARKETS\\\");\\n        \\n        /*\\n            Claim rewards for Insurance\\n         */\\n        if (IStakeble(address(state.insuranceFund)).isRewardable()){\\n            address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\\n            IRewarder(rewarder).claimStakingReward(params.account);\\n        }\\n\\n        /*\\n            Calc rewards for Markets\\n        */\\n        for (uint i=0; i<_markets.length; i++) {\\n            if (IStakeble(address(_markets[i])).isRewardable() == false){\\n                continue;\\n            }\\n            address rewarder = IRewardable(address(_markets[i])).getRewarder();\\n            \\n            IRewarder(rewarder).claimStakingReward(params.account);\\n            IRewarder(rewarder).claimTradingReward(params.account);\\n        }\\n    }\\n\\n    function _payKeeperReward(StorageStripsLib.State storage state,\\n                                address keeper) external \\n    {\\n        //TODO: implement\\n    }\\n\\n\\n    /*\\n        Info for testing models\\n     */\\n\\n    function _check_trader(\\n        StorageStripsLib.State storage state,\\n        address _trader,\\n        IMarket _market) external \\n    {\\n        IStripsEvents.CheckParams memory _checkParams;\\n\\n        /*Calc market info first */\\n        (_checkParams.marketPrice,\\n            _checkParams.oraclePrice) = _market.getPrices();\\n\\n        _checkParams.uniLpPrice = IUniswapLpOracle(_market.getPairOracle()).getPrice();\\n\\n\\n        /*Market params */\\n        StorageStripsLib.Position storage _ammPosition = state.checkPosition(_market, address(_market));\\n\\n        if (_ammPosition.isActive){\\n            _checkParams.ammIsLong = _ammPosition.isLong;\\n            _checkParams.ammNotional = _ammPosition.notional;\\n            _checkParams.ammInitialPrice = _ammPosition.initialPrice;\\n            _checkParams.ammEntryPrice = _ammPosition.entryPrice;\\n\\n            _checkParams.ammTotalLiquidity = _market.getLiquidity();\\n            (_checkParams.ammTradingLiquidity,\\n                _checkParams.ammStakingLiquidity) = _market.getPartedLiquidity();\\n\\n            (_checkParams.ammFundingPnl,\\n                _checkParams.ammTradingPnl,\\n                _checkParams.ammTotalPnl) = PnlLib.getAmmAllPnl(state, _market, _ammPosition);\\n        }\\n\\n        /* Is trader a staker also? */\\n        address slpToken = IStakeble(address(_market)).getSlpToken();\\n        if (IStripsLpToken(slpToken).balanceOf(_trader) > 0){\\n          (,\\n            _checkParams.stakerInitialStakingPnl,\\n            _checkParams.stakerInitialTradingPnl,\\n            _checkParams.stakerInitialBlockNum,\\n            ,\\n            _checkParams.stakerUnrealizedStakingProfit,\\n            _checkParams.stakerUnrealizedTradingProfit)  = SLPToken(slpToken).stakers(_trader);\\n        }\\n\\n        _checkParams.slpTotalSupply = int256(IStripsLpToken(slpToken).totalSupply());\\n\\n        _checkParams.slpTradingCummulativePnl = SLPToken(slpToken).cummulativeTradingPnl();\\n        _checkParams.slpStakingCummulativePnl = SLPToken(slpToken).cummulativeStakingPnl();\\n\\n        _checkParams.slpTradingPnl = SLPToken(slpToken).cumTradingPNL();\\n        _checkParams.slpStakingPnl = SLPToken(slpToken).cumStakingPNL();\\n\\n        (int256 accumulatedTradingPnl,) = SLPToken(slpToken).tradingPnl();\\n        (int256 accumulatedStakingPnl,) = SLPToken(slpToken).stakingPnl();\\n\\n        _checkParams.slpTradingPnlGrowth = accumulatedTradingPnl - SLPToken(slpToken).prevTradingPnl();\\n        _checkParams.slpStakingPnlGrowth = accumulatedStakingPnl - SLPToken(slpToken).prevStakingPnl();\\n\\n        /*\\n            if it's market - just add additional integrity check\\n        */\\n        if (address(_market) == _trader){\\n\\n            address[] memory allAccounts = state.allAccounts;\\n            for (uint i = 0; i < allAccounts.length; i++){\\n                if (allAccounts[i] == address(_market)){\\n                    continue;\\n                }\\n\\n                StorageStripsLib.Position storage _position = state.checkPosition(_market, allAccounts[i]);\\n                if (_position.isActive == true){\\n                    int256 totalPnl;\\n                    (,,totalPnl) = PnlLib.getAllUnrealizedPnl(state, \\n                                                        _market, \\n                                                        _position, \\n                                                        SignedBaseMath.oneDecimal(), \\n                                                        true); // BUT pnl based on MARKET_PRICE\\n\\n                    _checkParams.tradersTotalPnl += totalPnl;\\n                }\\n            }\\n        }else{\\n\\n            StorageStripsLib.Position storage _traderPosition = state.checkPosition(_market, _trader);\\n            if (_traderPosition.isActive){\\n\\n                _checkParams.isLong = _traderPosition.isLong;\\n                _checkParams.collateral = _traderPosition.collateral;\\n                _checkParams.notional = _traderPosition.notional;\\n                _checkParams.initialPrice = _traderPosition.initialPrice;\\n                _checkParams.entryPrice = _traderPosition.entryPrice;\\n\\n                (,_checkParams.marginRatio) = PnlLib.getMarginRatio(state,\\n                                                                    _market, \\n                                                                    _traderPosition,\\n                                                                    SignedBaseMath.oneDecimal(),\\n                                                                    false); // based on EXIT_PRICE\\n                (_checkParams.fundingPnl,\\n                    _checkParams.tradingPnl,\\n                    _checkParams.totalPnl) = PnlLib.getAllUnrealizedPnl(state, \\n                                                            _market, \\n                                                            _traderPosition, \\n                                                            SignedBaseMath.oneDecimal(), \\n                                                        true); // BUT pnl based on MARKET_PRICE\\n            }\\n\\n                /*Add insurance staking rewards first */\\n                if (IStakeble(address(state.insuranceFund)).isRewardable()){\\n                    address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\\n                }\\n\\n                /*Calc rewards separately trading + staking for all markets */\\n\\n                if (IStakeble(address(_market)).isRewardable()){\\n                    address rewarder = IRewardable(address(_market)).getRewarder();\\n\\n                    _checkParams.tradingRewardsTotal += IRewarder(rewarder).totalTradeReward(_trader);\\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\\n\\n                }\\n                \\n        }\\n\\n\\n\\n        StripsEvents.logCheckData(_trader, address(_market), _checkParams);\\n    } \\n\\n    function _check_insurance(\\n        StorageStripsLib.State storage state) external \\n    {\\n        IStripsEvents.CheckInsuranceParams memory _checkParams;\\n\\n        address _insurance = address(state.insuranceFund);\\n        address sipToken = IStakeble(_insurance).getSlpToken();\\n        _checkParams.sipTotalSupply = IStripsLpToken(sipToken).totalSupply();\\n\\n        (_checkParams.usdcLiquidity,\\n            _checkParams.lpLiquidity) = IInsuranceFund(_insurance).getPartedLiquidity();\\n\\n\\n        StripsEvents.logCheckInsuranceData(_insurance, _checkParams);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3f5b6674f5b9038113b8279dae2efc6bf1b7cffc963c6a75554921cb98ab63ff\"},\"contracts/impl/StripsViewImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\nimport { StripsEvents, IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\nlibrary StripsViewImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    int256 constant SECONDS_PER_YEAR = 60 *60 *24 *365;\\n\\n    struct InfoCalcParams {\\n        uint8 pnlIndex;\\n\\n        uint8 stakingIndex;\\n        uint8 assetIndex;\\n        \\n        int256 strpPrice;\\n        int256 lpPrice;\\n        int256 pnlWhatIf;\\n    }   \\n\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStrips.CheckParams params\\n    );\\n\\n    event LogAccountValue(\\n        address indexed account,\\n        AccountValueParams params\\n    );\\n\\n    struct AccountValueParams {\\n        int256 tradingPnl;\\n        int256 stakingPnl;\\n        int256 insurancePnl;\\n    }\\n\\n    struct ExtendedMarketData {\\n        bool created;\\n        address market;\\n    }\\n\\n\\n    function dispatcher(\\n        StorageStripsLib.State storage state,\\n        IStrips.ViewActionArgs memory args\\n    ) external view returns (bytes memory)\\n    {\\n        if (args.actionType == IStrips.ViewActionType.GetOracles){\\n            return _allOracles(state);\\n        }else if (args.actionType == IStrips.ViewActionType.GetMarkets){\\n            return _allMarkets(state);\\n        }else if (args.actionType == IStrips.ViewActionType.CalcFeeAndSlippage){\\n            return calcFeeWithSlippage(state, args.data);\\n        }else if (args.actionType == IStrips.ViewActionType.GetPosition){\\n            return calcPositionParams(state, args.data);\\n        }else if (args.actionType == IStrips.ViewActionType.CalcClose){\\n            return calcCloseParams(state, args.data);\\n        }else if (args.actionType == IStrips.ViewActionType.CalcRewards){\\n            return calcRewards(state, args.data);\\n        }else{\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    function _allOracles(\\n        StorageStripsLib.State storage state\\n    ) public view returns (bytes memory)\\n    {\\n        StorageStripsLib.OracleData[] memory _oracles = new StorageStripsLib.OracleData[](state.allOracles.length);\\n\\n        for (uint i=0; i<state.allOracles.length; i++) {\\n            _oracles[i] = state.oracles[state.allOracles[i]];\\n        }\\n\\n        return abi.encode(_oracles);\\n    }\\n\\n    function _allMarkets(\\n        StorageStripsLib.State storage state\\n    ) public view returns (bytes memory)\\n    {\\n        ExtendedMarketData[] memory _markets = new ExtendedMarketData[](state.allMarkets.length);\\n\\n        for (uint i=0; i<state.allMarkets.length; i++) {\\n            IMarket _address = state.allMarkets[i];\\n            _markets[i].created = state.markets[_address].created;\\n            _markets[i].market = address(_address);\\n        }\\n\\n        return abi.encode(_markets);\\n\\n    }\\n\\n    /* */\\n    function collateralRequired(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _account\\n    ) external view returns (int256) {\\n        StorageStripsLib.Position storage position = state.getPosition(_market, _account);\\n\\n        int256 total_pnl = PnlLib.calcUnrealizedPnl(state, \\n                                                _market,\\n                                                position,\\n                                                SignedBaseMath.oneDecimal(),\\n                                                false);  //based on EXIT_PRICE\\n\\n        return position.notional.muld(state.riskParams.liquidationMarginRatio) - total_pnl - position.collateral;\\n    }\\n\\n    function apy(address _asset, int256 strpPrice, int256 lpPrice) public view returns (int256)\\n    {\\n        int256 stakingLiquidity = IStakeble(_asset).totalStaked();\\n        int256 rewardsApy = 0;\\n        if (stakingLiquidity != 0 && strpPrice != 0){\\n            int256 stakingRewardPerSec = IRewarder(IRewardable(_asset).getRewarder()).currentStakingReward();\\n\\n            rewardsApy = (SECONDS_PER_YEAR.toDecimal().muld(stakingRewardPerSec.muld(strpPrice))).divd(stakingLiquidity.muld(lpPrice));\\n        }\\n\\n        if (IStakeble(_asset).isInsurance()){\\n            return rewardsApy;\\n        }\\n\\n        (int256 usdcPnl, int256 lpPnl) = IStripsLpToken(IStakeble(_asset).getSlpToken()).totalPnl();\\n        int256 lived = int256(IStakeble(_asset).liveTime());\\n\\n        int256 ammApy = 0;\\n        int256 totalLiquidity = IMarket(_asset).getLiquidity();\\n        if (totalLiquidity != 0){\\n            ammApy = (SECONDS_PER_YEAR.toDecimal().divd(lived.toDecimal())).muld((usdcPnl + lpPnl.muld(lpPrice)).divd(totalLiquidity));\\n        }\\n\\n        return rewardsApy + ammApy;\\n    }\\n\\n    function getTradingInfo(\\n        StorageStripsLib.State storage state,\\n        address _account\\n    ) public view returns (IStrips.TradingInfo memory tradingInfo) {\\n\\n        IMarket[] memory _markets = state.allMarkets;\\n        require(_markets.length > 0, \\\"NO_MARKETS\\\");\\n\\n        InfoCalcParams memory calcParams;\\n\\n        tradingInfo.assetData = new IStrips.AssetData[](_markets.length + 1); // + INSURANCE\\n\\n        tradingInfo.positionData = new IStrips.PositionData[](_markets.length);\\n        calcParams.pnlIndex = 0;\\n        calcParams.assetIndex = 0;\\n\\n        calcParams.strpPrice = IUniswapLpOracle(state.lpOracle).strpPrice();\\n        calcParams.lpPrice = IUniswapLpOracle(state.lpOracle).getPrice();\\n\\n        for (uint i=0; i<_markets.length; i++) {\\n            tradingInfo.assetData[i].asset = address(_markets[i]);\\n            tradingInfo.assetData[i].minimumMargin = state.riskParams.liquidationMarginRatio;\\n\\n            (tradingInfo.assetData[i].marketPrice,\\n                tradingInfo.assetData[i].oraclePrice) = _markets[i].getPrices();\\n            \\n            tradingInfo.assetData[i].maxNotional = _markets[i].maxNotional();\\n            tradingInfo.assetData[i].tvl = _markets[i].getLiquidity();\\n\\n            //TODO: CALC APY\\n            tradingInfo.assetData[i].apy = apy(address(_markets[i]), calcParams.strpPrice, calcParams.lpPrice);\\n            tradingInfo.assetData[i].isInsurance = false;\\n\\n            StorageStripsLib.Position storage _position = state.checkPosition(_markets[i], _account);\\n            if (_position.isActive == true){\\n                    (int256 total_pnl,\\n                        int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                                    _markets[i], \\n                                                                    _position,\\n                                                                    SignedBaseMath.oneDecimal(),\\n                                                                    false); // based on EXIT_PRICE\\n                    calcParams.pnlWhatIf = total_pnl;\\n\\n                    total_pnl = PnlLib.calcUnrealizedPnl(state, \\n                                                    _markets[i], \\n                                                    _position, \\n                                                    SignedBaseMath.oneDecimal(), \\n                                                    true); // BUT pnl based on MARKET_PRICE\\n                    \\n                    tradingInfo.positionData[calcParams.pnlIndex++] = IStrips.PositionData(_markets[i],\\n                                                                                total_pnl,\\n                                                                                calcParams.pnlWhatIf,\\n                                                                                marginRatio,\\n                                                                                IStrips.PositionParams(\\n                                                                                    _position.isLong,\\n                                                                                    _position.isActive,\\n                                                                                    _position.isLiquidated,\\n\\n                                                                                    _position.notional,\\n                                                                                    _position.collateral,\\n                                                                                    _position.initialPrice\\n                                                                                ));\\n            }\\n            calcParams.assetIndex += 1;\\n        }\\n        \\n        \\n        tradingInfo.assetData[calcParams.assetIndex].asset = address(state.insuranceFund);\\n        tradingInfo.assetData[calcParams.assetIndex].slpToken = IStakeble(address(state.insuranceFund)).getSlpToken();\\n        tradingInfo.assetData[calcParams.assetIndex].tvl = state.insuranceFund.getLiquidity();\\n        tradingInfo.assetData[calcParams.assetIndex].isInsurance = true;\\n        tradingInfo.assetData[calcParams.assetIndex].minimumMargin = state.riskParams.liquidationMarginRatio;\\n\\n        tradingInfo.assetData[calcParams.assetIndex].apy = apy(address(state.insuranceFund), calcParams.strpPrice, calcParams.lpPrice);\\n\\n        calcParams.assetIndex += 1;\\n    }\\n\\n    function getStakingInfo(\\n        StorageStripsLib.State storage state,\\n        address _account\\n    ) public view returns (IStrips.StakingInfo memory stakingInfo) {\\n        \\n        IMarket[] memory _markets = state.allMarkets;\\n        require(_markets.length > 0, \\\"NO_MARKETS\\\");\\n        InfoCalcParams memory calcParams;\\n\\n        stakingInfo.assetData = new IStrips.AssetData[](_markets.length + 1); //+ Insurance\\n\\n        stakingInfo.stakingData = new IStrips.StakingData[](_markets.length + 1); //+ Insurance\\n        calcParams.stakingIndex = 0;\\n        calcParams.assetIndex = 0;\\n        \\n        calcParams.strpPrice = IUniswapLpOracle(state.lpOracle).strpPrice();\\n        calcParams.lpPrice = IUniswapLpOracle(state.lpOracle).getPrice();\\n\\n        for (uint i=0; i<_markets.length; i++) {\\n            stakingInfo.assetData[i].asset = address(_markets[i]);\\n            stakingInfo.assetData[i].minimumMargin = state.riskParams.liquidationMarginRatio;\\n\\n            (stakingInfo.assetData[i].marketPrice,\\n                stakingInfo.assetData[i].oraclePrice) = _markets[i].getPrices();\\n            \\n            stakingInfo.assetData[i].maxNotional = _markets[i].maxNotional();\\n            stakingInfo.assetData[i].tvl = _markets[i].getLiquidity();\\n            stakingInfo.assetData[i].isInsurance = false;\\n            \\n            stakingInfo.assetData[i].apy = apy(address(_markets[i]), calcParams.strpPrice, calcParams.lpPrice);\\n\\n            address slpToken = IStakeble(address(_markets[i])).getSlpToken();\\n            stakingInfo.assetData[i].slpToken = slpToken;\\n            uint256 slpAmount = IStripsLpToken(slpToken).balanceOf(_account);\\n            if (slpAmount > 0){\\n                IStripsLpToken.ProfitParams memory profit = IStripsLpToken(slpToken).calcProfit(_account, slpAmount);\\n\\n                stakingInfo.stakingData[calcParams.stakingIndex].asset = address(_markets[i]);\\n                stakingInfo.stakingData[calcParams.stakingIndex].totalStaked = profit.totalStaked;\\n                \\n                calcParams.stakingIndex += 1;\\n            }\\n\\n            calcParams.assetIndex += 1;\\n        }\\n\\n        address sipToken = IStakeble(address(state.insuranceFund)).getSlpToken();\\n        \\n        stakingInfo.assetData[calcParams.assetIndex].asset = address(state.insuranceFund);\\n        stakingInfo.assetData[calcParams.assetIndex].slpToken = sipToken;\\n        stakingInfo.assetData[calcParams.assetIndex].tvl = state.insuranceFund.getLiquidity();\\n        stakingInfo.assetData[calcParams.assetIndex].isInsurance = true;\\n        stakingInfo.assetData[calcParams.assetIndex].minimumMargin = state.riskParams.liquidationMarginRatio;\\n        \\n        stakingInfo.assetData[calcParams.assetIndex].apy = apy(address(state.insuranceFund), calcParams.strpPrice, calcParams.lpPrice);\\n\\n        uint256 sipAmount = IStripsLpToken(sipToken).balanceOf(_account);\\n        if (sipAmount > 0){\\n            IStripsLpToken.ProfitParams memory profit = IStripsLpToken(sipToken).calcProfit(_account, sipAmount);\\n\\n            stakingInfo.stakingData[calcParams.stakingIndex].asset = address(state.insuranceFund);\\n            stakingInfo.stakingData[calcParams.stakingIndex].totalStaked = profit.totalStaked;\\n            \\n            calcParams.stakingIndex += 1;\\n        }\\n    }\\n\\n    function getAllInfo(\\n        StorageStripsLib.State storage state,\\n        address _account\\n    ) external view returns (IStrips.AllInfo memory allInfo) {\\n        /*\\n        allInfo.tradingInfo = getTradingInfo(state, _account);\\n        allInfo.stakingInfo = getStakingInfo(state, _account);\\n        */\\n    }\\n\\n    function calcFeeWithSlippage(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public view returns (bytes memory) {\\n        IStrips.FeeAndSlippageParams memory params = abi.decode(data, (IStrips.FeeAndSlippageParams));\\n\\n        IStrips.FeeAndSlippageData memory data;\\n\\n        data.market = params.market;\\n        (data.marketRate,\\n            data.oracleRate) = IMarket(params.market).getPrices();\\n\\n        data.whatIfPrice = IMarket(params.market).priceChange(params.notional, params.isLong);\\n\\n        (int256 marketFee, \\n            int256 insuranceFee,\\n            int256 daoFee) = PnlLib.calcPositionFee(state,\\n                                                    params.notional, \\n                                                    data.whatIfPrice);\\n        \\n        // 1.1 buffer\\n        data.fee = (marketFee + insuranceFee + daoFee).muld(110 * SignedBaseMath.onePercent());\\n        data.slippage = (data.whatIfPrice - data.marketRate).divd(data.marketRate);\\n        if (data.slippage < 0){\\n            data.slippage *= -1;\\n        }\\n\\n        data.minimumMargin = state.riskParams.liquidationMarginRatio;\\n\\n        int256 estimatedTradingPnl = params.notional.muld(data.marketRate - data.whatIfPrice).divd(data.marketRate);\\n        if (params.isLong == false) {\\n            /*If it's short don't forget to change the sign */\\n            estimatedTradingPnl *= -1;\\n        }\\n        data.estimatedMargin = (params.collateral + estimatedTradingPnl).divd(params.notional);\\n\\n        return abi.encode(data);\\n    }\\n\\n    function calcPositionParams(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public view returns (bytes memory)\\n    {       \\n        IStrips.GetPositionParams memory params = abi.decode(data, (IStrips.GetPositionParams));  \\n        StorageStripsLib.Position storage _position = state.getPosition(IMarket(params.market), params.account);\\n\\n        IStrips.PositionData memory data;\\n        data.market = IMarket(params.market);\\n        data.positionParams = IStrips.PositionParams({\\n            isLong: _position.isLong,\\n            isActive: _position.isActive,\\n            isLiquidated: _position.isLiquidated,\\n            notional: _position.notional,\\n            collateral: _position.collateral,\\n            initialPrice: _position.initialPrice\\n        });\\n\\n        (,,data.pnl) = PnlLib.calcPnlParts(state, \\n                                            IMarket(params.market), \\n                                            _position,\\n                                            SignedBaseMath.oneDecimal(),\\n                                            true);\\n        (data.pnlWhatIf, data.marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    IMarket(params.market),\\n                                                    _position,\\n                                                    SignedBaseMath.oneDecimal(),\\n                                                    false);\\n\\n        return abi.encode(data);\\n    }\\n\\n    function calcCloseParams(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public view returns (bytes memory)\\n    {  \\n        IStrips.CalcCloseParams memory params = abi.decode(data, (IStrips.CalcCloseParams));\\n        require(params.closeRatio > 0 && params.closeRatio <= SignedBaseMath.oneDecimal(), \\\"WRONG_RATIO\\\");\\n\\n        IStrips.CalcCloseData memory data;\\n        data.market = params.market;\\n        data.minimumMargin = state.riskParams.liquidationMarginRatio;\\n\\n        StorageStripsLib.Position storage position = state.getPosition(IMarket(params.market), \\n                                                                       params.account);\\n\\n\\n        (data.pnl, \\n            data.marginLeft) = PnlLib.getMarginRatio(state, \\n                                                    IMarket(params.market), \\n                                                    position, \\n                                                    params.closeRatio, \\n                                                    false);\\n        \\n        //Calc fee for partly close position\\n        int256 notional = position.notional;\\n        if (params.closeRatio != SignedBaseMath.oneDecimal()){\\n            notional = notional.muld(params.closeRatio);\\n        }\\n\\n        int256 currentPrice = IMarket(params.market).currentPrice();\\n        data.whatIfPrice = IMarket(params.market).priceChange(0 - notional, \\n                                                                position.isLong);\\n        \\n        data.slippage = (data.whatIfPrice - currentPrice).divd(currentPrice);\\n        if (data.slippage < 0){\\n            data.slippage *= - 1;\\n        }\\n\\n        (int256 marketFee, \\n            int256 insuranceFee,\\n            int256 daoFee) = PnlLib.calcPositionFee(state, \\n                                                        notional, \\n                                                        data.whatIfPrice); \\n\\n        data.fee = marketFee + insuranceFee + daoFee;\\n\\n        return abi.encode(data);\\n    }\\n\\n    function calcRewards(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public view returns (bytes memory)\\n    {  \\n        IStrips.CalcRewardsParams memory params = abi.decode(data, (IStrips.CalcRewardsParams));\\n        require(params.account != address(0), \\\"WRONG_ACCOUNT\\\");\\n        \\n        IStrips.CalcRewardsData memory data;\\n        data.account = params.account;\\n        data.rewardsTotal = 0;\\n\\n        IMarket[] memory _markets = state.allMarkets;\\n        require(_markets.length > 0, \\\"NO_MARKETS\\\");\\n        \\n        /*\\n            Calc rewards for Insurance\\n         */\\n        if (IStakeble(address(state.insuranceFund)).isRewardable()){\\n            address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\\n\\n            data.rewardsTotal += IRewarder(rewarder).totalStakerReward(params.account);\\n        }\\n\\n        /*\\n            Calc rewards for Markets\\n        */\\n        for (uint i=0; i<_markets.length; i++) {\\n            if (IStakeble(address(_markets[i])).isRewardable() == false){\\n                continue;\\n            }\\n            address rewarder = IRewardable(address(_markets[i])).getRewarder();\\n            \\n            data.rewardsTotal += IRewarder(rewarder).totalTradeReward(params.account);\\n            data.rewardsTotal += IRewarder(rewarder).totalStakerReward(params.account);\\n\\n        }\\n\\n\\n        return abi.encode(data);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x6d5c6971fd986621df45e5ec943f8a2bc87318ac9ef3e9ba2b69ee29f0297913\"},\"contracts/impl/TradeImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\n\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\n\\nlibrary TradeImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    //against stack too deep error\\n    struct PositionParams {\\n        IMarket _market;\\n        address _account;\\n        int256 _collateral;\\n        int256 _leverage;\\n        bool _isLong;\\n        int256 _slippage;\\n    }\\n\\n    struct TraderUpdate{\\n        int256 _notional;\\n        int256 _initialPrice;\\n        int256 _fundingPaid;\\n        bool _isActive;\\n        bool _isLong;\\n    }\\n\\n    struct PosInfo{\\n        int256 _notional;\\n        int256 _collateral;\\n        int256 _unrealizedPnl;\\n        int256 _priceBeforeChange;\\n    }\\n\\n    function openPosition(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams\\n    ) public {        \\n        require(posParams._collateral > 0, \\\"COLLATERAL_LEQ_0\\\");\\n\\n        StorageStripsLib.Position storage prevPosition = state.checkPosition(posParams._market, posParams._account);\\n        \\n        require(prevPosition.lastChangeBlock != block.number, \\\"SAME_BLOCK_ACTION_DENIED\\\");\\n\\n        int256 slippage = 0;\\n        int256 rewardedNotional = posParams._collateral * posParams._leverage;\\n\\n        if (prevPosition.isActive == false){\\n            //There is no active position - just open new\\n           slippage = _open(state,\\n                                posParams,\\n                                false);  //not merge\\n        }else{\\n            if (posParams._isLong != prevPosition.isLong){    // opposite?\\n                \\n                //check if it's opposite close\\n                int256 notional = posParams._collateral * posParams._leverage;\\n                if (notional == prevPosition.notional){     // the same but opposite, just close current\\n                    slippage = _liquidateWholeOrCloseRatio(state,\\n                                                prevPosition,\\n                                                posParams._market,\\n                                                SignedBaseMath.oneDecimal());\\n                }else{  //netting\\n                    slippage = _netPosition(state,\\n                        posParams,\\n                        prevPosition\\n                    );\\n\\n                }\\n            }else{  //the same side, it's aggregation\\n                slippage = _aggregate(state, \\n                            posParams,\\n                            prevPosition);\\n            }\\n        }\\n        _requireSlippage(posParams._slippage, slippage);\\n\\n        if (IStakeble(address(posParams._market)).isRewardable()){\\n            address rewarder = IRewardable(address(posParams._market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(posParams._account, rewardedNotional);\\n        }\\n    }\\n\\n\\n\\n    function closePosition(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) public {\\n        require(_closeRatio > 0 && _closeRatio <= SignedBaseMath.oneDecimal(), \\\"WRONG_CLOSE_RATIO\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n        \\n        int256 notional = position.notional;\\n        require(position.lastChangeBlock != block.number, \\\"SAME_BLOCK_ACTION_DENIED\\\");\\n\\n        //ALWAYS check the full position first\\n        _requireMargin(state, \\n                position, \\n                _market,\\n                SignedBaseMath.oneDecimal());\\n\\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\\n            notional = notional.muld(_closeRatio);\\n        }\\n\\n        int256 slippage = _close(state,\\n                                position,\\n                                _market,\\n                                _closeRatio);\\n\\n        _requireSlippage(_slippage, slippage);\\n        if (IStakeble(address(_market)).isRewardable()){\\n            address rewarder = IRewardable(address(_market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(msg.sender, notional);\\n        }\\n\\n        if (position.isActive){\\n            _requireMargin(state, \\n                    position, \\n                    _market,\\n                    SignedBaseMath.oneDecimal());\\n        }\\n    }\\n\\n\\n    function liquidatePosition(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        address account\\n    ) public {\\n        //trader can't liquidate it's own position\\n        require(account != msg.sender, \\\"TRADER_CANTBE_LIQUIDATOR\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        account);\\n\\n\\n        (int256 total_pnl,\\n         int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    position,\\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\\n                                                    false);  // based on Exit price\\n                \\n        require(marginRatio <= state.getLiquidationRatio(), \\\"MARGIN_OK\\\");\\n        \\n\\n        _liquidate(state,\\n                    _market,\\n                    msg.sender,\\n                    position);\\n    }\\n\\n\\n    function addCollateral(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        int256 collateral\\n    ) internal {\\n        require(collateral > 0, \\\"COLLATERAL_LT_0\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n\\n                //Get collateral on STRIPS balance\\n        _receiveCollateral(state,\\n                            msg.sender, \\n                            collateral);\\n\\n        state.addCollateral(position,\\n                            collateral);\\n\\n        _requireMargin(state,\\n                        position,\\n                        _market,\\n                        SignedBaseMath.oneDecimal());\\n    }\\n\\n    function removeCollateral(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        int256 collateral\\n    ) internal {\\n        require(collateral > 0, \\\"COLLATERAL_LT_0\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n\\n        require(collateral < position.collateral, \\\"CANT_REMOVE_ALL\\\");\\n\\n        state.removeCollateral(position, \\n                                collateral);\\n\\n        _returnCollateral(state,\\n                            msg.sender, \\n                            collateral);\\n        \\n        _requireMargin(state,\\n                        position,\\n                        _market,\\n                        SignedBaseMath.oneDecimal());\\n\\n    }\\n\\n    /*\\n    **************************************************************************\\n    *   Different netting AMM scenarios and Unrealized PNL\\n     **************************************************************************\\n    */\\n\\n    function ammPositionUpdate(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        TraderUpdate memory _traderUpdate\\n    ) private {\\n        StorageStripsLib.Position storage ammPosition = state.checkPosition(_market, address(_market));\\n\\n        if (ammPosition.isActive == false){\\n            if (_traderUpdate._isActive == false){\\n                //trader closed the position, and we didn't have amm position\\n                return; // do nothing\\n            }\\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\\n\\n            //it's the new position, just open\\n            state.setPosition(\\n                _market, \\n                address(_market), \\n                traderRevertedSide,  //revert position \\n                0,                      // for amm we don't have collateral \\n                _traderUpdate._notional, \\n                _traderUpdate._initialPrice, \\n                false);\\n        }else{\\n            _ammCummulateFundingPnl(state, \\n                                    ammPosition,\\n                                    _market);\\n\\n            int256 ammNotional = ammPosition.notional;\\n            int256 ammUpdatedNotional = ammNotional;\\n            \\n            bool ammSide = ammPosition.isLong;\\n            bool newSide = ammSide;\\n\\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\\n\\n            int256 closeNotional = _traderUpdate._notional;\\n            if (_traderUpdate._isActive == false){\\n                closeNotional *= -1;\\n            }\\n\\n            //Trader open/change position\\n            if (ammSide == traderRevertedSide){\\n                //the same side\\n                ammUpdatedNotional += closeNotional;\\n                if (ammUpdatedNotional < 0){\\n                    ammUpdatedNotional *= -1;\\n                    newSide = !ammSide;\\n                }\\n            }else{\\n                int256 diff = ammNotional - closeNotional;        \\n            \\n                if (diff >= 0){\\n                    //the same side\\n                    ammUpdatedNotional = diff;\\n                } else {\\n                    //change side\\n                    ammUpdatedNotional = 0 - diff; \\n                    newSide = !ammSide;\\n                }\\n            }\\n\\n            if (_traderUpdate._isActive == false){\\n                ammPosition.unrealizedPnl += _traderUpdate._fundingPaid;\\n            }\\n\\n            int256 t = _traderUpdate._notional.muld(_traderUpdate._initialPrice);\\n            if (_traderUpdate._isActive == true && _traderUpdate._isLong == false){\\n                t *= -1;\\n            }else if(_traderUpdate._isActive == false && _traderUpdate._isLong == true){\\n                t *= -1;\\n            }\\n\\n            if (ammUpdatedNotional != 0){\\n\\n                //Last time it was closed\\n                int256 a = ammPosition.initialPrice.muld(ammNotional);\\n                if (ammNotional == 0){\\n                    a = ammPosition.zeroParameter;\\n                }else{\\n                    if (ammSide == false){\\n                        a *= -1;\\n                    }\\n                }\\n\\n\\n                int256 divTo = ammUpdatedNotional;\\n                if (newSide == false){\\n                    divTo *= -1;\\n                }\\n\\n                ammPosition.initialPrice = (a - t).divd(divTo);\\n            }else{\\n                \\n                int256 mulTo = ammNotional;\\n                if (ammSide == false){\\n                    mulTo *= -1;\\n                }\\n                ammPosition.savedTradingPnl = (_traderUpdate._initialPrice - ammPosition.initialPrice).muld(mulTo).divd(_traderUpdate._initialPrice);\\n                ammPosition.zeroParameter = ammPosition.initialPrice.muld(mulTo) - t; \\n            }\\n\\n    \\n            ammPosition.notional = ammUpdatedNotional;\\n            ammPosition.isLong = newSide;\\n        }\\n    }\\n\\n    \\n    function _ammCummulateFundingPnl(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage ammPosition,\\n        IMarket _market\\n    ) private {\\n        //ONLY once pre block\\n        if (ammPosition.initialBlockNumber == block.number){\\n            return;\\n        }\\n        ammPosition.initialBlockNumber = block.number;\\n\\n\\n        ammPosition.lastNotional = ammPosition.notional;\\n        ammPosition.lastIsLong = ammPosition.isLong;\\n        ammPosition.lastInitialPrice = ammPosition.initialPrice;\\n\\n        ammPosition.unrealizedPnl = PnlLib.getAmmFundingPnl(state, \\n                                                            _market, \\n                                                            ammPosition);\\n        \\n        ammPosition.initialTimestamp = block.timestamp;\\n        ammPosition.cummulativeIndex = _market.currentOracleIndex();\\n\\n    }\\n\\n\\n\\n    /*\\n    **************************************************************************\\n    *   Different netting scenarios\\n    **************************************************************************\\n    */\\n\\n    function _netPosition(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        StorageStripsLib.Position storage prevPosition\\n    ) private returns (int256) {\\n        int256 notional = posParams._collateral * posParams._leverage;\\n        int256 prevNotional = prevPosition.notional;\\n        int256 diff = notional - prevNotional;\\n        // Is itpartly close?\\n        if (diff < 0){\\n            int256 closeRatio = notional.divd(prevNotional);\\n\\n            // If position for liquidation, the AMM will liquidate it\\n            // In other way it will be partly close\\n            return _liquidateWholeOrCloseRatio(state,\\n                                        prevPosition,\\n                                        posParams._market,\\n                                        closeRatio);\\n        }\\n\\n\\n        // Is the new position bigger?\\n        if (diff > 0){\\n\\n            //STEP 1: close prev(long10: return collateral+profit)\\n            int256 slippage = _liquidateWholeOrCloseRatio(state,\\n                                        prevPosition,\\n                                        posParams._market,\\n                                        SignedBaseMath.oneDecimal());\\n            /*\\n            *   open short(5K)\\n            *   We need to save the same proportion\\n            *   diff / (collateral - x) = leverage\\n            *   \\n            *   x = collateral - diff/leverage\\n            *   adjCollateral = collateral - collateral + diff/leverage = difd/leverage \\n            */\\n            posParams._collateral = diff.divd(posParams._leverage.toDecimal());\\n\\n            slippage += _open(state, \\n                                posParams, \\n                                false);  //not a merge\\n            \\n            return slippage;\\n        }\\n\\n        require(true == false, \\\"UNKNOWN_NETTING\\\");\\n    }\\n\\n\\n    function _aggregate(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        StorageStripsLib.Position storage prevPosition\\n    ) private returns (int256) {\\n        //We save ONLY funding_pnl\\n        prevPosition.unrealizedPnl += PnlLib.getFundingUnrealizedPnl(state, \\n                                                            posParams._market, \\n                                                            prevPosition, \\n                                                            SignedBaseMath.oneDecimal(), \\n                                                            true);  //based on CURRENT_MARKET_PRICE\\n        return _open(state,\\n                    posParams,\\n                    true);  // it's a merge\\n    }\\n\\n\\n    function _liquidateWholeOrCloseRatio(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage _position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private returns (int256 slippage){\\n\\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    _position,\\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\\n                                                    false); // Based on exit price\\n\\n\\n        if (marginRatio <= state.getLiquidationRatio()){\\n            //If it's opposite close we can liquidate\\n            _liquidate(state,\\n                        _market,\\n                        address(_market),\\n                        _position\\n            );\\n            slippage = 0;\\n        }else{\\n            slippage = _close(state,\\n                                    _position,\\n                                    _market,\\n                                    _closeRatio); //the whole position\\n        }\\n    }\\n\\n\\n    /*\\n    ****************************************************\\n    * OPEN/CLOSE/LIQUIDATE implementation\\n    ****************************************************\\n    */\\n\\n    //not safe, all checks should be outside\\n    function _close(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private returns (int256 slippage) {\\n        //we need to use closePrice here after the position will be closed\\n        (int256 funding_pnl,\\n        int256 trading_pnl,\\n        int256 traderPnl) = PnlLib.getAllUnrealizedPnl(state,\\n                                                    _market,\\n                                                    position,\\n                                                    _closeRatio,\\n                                                    false);\\n\\n        int256 marketPnl = 0 - traderPnl;\\n\\n\\n        PosInfo memory pos_info = PosInfo({\\n            _notional:position.notional,\\n            _collateral:position.collateral,\\n            _unrealizedPnl:position.unrealizedPnl,\\n            _priceBeforeChange:_market.currentPrice()\\n        });\\n\\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\\n            pos_info._notional = pos_info._notional.muld(_closeRatio);\\n            pos_info._collateral = pos_info._collateral.muld(_closeRatio);\\n            pos_info._unrealizedPnl = pos_info._unrealizedPnl.muld(_closeRatio);\\n        }\\n\\n        int256 closePrice = _market.closePosition(position.isLong, \\n                                                    pos_info._notional);\\n        slippage = (closePrice - pos_info._priceBeforeChange).divd(pos_info._priceBeforeChange);\\n        if (slippage < 0){\\n            slippage *= -1;\\n        }\\n\\n\\n        // something went wrong, don't allow close positions\\n        require(closePrice > 0, \\\"CLOSEPRICE_BROKEN\\\");\\n\\n        //Pay position Fee\\n        //expectedClosePrice\\n        _payPositionFee(state,\\n                        _market, \\n                        msg.sender, \\n                        pos_info._notional, \\n                        closePrice);\\n\\n\\n        if (marketPnl > 0){\\n            //PROFIT: trader pays to Market from collateral\\n\\n            if (marketPnl > pos_info._collateral){\\n                marketPnl = pos_info._collateral;\\n            }\\n\\n            _payProfitOnPositionClose(state,\\n                                    _market,\\n                                    address(this),\\n                                    marketPnl);\\n            int256 left = pos_info._collateral - marketPnl;\\n            if (left > 0){\\n                _returnCollateral(state,\\n                                    msg.sender, \\n                                    left);\\n            }\\n        }\\n        else if (marketPnl < 0){\\n            //LOSS: market pays to trader from liquidity\\n\\n            int256 liquidity = _market.getLiquidity();\\n            if (liquidity < traderPnl){\\n                int256 debt = traderPnl - liquidity;\\n                _borrowInsurance(state,\\n                                    address(_market), \\n                                    debt);\\n            }\\n\\n            state.withdrawFromMarket(_market,\\n                                        msg.sender,\\n                                        traderPnl);\\n            _returnCollateral(state,\\n                                msg.sender,\\n                                pos_info._collateral);\\n        }\\n        else if (marketPnl == 0){\\n            //ZERO: just return collateral to trader\\n            _returnCollateral(state,\\n                                msg.sender,\\n                                pos_info._collateral);\\n        }\\n\\n\\n        int256 paid_funding = funding_pnl;\\n        if (position.isLong == false){\\n            paid_funding*= -1;\\n        }\\n\\n        ammPositionUpdate(state,\\n                _market,\\n                TraderUpdate({\\n                    _notional:pos_info._notional,\\n                    _isLong: position.isLong,\\n                    _initialPrice:position.initialPrice,\\n                    _fundingPaid:paid_funding,\\n                    _isActive:false\\n                }));\\n\\n        _unsetPostion(state,\\n                    position,\\n                    pos_info._notional,\\n                    pos_info._collateral,\\n                    _closeRatio,\\n                    pos_info._unrealizedPnl);\\n    }\\n\\n    function _open(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        bool merge\\n    ) private returns (int256 slippage) {\\n        int256 notional = posParams._collateral * posParams._leverage;\\n\\n        _requireNotional(posParams._market,\\n                        notional);\\n\\n        int256 currentPrice = posParams._market.currentPrice();\\n        int256 openPrice = posParams._market.openPosition(posParams._isLong, notional);\\n\\n        slippage = (openPrice - currentPrice).divd(currentPrice);\\n        if (slippage < 0){\\n            slippage *= -1;\\n        }\\n\\n        // something went wrong, don't allow open positions\\n        require(openPrice > 0, \\\"OPEN_PRICE_LTE_0\\\");\\n        \\n        state.setPosition(\\n            posParams._market,\\n            posParams._account,\\n            posParams._isLong,\\n            posParams._collateral,\\n            notional,\\n            openPrice,\\n            merge\\n        );\\n\\n    \\n\\n        //Get collateral on STRIPS balance\\n        _receiveCollateral(state,\\n                            posParams._account, \\n                            posParams._collateral);\\n\\n        //Send fee to Market and Insurance Balance, it will change liquidity\\n        _payPositionFee(state,\\n                        posParams._market, \\n                        posParams._account, \\n                        notional, \\n                        openPrice);\\n        \\n        StorageStripsLib.Position storage position = state.getPosition(posParams._market, posParams._account);\\n        ammPositionUpdate(state,\\n                posParams._market,\\n                TraderUpdate({\\n                    _notional:notional,\\n                    _isLong:posParams._isLong,\\n                    _initialPrice:position.entryPrice,\\n                    _fundingPaid:0,\\n                    _isActive:true\\n                }));\\n    \\n        \\n        //Always check margin after any open\\n        _requireMargin(state,\\n                position,\\n                posParams._market,\\n                SignedBaseMath.oneDecimal());\\n\\n\\n    }\\n\\n    function _liquidate(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        address _liquidator,\\n        StorageStripsLib.Position storage position\\n    ) private {\\n        //The closePrice after the notional removed should be USED\\n\\n        (int256 ammFee,\\n        int256 liquidatorFee,\\n        int256 insuranceFee,\\n        int256 funding_pnl_on_liquidation) = PnlLib.calcLiquidationFee(state,\\n                                                        _market, \\n                                                        position);\\n\\n        int256 closePrice = _market.closePosition(position.isLong, \\n                                                    position.notional);\\n        \\n        require(closePrice > 0, \\\"CLOSE_PRICE_ERROR\\\");\\n\\n\\n        //Calc how much debt we need to borrow for all possible situations\\n        int256 debt = 0; \\n        if (insuranceFee < 0){\\n            debt += 0 - insuranceFee;\\n            \\n            insuranceFee = 0; //We don't pay insuranceFee\\n        }\\n\\n        int256 liquidity = _market.getLiquidity() + debt;\\n\\n        // If not enough then we borrow only for amm and liquidator\\n        // It's ok to borrow more than we need - then we will have enough for the next time. But logic will be simpler.\\n        if (liquidity < (ammFee + liquidatorFee)){\\n            debt = debt + ammFee + liquidatorFee - liquidity;\\n            \\n            insuranceFee = 0; // We don't pay insurance\\n\\n        }\\n        // we have a little bit to pay to insurance but we DON'T borrow\\n        else if(liquidity < (ammFee + liquidatorFee + insuranceFee)) \\n        {\\n            insuranceFee = liquidity - ammFee - liquidatorFee;\\n            if (insuranceFee <= 0){\\n                insuranceFee = 0; //Just don't pay fee in this case\\n            }\\n        }\\n        \\n        /*EVERYTHING paid from collateral:\\n        * 1. Market fee - paid from strips balance to market\\n        * 2. Insurance fee - paid from strips balance to insurance\\n        * 3. Liquidator fee - paid from strips balance to liquidator (we use _returnCollateral)\\n        */\\n        if (debt > 0) {\\n            _borrowInsurance(state,\\n                            address(this), \\n                            debt);//SO if we need to borrow we borrow to STRIPS balance, to keep logic unified\\n\\n        }\\n\\n        state.depositToMarket(_market, address(this), ammFee); //pay to Market\\n\\n        if (insuranceFee > 0){\\n            state.depositToInsurance(address(this), insuranceFee); //pay to Insurance\\n        }\\n        _returnCollateral(state,\\n                        _liquidator, \\n                        liquidatorFee); // pay to liquidator\\n\\n        \\n        \\n        if (position.isLong == false){\\n            funding_pnl_on_liquidation*= -1;\\n        }\\n        ammPositionUpdate(state,\\n                _market,\\n                TraderUpdate({\\n                    _notional:position.notional,\\n                    _isLong:position.isLong,\\n                    _initialPrice:position.initialPrice,\\n                    _fundingPaid:funding_pnl_on_liquidation,\\n                    _isActive:false\\n                }));\\n\\n        if (IStakeble(address(_market)).isRewardable()){\\n            address rewarder = IRewardable(address(_market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(position.trader, position.notional);\\n        }\\n\\n\\n        //ALWAYS CLOSE here: no need to read from storage, that's why 0\\n        _unsetPostion(state,\\n                    position,\\n                    0,\\n                    0,\\n                    SignedBaseMath.oneDecimal(),\\n                    0);\\n        \\n        position.isLiquidated = true;\\n    }\\n\\n    /*\\n    *\\n    *   HELPERS\\n    *\\n    */\\n    function _unsetPostion(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        int256 notional,\\n        int256 collateral,\\n        int256 _closeRatio,\\n        int256 unrealizedPaid\\n    ) private {\\n        if (_closeRatio == SignedBaseMath.oneDecimal()){\\n            state.unsetPosition(position);\\n        }else{\\n            \\n            //It's just partly close\\n            state.partlyClose(\\n                position,\\n                collateral,\\n                notional,\\n                unrealizedPaid      \\n            );\\n        }\\n    }\\n\\n\\n    function _requireMargin(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private view {\\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    position,\\n                                                    _closeRatio,\\n                                                    false);  // based on Exit Price always\\n\\n        // Trader can't close position for liquidation                                            \\n        _requireMarginRatio(state, \\n                            marginRatio);\\n    }\\n\\n\\n    function _requireMarginRatio(\\n        StorageStripsLib.State storage state,\\n        int256 marginRatio\\n    ) private view {\\n        require(marginRatio >= state.getLiquidationRatio(), \\\"NOT_ENOUGH_MARGIN\\\");\\n    }\\n\\n    function _requireSlippage(\\n        int256 _requested,\\n        int256 _current\\n    ) private {\\n        require(_requested >= _current, \\\"SLIPPAGE_EXCEEDED\\\");\\n    }\\n\\n\\n    function _requireNotional(\\n        IMarket _market,\\n        int256 notional\\n    ) private returns (int256) {\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n\\n        int256 maxNotional = _market.maxNotional();\\n\\n\\n        require(notional <= maxNotional, \\\"NOTIONAL_GT_MAX\\\");\\n\\n        return maxNotional;\\n    }\\n\\n\\n    function _receiveCollateral(\\n        StorageStripsLib.State storage state,\\n        address _from, \\n        int256 _amount\\n    )private returns (int256) {\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                _from, \\n                                address(this), \\n                                uint(_amount));\\n    }\\n\\n    function _returnCollateral(\\n        StorageStripsLib.State storage state,\\n        address _to, \\n        int256 _amount\\n    )private returns (int256) {\\n        SafeERC20.safeTransfer(state.tradingToken, \\n                                _to, \\n                                uint(_amount));\\n    }\\n\\n    function _payProfitOnPositionClose(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _from,\\n        int256 _amount\\n    ) private {\\n        int256 insuranceFee = _amount.muld(state.riskParams.insuranceProfitOnPositionClosed);\\n        int256 marketFee =_amount - insuranceFee;\\n        require(insuranceFee > 0 && marketFee > 0, \\\"FEE_CALC_ERROR\\\");\\n        state.depositToMarket(_market, \\n                                _from, \\n                                marketFee);\\n\\n        //Pay fee to insurance fund\\n        state.depositToInsurance(_from, \\n                                    insuranceFee);\\n\\n\\n    }\\n\\n    //TODO: Can we store all the money on Strips? And just keep balances.\\n    // The only advantage is that Insurance money is safe in case of hack\\n    function _payPositionFee(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _from, \\n        int256 _notional, \\n        int256 _price\\n    ) private returns (int256 marketFee, int256 insuranceFee, int256 daoFee) {\\n\\n        (marketFee, insuranceFee, daoFee) = PnlLib.calcPositionFee(state, \\n                                                            _notional, \\n                                                            _price);\\n\\n\\n        require(marketFee > 0 && insuranceFee > 0, \\\"FEE_CALC_ERROR\\\");\\n\\n        state.depositToMarket(_market, \\n                                _from, \\n                                marketFee);\\n        \\n        //Pay fee to insurance fund\\n        state.depositToInsurance(_from, \\n                                insuranceFee);\\n\\n        //TODO: implement DAO here\\n        state.depositToDao(_from,\\n                            daoFee);\\n    }\\n\\n    function _borrowInsurance(\\n        StorageStripsLib.State storage state,\\n        address _to, \\n        int256 _amount         \\n    ) private {\\n\\n        state.withdrawFromInsurance(_to, _amount);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x1c27a8fce5a8f3f72d8297c3d15cf596d7c5586d2ae75af093d673dc6bde7546\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewardable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"./IRewarder.sol\\\";\\n\\ninterface IRewardable {\\n    function createRewarder(IRewarder.InitParams memory _params) external;\\n    function getRewarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x41b21e1eb0519392072e64c1443706859afd275eda09e3b8ae400aa1efc7c6ba\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/Pnl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"./StorageStrips.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary PnlLib {\\n    int256 constant ANN_PERIOD_SEC = 31536000;\\n\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n    using StorageMarketLib for StorageMarketLib.State;\\n\\n    // To not have stack too deep error\\n    struct PosInfo {\\n        bool isLong;\\n        int256 initialPrice;\\n        uint256 cummulativeIndex;\\n        int256 notional;\\n        int256 unrealizedPnl;\\n    }\\n\\n    struct AmmPosInfo {\\n        int256 notional;        \\n        int256 initialPrice;\\n        bool lastIsLong;\\n    }\\n\\n\\n    function getMarginRatio(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage _position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 total_pnl, int256 marginRatio) {\\n         total_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        \\n        //traderPnl already calculated for right ratio\\n        if (_notionalRatio == SignedBaseMath.oneDecimal()){\\n            marginRatio = (_position.collateral + total_pnl).divd(_position.notional);\\n        }else{\\n            int256 full_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        SignedBaseMath.oneDecimal(),\\n                                        is_market_price);\\n                                        \\n            // Margin ratio after partly close\\n            marginRatio = (_position.collateral.muld(SignedBaseMath.oneDecimal() - _notionalRatio) + full_pnl - total_pnl).divd(_position.notional.muld(SignedBaseMath.oneDecimal() - _notionalRatio));\\n        }\\n    }\\n\\n    function getFundingUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return funding_pnl;\\n    }\\n\\n    \\n    function calcUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return total_pnl;\\n    }\\n\\n    function getAmmTotalPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return total_pnl;\\n    }\\n\\n\\n    function getAmmFundingPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return funding_pnl;\\n    }\\n\\n\\n    function getAmmAllPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n    }\\n\\n    function getAllUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n    }\\n\\n\\n    //It can calc partlyPnl \\n    function calcPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n        \\n        PosInfo memory pos_info;\\n\\n        //Save gas on reading\\n        pos_info.isLong = position.isLong;\\n        pos_info.initialPrice = position.initialPrice;\\n        pos_info.notional = position.notional;\\n        pos_info.unrealizedPnl = position.unrealizedPnl;\\n        if (_notionalRatio != SignedBaseMath.oneDecimal()){\\n            pos_info.notional = pos_info.notional.muld(_notionalRatio);\\n            pos_info.unrealizedPnl = pos_info.unrealizedPnl.muld(_notionalRatio);\\n        }\\n\\n        \\n\\n        int256 _price;\\n\\n        if (is_market_price == true){\\n            _price = _market.currentPrice();\\n        }else{\\n            _price = _market.priceChange(0 - pos_info.notional, \\n                                            pos_info.isLong);\\n        }\\n        \\n        //DONE: after 24-June discussion\\n        trading_pnl = pos_info.notional.muld(_price - pos_info.initialPrice).divd(_price);\\n\\n\\n                //scalar - in seconds since epoch\\n        int256 time_elapsed = int256(block.timestamp - position.initialTimestamp);\\n\\n        //we have funding_pnl ONLY for next block\\n        if (time_elapsed > 0){\\n            int256 oracle_avg = calcOracleAverage(_market, position.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());      \\n\\n            //DONE: after 24-June discussion\\n            funding_pnl = pos_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - pos_info.notional.muld(pos_info.initialPrice.muld(proportion));\\n        }\\n\\n        funding_pnl += pos_info.unrealizedPnl;\\n\\n        if (pos_info.isLong){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl - funding_pnl;\\n        }\\n    }\\n\\n    function calcAmmPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage ammPosition\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n\\n        int256 _price = _market.currentPrice();\\n\\n\\n        //trading calcs always based on current notional\\n        trading_pnl = ammPosition.notional.muld(_price - ammPosition.initialPrice).divd(_price);\\n        if (ammPosition.notional == 0){\\n            trading_pnl = ammPosition.savedTradingPnl;\\n        }\\n\\n        AmmPosInfo memory amm_info = AmmPosInfo({\\n            notional:ammPosition.lastNotional,      \\n            initialPrice:ammPosition.lastInitialPrice,\\n            lastIsLong:ammPosition.lastIsLong\\n        });\\n\\n\\n        if (ammPosition.initialBlockNumber != block.number){\\n            amm_info.notional = ammPosition.notional;\\n            amm_info.initialPrice = ammPosition.initialPrice;\\n            amm_info.lastIsLong = ammPosition.isLong;\\n        }\\n\\n        int256 time_elapsed = int256(block.timestamp - ammPosition.initialTimestamp);\\n\\n        int256 instantFunding;\\n        if (time_elapsed > 0){\\n            int256 oracle_avg;\\n\\n            oracle_avg = calcOracleAverage(_market, ammPosition.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());     \\n\\n            instantFunding = amm_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - amm_info.notional.muld(amm_info.initialPrice.muld(proportion));\\n            \\n            //SUPER carefull here - we need to know the PREVIOUS sign if we calc based on historical value\\n            if (ammPosition.lastIsLong == false){\\n                instantFunding *= -1;\\n            }\\n\\n            \\n            \\n        }\\n\\n\\n        funding_pnl = instantFunding + ammPosition.unrealizedPnl;\\n\\n\\n        //BUT here we are using current isLong of amm\\n        if (ammPosition.notional == 0){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }\\n        else if (ammPosition.isLong == true){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl + funding_pnl;\\n        }\\n\\n    }\\n\\n\\n\\n    function calcOracleAverage(\\n        IMarket _market,\\n        uint256 fromIndex\\n    ) internal view returns (int256) {        \\n        return IAssetOracle(_market.getAssetOracle()).calcOracleAverage(fromIndex);\\n    }\\n\\n    function calcPositionParams(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _account, \\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl, \\n                            int256 trading_pnl,\\n                            int256 total_pnl,\\n                            int256 margin_ratio)\\n    {\\n        StorageStripsLib.Position storage _position = state.getPosition(_market, _account);\\n\\n        (funding_pnl,\\n          trading_pnl,\\n          total_pnl) = calcPnlParts(state, \\n                                    _market, \\n                                    _position,\\n                                    SignedBaseMath.oneDecimal(),\\n                                    is_market_price);\\n        \\n        margin_ratio = (_position.collateral + total_pnl).divd(_position.notional);\\n    }\\n\\n    /*\\n    *\\n    *   FEE CALCULATIOSN\\n    *\\n    */\\n\\n    function calcLiquidationFee(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 ammFee,\\n                            int256 liquidatorFee,\\n                            int256 insuranceFee,\\n                            int256 funding_pnl_liquidated)\\n    {\\n\\n        //we calc PNL based on price after the position is closed\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 unrealizedPnl) = getAllUnrealizedPnl(state,\\n                                                _market, \\n                                                position,\\n                                                SignedBaseMath.oneDecimal(),\\n                                                false);\\n\\n\\n        funding_pnl_liquidated = funding_pnl;\\n\\n        if (unrealizedPnl < 0){\\n            unrealizedPnl *= -1;\\n        }\\n\\n        int256 netEquity = position.collateral - unrealizedPnl;\\n\\n        //Market and liquidator Fee are always the same\\n        ammFee = unrealizedPnl.muld(state.riskParams.marketFeeRatio);\\n        liquidatorFee = unrealizedPnl.muld(state.riskParams.liquidatorFeeRatio);\\n\\n        //easy to read is more important than optimization now\\n        int256 insuranceFeeRatio = SignedBaseMath.oneDecimal() - state.riskParams.liquidatorFeeRatio - state.riskParams.marketFeeRatio;\\n\\n        insuranceFee = unrealizedPnl.muld(insuranceFeeRatio);\\n\\n        insuranceFee += netEquity;\\n    }\\n\\n    function calcPositionFee(\\n        StorageStripsLib.State storage state,\\n        int256 _notional,\\n        int256 _price\\n    ) internal view returns (int256 fee, int256 iFee, int256 daoFee) {\\n        int256 calcPrice = _price;\\n        if (calcPrice < state.riskParams.minimumPricePossible){\\n            calcPrice = state.riskParams.minimumPricePossible;\\n        }\\n\\n        int256 baseFee = calcPrice.muld(_notional).muld(SignedBaseMath.onePercent());\\n\\n        int256 ammFeeRatio = state.riskParams.fundFeeRatio;\\n        int256 daoFeeRatio = state.riskParams.daoFeeRatio;\\n        int256 iFeeRatio = SignedBaseMath.oneDecimal() - ammFeeRatio - daoFeeRatio;\\n\\n        require((ammFeeRatio + daoFeeRatio + iFeeRatio) <= SignedBaseMath.oneDecimal(), \\\"FEE_SUM_GT_1\\\");\\n\\n        fee = ammFeeRatio.muld(baseFee);\\n        daoFee = daoFeeRatio.muld(baseFee);\\n        iFee = iFeeRatio.muld(baseFee);\\n    }\\n}\",\"keccak256\":\"0xb983322e9c32791a626b3ddeb66fbfc6b96c068e112999abb8d57f198b682d44\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"},\"contracts/markets/Getters.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport { MState } from \\\"./State.sol\\\";\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StakingImpl } from \\\"../impl/StakingImpl.sol\\\";\\nimport { AssetOracle } from \\\"../oracle/AssetOracle.sol\\\";\\n\\nabstract contract MGetters is\\n    IMarket,\\n    MState\\n{\\n    using StorageMarketLib for StorageMarketLib.State;\\n    using SignedBaseMath for int256;\\n\\n    function currentPrice() external view override returns (int256) {\\n        return m_state.currentPrice();\\n    }\\n\\n    function oraclePrice() external view override returns (int256) {\\n        return m_state.oraclePrice();\\n    }\\n    \\n    /**\\n     * @notice total longs positions notional for this market. \\n     * @return in USDC\\n     */\\n    function getLongs() external view override returns (int256) \\n    {\\n        return m_state.totalLongs;\\n    }\\n\\n    /**\\n     * @notice total shorts positions notional for this market. \\n     * @return in USDC\\n     */\\n    function getShorts() external view override returns (int256) {\\n        return m_state.totalShorts;\\n    }\\n\\n    /**\\n     * @notice using to receive the maximum position size for the current market\\n     * @return maximum position size (after leverage) in USDC\\n     */\\n    function maxNotional() external view override returns (int256) {\\n        return m_state.maxNotional();\\n    }\\n\\n\\n    function getPrices() external view override returns (int256, int256) {\\n        return m_state.getPrices();\\n    }\\n\\n    function getLiquidity() external view override returns (int256) {\\n        return m_state.getLiquidity();\\n    }\\n\\n    function getPartedLiquidity() external view override returns (int256 tradingLiquidity, int256 stakingLiquidity) {\\n        tradingLiquidity = m_state.calcTradingLiqudity();\\n        stakingLiquidity = m_state.calcStakingLiqudity();\\n    }\\n\\n    function getAssetOracle() external view override returns (address)\\n    {\\n        return address(m_state.params.assetOracle);\\n    }\\n\\n    function getPairOracle() external view override returns (address)\\n    {\\n        return address(m_state.params.pairOracle);\\n    }\\n\\n    function currentOracleIndex() external view override returns (uint256) \\n    {\\n        return AssetOracle(address(m_state.params.assetOracle)).lastCumulativeIndex();\\n    }\\n\\n\\n}\",\"keccak256\":\"0xa8fc18b599fca330a72444c5778fc121637c7a371628323bdace0efd4025bc06\"},\"contracts/markets/IrsMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { MGetters } from \\\"./Getters.sol\\\";\\nimport { StakingImpl } from \\\"../impl/StakingImpl.sol\\\";\\nimport { SlpFactoryImpl } from \\\"../impl/SlpFactoryImpl.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n//Market contract for particular derivative\\n//Should implement asset specific methods and calculations\\n//TODO: set owner STRIPS\\ncontract IrsMarket is\\n    IMarket,\\n    IStakeble,\\n    IRewardable,\\n    MGetters,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SignedBaseMath for int256;\\n    using StorageMarketLib for StorageMarketLib.State;\\n\\n    bytes32 public constant STRIPS_ROLE = keccak256(\\\"STRIPS_ROLE\\\");\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    modifier notSuspended() {\\n        require(m_state.isSuspended == false, \\\"SUSPENDED\\\");\\n        require(address(m_state.slpToken) != address(0), \\\"SLP_NOT_CREATED\\\");\\n         _;\\n    }\\n\\n    function initialize (\\n        StorageMarketLib.InitParams memory _params,\\n        address _sushiRouter,\\n        address _dao\\n    ) public initializer\\n    {\\n        require(Address.isContract(_sushiRouter), \\\"SUSHI_ROUTER_NOT_A_CONTRACT\\\");\\n        require(address(_params.stripsProxy) != address(0), \\\"NO_STRIPS_ERROR\\\");\\n        require(_dao != address(0), \\\"ZERO_DAO\\\");\\n\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        m_state.dao = _dao;\\n        m_state.params = _params;\\n        m_state.sushiRouter = _sushiRouter;\\n\\n        m_state.createdAt = block.timestamp;\\n\\n        if (m_state.ratio == 0){\\n            m_state.ratio = SignedBaseMath.oneDecimal();\\n        }\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(OWNER_ROLE, msg.sender);\\n        _setupRole(STRIPS_ROLE, address(_params.stripsProxy));\\n    }\\n\\n    function isRewardable() external view override returns (bool)\\n    {\\n        return true;        \\n    }\\n\\n    function changeDao(address _newDao) external onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        m_state.dao = _newDao;\\n    }\\n\\n\\n    function getStrips() external view override returns (address) {\\n        return address(m_state.params.stripsProxy);\\n    }\\n\\n    function createRewarder(IRewarder.InitParams memory _params) external override onlyRole(OWNER_ROLE)\\n    {\\n        require(address(m_state.rewarder) == address(0), \\\"REWARDER_EXIST\\\");\\n\\n        m_state.rewarder = SlpFactoryImpl._rewarderFactory(_params);\\n\\n    }\\n\\n    function getRewarder() external view override returns (address)\\n    {\\n        return address(m_state.rewarder);\\n    }\\n\\n\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external override onlyRole(OWNER_ROLE) {\\n        require(address(m_state.slpToken) == address(0), \\\"LP_TOKEN_EXIST\\\");\\n\\n        \\n        m_state.slpToken = SlpFactoryImpl._slpFactory(_params,\\n                                                    \\\"SLP Token\\\",\\n                                                    \\\"SLP\\\");\\n    }\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external override onlyRole(STRIPS_ROLE) {\\n        m_state.approveStrips(_token, _amount);\\n    }\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n        \\n        if (isLong == true){\\n            m_state.totalLongs += notional;\\n            m_state._updateRatio(notional, 0);\\n        }else{\\n            m_state.totalShorts += notional;\\n            m_state._updateRatio(0, notional);\\n        }\\n\\n        return m_state.currentPrice();\\n    }\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n\\n        //TODO: check for slippage, if it's big then the trader PAY slippage\\n        if (isLong){\\n            m_state.totalLongs -= notional;\\n            require(m_state.totalLongs >= 0, \\\"TOTALLONGS_LT_0\\\");\\n            \\n            m_state._updateRatio(0 - notional, 0);\\n        }else{\\n            m_state.totalShorts -= notional;\\n            require(m_state.totalShorts >= 0, \\\"TOTALSHORTS_LT_0\\\");\\n\\n            m_state._updateRatio(0, 0 - notional);\\n        }\\n\\n        return m_state.currentPrice();\\n    }\\n\\n\\n    // SHORT: openPrice = initialPrice * (demand / (supply + notional))\\n    // LONG: openPrice = initialPrice * (demand / (supply + notional))\\n    // demand = total_longs + stackedLiquidity;\\n    // supply = total_shorts + stackedLiquidity \\n    function priceChange(\\n        int256 notional,\\n        bool isLong\\n    ) public view override returns (int256){\\n        if (isLong){\\n            return _priceChangeOnLong(notional);\\n        }\\n\\n        return _priceChangeOnShort(notional);\\n    }\\n\\n    function _priceChangeOnLong(\\n        int256 notional\\n    ) private view returns (int256){\\n\\n        int256 ratio = m_state._whatIfRatio(notional, 0);\\n\\n        return m_state.params.initialPrice.muld(ratio);\\n    }\\n\\n    function _priceChangeOnShort(\\n        int256 notional\\n    ) private view returns (int256){\\n        int256 ratio = m_state._whatIfRatio(0, notional);\\n\\n        return m_state.params.initialPrice.muld(ratio);\\n    }\\n\\n\\n    /*\\n    ********************************************************************\\n    * Stake/Unstake related functions\\n    ********************************************************************\\n    */\\n    function liveTime() external view override returns (uint){\\n        return block.timestamp - m_state.createdAt;\\n    }\\n\\n    function isInsurance() external view override returns (bool){\\n        return false;\\n    }\\n\\n    function totalStaked() external view override returns (int256)\\n    {\\n        return m_state.calcStakingLiqudity();\\n    }\\n\\n    function getSlpToken() external view override returns (address) {\\n        return address(m_state.slpToken);\\n    }\\n\\n    function getStakingToken() external view override returns (address)\\n    {\\n        return address(m_state.params.stakingToken);\\n    }\\n\\n    function getTradingToken() external view override returns (address)\\n    {\\n        return address(m_state.params.tradingToken);\\n    }\\n\\n    function ensureFunds(int256 amount) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) {\\n        int256 diff = m_state.calcTradingLiqudity() - amount;\\n        if (diff >= 0){\\n            return;\\n        }\\n\\n        //diff *= -1;\\n        StakingImpl._burnPair(m_state.slpToken,\\n                                amount);\\n    }\\n\\n    function stake(int256 amount) external override nonReentrant notSuspended {\\n        StakingImpl._stake(m_state.slpToken,\\n                            msg.sender,\\n                            amount);\\n    }\\n\\n    function unstake(int256 amount) external override nonReentrant notSuspended {\\n        StakingImpl._unstake(m_state.slpToken,\\n                            msg.sender,\\n                            amount);\\n        \\n    }\\n\\n    function externalLiquidityChanged() external override nonReentrant onlyRole(STRIPS_ROLE){\\n\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\\n        m_state.slpToken.changeTradingPnl(amount);\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\\n        m_state.slpToken.changeStakingPnl(amount);\\n    }\\n\\n\\n    /* UTILS */\\n    function changeSushiRouter(address _router) external override onlyRole(OWNER_ROLE)\\n    {\\n        require(Address.isContract(_router), \\\"SUSHI_ROUTER_NOT_A_CONTRACT\\\");\\n\\n        m_state.sushiRouter = _router;\\n\\n    }\\n    function getSushiRouter() external view override returns (address)\\n    {\\n        return m_state.sushiRouter;\\n    }\\n\\n    function getStrp() external view override returns (address)\\n    {\\n        return address(m_state.params.strpToken);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0d5a0b0dee9c907c7093f44e6531e7e61f139d7bbde710ddb9662400a62927dc\"},\"contracts/markets/State.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\n\\nabstract contract MState\\n{\\n    StorageMarketLib.State public m_state;\\n}\",\"keccak256\":\"0x409f664b11793d8b100b1ba2d0439bf859ec29c14f674ac2c59aee3eb252a1b2\"},\"contracts/oracle/AssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\n\\ncontract AssetOracle is IAssetOracle\\n{\\n    using SignedBaseMath for int256;\\n\\n    address public stripsProxy;\\n    address public keeper;\\n    uint public lastTimeStamp;\\n\\n    int256 public lastApr;\\n\\n    uint256 public lastCumulativeIndex;\\n    uint256 public lastBlockNumUpdate;\\n    int256[] public cumulativeOracleAvg;\\n\\n    int256 constant ANN_PERIOD_SEC = 31536000;\\n    \\n    modifier activeOnly() {\\n        require(lastTimeStamp != 0, \\\"NOT_ACTIVE\\\");\\n         _;\\n    }\\n\\n    modifier keeperOnly() {\\n        require(msg.sender == keeper, \\\"NOT_A_KEEPER\\\");\\n         _;\\n    }\\n\\n    constructor(\\n        address _stripsProxy,\\n        address _keeper\\n    ){\\n        require(_keeper != address(0), \\\"BROKEN_KEEPER\\\");\\n        require(Address.isContract(_stripsProxy), \\\"STRIPS_NOT_A_CONTRACT\\\");\\n\\n        stripsProxy = _stripsProxy;\\n        keeper = _keeper;\\n    }\\n\\n    function getPrice() external view override activeOnly returns (int256){\\n        return lastApr;\\n    }\\n\\n    function changeKeeper(address _keeper) external keeperOnly {\\n        keeper = _keeper;\\n    }\\n\\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\\n        if (block.timestamp > lastTimeStamp){\\n            upkeepNeeded = true;\\n        }else{\\n            upkeepNeeded = false;\\n        }\\n    }\\n\\n    function accumulateOracle() internal {\\n        int256 aprPerSec = lastApr / ANN_PERIOD_SEC;\\n\\n        if (lastCumulativeIndex != 0){\\n            aprPerSec += cumulativeOracleAvg[lastCumulativeIndex-1];\\n        }\\n\\n        cumulativeOracleAvg.push(aprPerSec);\\n        lastCumulativeIndex += 1;\\n    }\\n\\n    function performUpkeep(bytes calldata _data) public virtual override keeperOnly {\\n        require(block.timestamp > lastTimeStamp, \\\"NO_NEED_UPDATE\\\");\\n        lastTimeStamp = block.timestamp;\\n\\n        lastApr = abi.decode(_data, (int256));\\n\\n        //TODO: calc and set APY here\\n        accumulateOracle();\\n    }\\n\\n    function calcOracleAverage(uint256 fromIndex) external view virtual override activeOnly returns (int256) {        \\n        require(lastCumulativeIndex > 0, \\\"ORACLE_NEVER_UPDATED\\\");\\n\\n        int256 avg = cumulativeOracleAvg[lastCumulativeIndex-1];\\n\\n        int256 len = int256(lastCumulativeIndex - fromIndex);\\n        if (len == 0){\\n            if (fromIndex > 1){\\n                return avg - cumulativeOracleAvg[fromIndex-2];\\n            }else{\\n                return avg;\\n            }\\n        }\\n\\n        if (fromIndex != 0){\\n            avg -= cumulativeOracleAvg[fromIndex-1];\\n        }\\n\\n        return avg / len;\\n    }\\n}\",\"keccak256\":\"0x4a28f53d7638dc351eb2cff77502f722f5fd75d6439d8e61f2b708df68adddaa\"},\"contracts/reward/Rewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Rewarder contract\\n * @dev Tracks stakers' and traders' contributions, calculates and pays rewards in SRP token.\\n * Deployed per asset (per market) as a separate instance.\\n * @author Strips Finance\\n **/\\ncontract Rewarder is IRewarder {\\n    bool private lock;\\n    address public owner;\\n\\n\\n    using SignedBaseMath for int256;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_AN_OWNER\\\");\\n         _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == params.admin, \\\"NOT_AN_ADMIN\\\");\\n         _;\\n    }\\n\\n    modifier onlyStripsOrOwner() {\\n        require(msg.sender == owner || msg.sender == params.stripsProxy, \\\"NOT_AN_OWNER_OR_STRIPS\\\");\\n         _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(lock == false, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        lock = true;\\n        _;\\n        lock = false;\\n    }\\n\\n    InitParams public params;\\n\\n    // Info on each participant of the reward program (common for both traders and stakers)\\n    struct TraderInfo {\\n        bool isClaimed;\\n\\n        /*Time when the position was opened. Use that to detect wash trades */\\n        uint256 lastTradeTime;\\n\\n        /*Number of period when the trader did his last trade */\\n        uint256 lastPeriod;\\n        \\n        /* The value of total AMM trading volume for lastPeriod */\\n        int256 accInitial;\\n        \\n        /*Cummulative trader's trade volume for the period */\\n        int256 periodTradingVolume;\\n\\n        /*Total current reward, it's not go to 0 if trader goes inactive, as you can claim at anytime */\\n        int256 reward;\\n    }\\n\\n    struct StakerInfo{\\n        uint256 timeInitial;\\n        int256 accInitial;\\n\\n        int256 slp;\\n        int256 reward;\\n    }\\n\\n    int256 public totalTradingRewardsClaimed;\\n    int256 public totalStakingRewardsClaimed;\\n\\n    uint256 public currentPeriod;\\n    uint256 public startTime;\\n\\n    /*Staking */\\n    uint256 public lastStakeTime;\\n    int256 public supplyStakeTotal;\\n    int256 public accStakeTotal;\\n\\n    /*Trading */\\n    uint256 public lastTradeTime;\\n    int256 public tradingVolumeTotal;\\n    int256 public accTradeTotal;\\n\\n\\n    mapping(uint256 => int256) public accPerPeriod;\\n    mapping(address => TraderInfo) public traders;\\n    mapping(address => StakerInfo) public stakers;\\n\\n    constructor(\\n        InitParams memory _params\\n    ) {\\n        params = _params;\\n        owner = msg.sender;\\n        startTime = 0;\\n\\n        totalTradingRewardsClaimed = 0;\\n        totalStakingRewardsClaimed = 0;\\n    }\\n\\n    function currentTradingReward() external view override returns(int256)\\n    {\\n        return params.rewardTotalPerSecTrader;\\n    }\\n\\n    function currentStakingReward() external view override returns (int256)\\n    {\\n        return params.rewardTotalPerSecStaker;\\n    }\\n\\n\\n    function changeTradingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (!isSwitched && tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accTradeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        }\\n\\n        params.rewardTotalPerSecTrader = _newRewardPerSec;\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    function changeStakingReward(int256 _newRewardPerSec) external onlyAdmin\\n    {\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        params.rewardTotalPerSecStaker = _newRewardPerSec;\\n        lastStakeTime = block.timestamp;\\n    }\\n\\n\\n    function changeDao(address _newDao) external onlyAdmin\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        params.dao = _newDao;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyAdmin\\n    {\\n        require(_newOwner != address(0), \\\"ZERO_OWNER\\\");\\n        owner = _newOwner;\\n    }\\n\\n    function changeAdmin(address _newAdmin) external onlyAdmin\\n    {\\n        require(_newAdmin != address(0), \\\"ZERO_ADMIN\\\");\\n        params.admin = _newAdmin;\\n    }\\n\\n\\n    /**\\n     * @dev Should be called each time someone stake/unstake.\\n     * @param _staker address of the staker\\n     **/\\n    function rewardStaker(address _staker) external override nonReentrant onlyStripsOrOwner {\\n        /*Accumulare reward for previous period and update accumulator */\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        /*Accumulate for the previous period if there was any supply */\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n        lastStakeTime = block.timestamp;\\n        supplyStakeTotal = int256(params.slpToken.totalSupply());\\n\\n        /*Update staker's stake*/\\n        stakers[_staker].accInitial = accStakeTotal;\\n        stakers[_staker].slp = int256(params.slpToken.balanceOf(_staker));\\n        stakers[_staker].timeInitial = block.timestamp;\\n    }\\n\\n    function claimStakingReward(address _staker) external override {\\n\\n        /*Accumulare reward and update staker's initial */\\n        //stakers[_staker].reward = totalStakerReward(_staker).muld(params.rewardTotalPerSecStaker);\\n        stakers[_staker].reward = totalStakerReward(_staker);\\n\\n        if (stakers[_staker].reward <= 0){\\n            return;\\n        }\\n\\n        int256 accInstant = accStakeTotal;\\n        if (supplyStakeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n        }\\n\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _staker, \\n                                    uint(stakers[_staker].reward));\\n        \\n        emit StakingRewardClaimed(\\n            _staker, \\n            stakers[_staker].reward\\n        );\\n\\n        totalStakingRewardsClaimed += stakers[_staker].reward;\\n\\n        /*Reset reward and time*/\\n        stakers[_staker].reward = 0;\\n        stakers[_staker].timeInitial = block.timestamp;\\n        stakers[_staker].accInitial = accInstant;\\n    }\\n\\n    function totalStakerReward(address _staker) public view override returns (int256 reward){\\n        /*If staker didn't stake he can't have reward yet */\\n        if (stakers[_staker].timeInitial == 0){\\n            return 0;\\n        }\\n\\n        /*if supply is 0 it means that everyone usntake and no more accumulation */\\n        if (supplyStakeTotal <= 0){\\n            return stakers[_staker].reward;\\n        }\\n\\n        /*Accumulate reward till current time */\\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\\n        int256 accInstant = accStakeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\\n\\n        return stakers[_staker].reward + stakers[_staker].slp.muld(accInstant - stakers[_staker].accInitial);\\n    }\\n\\n\\n    function totalTradeReward(address _trader) public view override returns (int256 reward){\\n        uint256 traderLastTrade = traders[_trader].lastTradeTime;\\n\\n        /*If trader didn't or no one trade then it's 0 */\\n        if (traderLastTrade == 0 || lastTradeTime == 0){\\n            return 0;\\n        }\\n\\n        /* What's the number of the current period? */\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /*Which period the trader last trade */\\n        uint256 traderLastPeriod = traders[_trader].lastPeriod;\\n\\n        int256 accInstant = 0;\\n        /* Accumulate reward for the previous period - ONLY till the end of period */\\n        if (_period > traderLastPeriod){\\n            accInstant = accPerPeriod[traderLastPeriod];\\n            if (accInstant == 0){\\n                /* updatePeriod never called. Need to calc accumulator first */\\n                /* |t(1)----period1---(traderLastTrade)----(lastTradeTime)<----timeDiff---->|(end of period)------call HERE| */\\n\\n                if (tradingVolumeTotal <= 0){\\n                    return traders[_trader].reward;\\n                }\\n\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accInstant = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n            }\\n\\n            int256 _newReward = traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n\\n            return traders[_trader].reward + _newReward;\\n        }\\n\\n        /*It's the same period*/\\n        if (tradingVolumeTotal <= 0){\\n            /*no one trade yet*/\\n            return traders[_trader].reward;\\n        }\\n        \\n        \\n        int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n        accInstant = accTradeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n        return traders[_trader].reward + traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\\n    }\\n\\n\\n    \\n    /**\\n     * @dev Should be called each time trader trader.\\n     * @param _trader address of the trader\\n     * @param _notional current trade position size\\n     **/\\n    function rewardTrader(address _trader, int256 _notional) external override nonReentrant onlyStripsOrOwner {\\n        if (startTime == 0){\\n            /*Setup start time for all periods once first trader ever happened*/\\n            startTime = block.timestamp;\\n            currentPeriod = 0;\\n        }\\n\\n        int256 boostedNotional = _notional.muld(_booster(_trader));\\n        \\n        if ((block.timestamp - traders[_trader].lastTradeTime) < params.washTime && traders[_trader].isClaimed == false){\\n            /*If it's a wash trade just update period and return */\\n            _updatePeriod(boostedNotional);\\n\\n            lastTradeTime = block.timestamp;\\n            return;\\n        }\\n        \\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        bool isSwitched = _updatePeriod(boostedNotional);\\n        if (currentPeriod != traders[_trader].lastPeriod){\\n            isSwitched = true;\\n        }\\n\\n        /*Update trader */\\n        if (isSwitched){\\n            /*Reset volume */\\n            traders[_trader].periodTradingVolume = boostedNotional;\\n        }else{\\n            /*Accumulate trading volume for trader */\\n            traders[_trader].periodTradingVolume += boostedNotional;\\n        }\\n\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = false;\\n\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].accInitial = accTradeTotal;\\n\\n        lastTradeTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Send all current reward to the trader\\n     **/\\n    function claimTradingReward(address _trader) external override {\\n\\n        //Accumulate any reward till this taime\\n        //traders[_trader].reward = totalTradeReward(_trader).muld(params.rewardTotalPerSecTrader);\\n        traders[_trader].reward = totalTradeReward(_trader);\\n\\n        if (traders[_trader].reward <= 0){\\n            return;\\n        }\\n\\n        bool isSwitched = _updatePeriod(0);\\n\\n        if (isSwitched){\\n            traders[_trader].periodTradingVolume = 0;\\n        }\\n\\n        /*move accumulator */\\n        int256 accInstant = accTradeTotal;\\n        \\n        if (tradingVolumeTotal > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n        }\\n\\n        SafeERC20.safeTransferFrom(params.strpToken, \\n                                    params.dao, \\n                                    _trader, \\n                                    uint(traders[_trader].reward));\\n\\n        emit TradingRewardClaimed(\\n            _trader,\\n            traders[_trader].reward\\n        );\\n\\n\\n        totalTradingRewardsClaimed += traders[_trader].reward;\\n\\n        /*Reset all params */\\n        traders[_trader].accInitial = accInstant;\\n        traders[_trader].lastTradeTime = block.timestamp;\\n        traders[_trader].isClaimed = true;\\n        traders[_trader].lastPeriod = currentPeriod;\\n        traders[_trader].reward = 0;\\n\\n    }\\n\\n    /**\\n     * @dev Calls on each actions\\n     * @param _notional current trade notional\\n     * @return isSwitched true if period switched\\n     **/\\n    function _updatePeriod(int256 _notional) internal returns (bool isSwitched) {\\n        isSwitched = false;\\n\\n        /* _periods are not incremented by ONE.  It can be 1,2,5,8,12 Depends on when the last trade happened*/\\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\\n\\n        /* Reset period */\\n        if (_period > currentPeriod){\\n            if (lastTradeTime != 0){\\n                /* Calc the rest and save */\\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\\n                accPerPeriod[currentPeriod] = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\\n\\n                /* Reset total AMM trading volume and accumulator */\\n                tradingVolumeTotal = 0;\\n                accTradeTotal = 0;\\n\\n            } //else: //It's the first trade ever, just setup period\\n\\n            isSwitched = true;\\n            /*Switch period */\\n            currentPeriod = _period;\\n\\n        }\\n\\n        /* If it's the trade then change volume and accumulate it */\\n        if (_notional > 0){\\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n            if (lastTradeTime != 0 && tradingVolumeTotal > 0){\\n                // If it's not the first trade in period OR the first trade EVER\\n                int256 timeDiff = int256(block.timestamp - lastTradeTime);\\n                accTradeTotal += (timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal));\\n            }\\n            tradingVolumeTotal += _notional;\\n        }\\n    }\\n\\n    function _booster(address _trader) internal returns (int256){\\n        int256 supply = int256(params.slpToken.totalSupply());\\n        if (supply <= 0) {\\n            return SignedBaseMath.oneDecimal();\\n        }\\n        return SignedBaseMath.oneDecimal() + int256(params.slpToken.balanceOf(_trader)).divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb3a36161c8ca25e23e1389aa2e77701981cc55bf4569d2aee48c9a64a6b1573b\"},\"contracts/strips/State.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/*\\n    All new variables should be updated here\\n    The new versions of Strips MUST inherit this \\n    to keep consistent on storage layout \\n */\\nabstract contract SState\\n{\\n    address public pinger;\\n    bool internal lock;\\n    StorageStripsLib.State public g_state;\\n}\",\"keccak256\":\"0x2b858cd83383da4a1b43f44441bf827e761807159f94528409514894b8503d47\"},\"contracts/strips/Strips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IrsMarket } from \\\"../markets/IrsMarket.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\n\\nimport { StripsViewImpl } from \\\"../impl/StripsViewImpl.sol\\\";\\nimport { StripsAdminImpl } from \\\"../impl/StripsAdminImpl.sol\\\";\\nimport { StripsStateImpl } from \\\"../impl/StripsStateImpl.sol\\\";\\n\\nimport { TradeImpl } from \\\"../impl/TradeImpl.sol\\\";\\n\\nimport { SState } from \\\"./State.sol\\\";\\n\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { StorageMarketLib } from \\\"../lib/StorageMarket.sol\\\";\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\n\\ncontract Strips is\\n    SState,\\n    IStrips,\\n    OwnableUpgradeable\\n{\\n    using StorageStripsLib for StorageStripsLib.State;\\n    using SignedBaseMath for int256;\\n    using Address for address;\\n\\n    event PingDone(\\n        uint indexed current,\\n        uint indexed next\\n    );\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(lock == false, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        lock = true;\\n        _;\\n        lock = false;\\n    }\\n\\n\\n    modifier notSuspended() {\\n        require(g_state.isSuspended == false, \\\"SUSPENDED\\\");\\n        require(block.timestamp <= g_state.lastAlive + g_state.keepAliveInterval, \\\"PING_NOT_FOUND\\\");\\n         _;\\n    }\\n\\n    modifier pingerOnly(){\\n        require(msg.sender == pinger, \\\"NOT_A_PINGER\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        StorageStripsLib.RiskParams memory _riskParams,\\n        IERC20 _tradingToken,\\n        uint256 _keepAliveInterval,\\n        address _dao,\\n        address _lpOracle\\n    ) public initializer {\\n        require(_dao != address(0), \\\"ZERO_DAO\\\");\\n        require(Address.isContract(address(_tradingToken)), \\\"TRADING_TOKEN_NOT_A_CONTRACT\\\");\\n\\n        __Ownable_init();\\n        lock = false;\\n\\n        g_state.riskParams = _riskParams;\\n        g_state.tradingToken = _tradingToken;\\n\\n        g_state.lastAlive = block.timestamp;\\n        g_state.keepAliveInterval = _keepAliveInterval;\\n\\n        g_state.dao = _dao;\\n        g_state.lpOracle = _lpOracle;\\n\\n        pinger = msg.sender;\\n    }\\n\\n    function getLpOracle() external view override returns (address)\\n    {\\n        return g_state.lpOracle;\\n    }\\n\\n\\n    function suspendChange(bool _suspend) external onlyOwner\\n    {\\n        g_state.isSuspended = _suspend;\\n    }\\n\\n    function changePinger(address _newPinger) external onlyOwner\\n    {\\n        require(_newPinger != address(0), \\\"ZERO_PINGER\\\");\\n        pinger = _newPinger;\\n    }\\n\\n\\n    function changeDao(address _newDao) external onlyOwner\\n    {\\n        require(_newDao != address(0), \\\"ZERO_DAO\\\");\\n        g_state.dao = _newDao;\\n    }\\n\\n    function adminDispatcher(IStrips.AdminActionArgs memory args) external onlyOwner\\n    {\\n        StripsAdminImpl.dispatcher(g_state, \\n                                    args);\\n    }\\n\\n    /*\\n        FOR TEST only. \\n        todo:removeonproduction\\n\\n     */\\n    function check_insurance() external\\n    {\\n        StripsStateImpl._check_insurance(g_state);\\n    }\\n\\n    /*\\n        FOR TEST only. \\n        todo:removeonproduction\\n\\n     */\\n    function check_trader(address account, address market) external \\n    {\\n        StripsStateImpl._check_trader(g_state, \\n                                account,\\n                                IMarket(market));\\n    }\\n\\n    function viewDispatcher(IStrips.ViewActionArgs memory args) external view returns (bytes memory)\\n    {\\n        return StripsViewImpl.dispatcher(g_state, \\n                                        args);\\n    }\\n\\n    function stateDispatcher(IStrips.StateActionArgs memory args) external\\n    {\\n        return StripsStateImpl.dispatcher(g_state, \\n                                            args);\\n    }\\n\\n\\n    function getTradingInfo(address _account) external view returns (IStrips.TradingInfo memory tradingInfo) {\\n        return StripsViewImpl.getTradingInfo(g_state, _account);\\n    }\\n\\n    function getStakingInfo(address _account) public view returns (IStrips.StakingInfo memory stakingInfo) {\\n        return StripsViewImpl.getStakingInfo(g_state, _account);\\n    }\\n\\n    function payKeeperReward(address keeper) external override {\\n        //TODO: implement\\n        StripsStateImpl._payKeeperReward(g_state,\\n                                    keeper);\\n    }\\n\\n    /**\\n     * @notice Sets timestamp of last call for the availability of contract\\n     * methods when interacting with keepers. The call can only be made by\\n     * the user who has PINGER_ROLE\\n     */\\n    function ping() external override pingerOnly\\n    {\\n       g_state.lastAlive = block.timestamp;\\n       \\n       emit PingDone(\\n            g_state.lastAlive,\\n            g_state.lastAlive + g_state.keepAliveInterval\\n       );\\n    }\\n\\n    function assetPnl(address _asset) external view virtual override returns (int256){\\n        StorageStripsLib.Position storage ammPosition = g_state.checkPosition(IMarket(_asset), address(_asset));\\n\\n        if (ammPosition.isActive == false){\\n            return 0;\\n        }\\n\\n        return PnlLib.getAmmTotalPnl(g_state, \\n                                        IMarket(_asset), \\n                                        ammPosition);\\n    }\\n\\n    function getPositionsCount() external view override returns (uint)\\n    {\\n        return g_state.allIndexes.length;\\n    }\\n\\n\\n      /**\\n        * @dev Return the list of liquidateable positions. NOT Efficien - rewrite for more efficient way\\n        * Used by LiquidationKeeper to find liquidateable positions and efficiently iterate over them.\\n        * @param _start position index to start from\\n        * @param _length the max length of returned list.\\n        * @return The list of Meta Data on position that is enough for liquidation\\n        **/\\n    function getPositionsForLiquidation(\\n        uint _start, \\n        uint _length\\n    ) external view override returns (StorageStripsLib.PositionMeta[] memory) {\\n        // If requested length goes out of array indexes range,\\n        // enforce the _end to be the last element of array.\\n\\n        \\n        if (g_state.allIndexes.length == 0){\\n            StorageStripsLib.PositionMeta[] memory liqPositions = new StorageStripsLib.PositionMeta[](1);\\n            return liqPositions;\\n        }\\n\\n        uint256 _end;\\n        if ( _start + _length > g_state.allIndexes.length ) {\\n            _end = g_state.allIndexes.length - 1;\\n        } else {\\n            _end = _start + _length -  1;\\n        }\\n        // Since dynamic array can't be returned directly,\\n        // create static array of the result size and assign values to it.\\n        // So we count the total amount of liquidateable positions in the given range of indexes first\\n        uint count = _end - _start + 1;\\n        uint j = 0;\\n        StorageStripsLib.PositionMeta[] memory liqPositions = new StorageStripsLib.PositionMeta[](count);\\n        for (uint256 i = _start; i <= _end; i++) {\\n            uint posIndex = g_state.allIndexes[i];  // get posIndex first\\n\\n            /*Check PositionMeta for current posIndex */\\n            if (g_state.indexToPositionMeta[posIndex].isActive){\\n                IMarket _market = g_state.indexToPositionMeta[posIndex]._market;\\n\\n                StorageStripsLib.Position storage _position = g_state.checkPosition(_market, g_state.indexToPositionMeta[posIndex]._account);\\n                (,int256 marginRatio) = PnlLib.getMarginRatio(g_state,\\n                                                            _market,\\n                                                            _position,\\n                                                            SignedBaseMath.oneDecimal(),\\n                                                            false);  // based on Exit Price always\\n                \\n                /*We need to liquidate this position */\\n                if (marginRatio <= g_state.getLiquidationRatio()){\\n                    liqPositions[j] = g_state.indexToPositionMeta[posIndex];\\n                    j += 1;\\n                }\\n            }\\n        }\\n\\n        return liqPositions;\\n    }\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external override nonReentrant notSuspended {\\n        TradeImpl.closePosition(g_state,\\n                                _market,\\n                                _closeRatio,\\n                                _slippage);\\n\\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\\n        emit LogPositionUpdate(\\n            msg.sender,\\n            _market,\\n            PositionParams({\\n                isLong:position.isLong,\\n                isActive:position.isActive,\\n                isLiquidated:position.isLiquidated,\\n                notional:position.notional,\\n                collateral:position.collateral,\\n                initialPrice:position.initialPrice\\n            }));\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external override nonReentrant notSuspended {\\n        TradeImpl.openPosition(g_state,\\n                                TradeImpl.PositionParams({\\n                                    _market: _market,\\n                                    _account: msg.sender,\\n                                    _collateral: collateral,\\n                                    _leverage: leverage,\\n                                    _isLong: isLong,\\n                                    _slippage: slippage\\n                                }));\\n\\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\\n        emit LogPositionUpdate(\\n            msg.sender,\\n            _market,\\n            PositionParams({\\n                isLong:position.isLong,\\n                isActive:position.isActive,\\n                isLiquidated:position.isLiquidated,\\n                notional:position.notional,\\n                collateral:position.collateral,\\n                initialPrice:position.initialPrice\\n            }));\\n    }\\n\\n    function liquidatePosition(IMarket _market, \\n                                address account) external override nonReentrant notSuspended\\n    {\\n        TradeImpl.liquidatePosition(g_state,\\n                                    _market,\\n                                    account);\\n\\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, account);\\n        emit LogPositionUpdate(\\n            account,\\n            _market,\\n            PositionParams({\\n                isLong:position.isLong,\\n                isActive:position.isActive,\\n                isLiquidated:position.isLiquidated,\\n                notional:position.notional,\\n                collateral:position.collateral,\\n                initialPrice:position.initialPrice\\n            }));\\n    }\\n\\n    function changeCollateral(IMarket _market,\\n                            int256 collateral,\\n                            bool isAdd) external override nonReentrant notSuspended{\\n        if (isAdd){\\n            TradeImpl.addCollateral(g_state,\\n                            _market,\\n                            collateral);\\n        }else{\\n            TradeImpl.removeCollateral(g_state,\\n                            _market,\\n                            collateral);\\n        }\\n\\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\\n        emit LogPositionUpdate(\\n            msg.sender,\\n            _market,\\n            PositionParams({\\n                isLong:position.isLong,\\n                isActive:position.isActive,\\n                isLiquidated:position.isLiquidated,\\n                notional:position.notional,\\n                collateral:position.collateral,\\n                initialPrice:position.initialPrice\\n            }));\\n    }\\n}\\n\",\"keccak256\":\"0xb38197f7ca2d610285ae56de221bd020f1523f1f361c0e1d86d8dee44e044879\"},\"contracts/token/SLPToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title SLP token using for adding \\\"stakebility\\\" to any asset\\n * @dev created by the asset. All calls for changing PNL are ownable:\\n * Have 2 tokens by default:\\n *  staking - the token that is using for staking to Asset (UNIV2 pair by default for the current version)\\n *  trading - the token that is using for accumulating profit. By default it's USDC\\n * @author Strips Finance\\n **/\\ncontract SLPToken is \\n    IStripsLpToken,\\n    ERC20, \\n    ReentrancyGuard,\\n    Ownable\\n{ \\n    using SignedBaseMath for int256;\\n\\n    // Developed to be able to track 2-tokens asset\\n    struct StakerData {\\n        bool exist;\\n\\n        //save initial staking/trading cummulative PNL on staker's stake event.\\n        int256 initialStakingPnl;\\n        int256 initialTradingPnl;\\n        \\n        uint256 initialBlockNum;\\n        uint256 initialTimeStamp;\\n\\n        //Save the current staking/trading unrealized profit when the staker stake 2+ time.\\n        int256 unrealizedStakingProfit;\\n        int256 unrealizedTradingProfit;\\n    }\\n\\n    int256 public prevStakingPnl;\\n    int256 public prevTradingPnl;\\n\\n    int256 public cummulativeStakingPnl;\\n    int256 public cummulativeTradingPnl;\\n    \\n    //For tracking trading/staking \\\"growth\\\", should be changed by the OWNER only \\n    int256 public cumTradingPNL;\\n    int256 public cumStakingPNL;\\n        \\n    \\n    //All data setup on init\\n    TokenParams private params;\\n    mapping (address => StakerData) public stakers;\\n\\n    /*To not have stack too deep error */\\n    struct InternalCalcs {\\n        int256 amount;\\n        int256 assetPnl;\\n        int256 currentTradingPnl;\\n        int256 currentStakingPnl;\\n\\n        int256 instantCummulativeStakingPnl;\\n        int256 isntantCummulativeTradingPnl;\\n\\n        int256 unstakeShare;\\n        int256 feeShare;\\n    }\\n\\n\\n    constructor(TokenParams memory _params,\\n                string memory _name,\\n                string memory _symbol) \\n                ERC20(_name, _symbol) \\n    {\\n        params = _params;\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumTradingPNL += amount;\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumStakingPNL += amount;\\n    }\\n\\n    function claimProfit(address staker, uint256 amount) public override onlyOwner returns (int256 stakingProfit, int256 tradingProfit)\\n    {\\n        ProfitParams memory profit = calcProfit(staker, amount);\\n        if (profit.stakingFee > 0){\\n            changeStakingPnl(profit.stakingFee);\\n        }\\n\\n        if (profit.lpProfit > 0){\\n            changeStakingPnl(profit.lpProfit);\\n        }\\n\\n        if (profit.usdcLoss < 0){\\n            changeTradingPnl(profit.usdcLoss);\\n        }\\n\\n\\n        burn(staker, amount);\\n\\n        stakingProfit = profit.unstakeAmountLP;\\n        tradingProfit = profit.unstakeAmountERC20;\\n    }\\n\\n\\n    function getPairPrice() external view override returns (int256)\\n    {\\n        return IUniswapLpOracle(params.pairOracle).getPrice();\\n    }\\n\\n    function getBurnableToken() external view override returns (address)\\n    {\\n        return params.stakingToken;\\n    }\\n\\n    function getParams() external view override returns (TokenParams memory)\\n    {   \\n        return params;\\n    }\\n\\n    function checkOwnership() external view override onlyOwner returns (address) {\\n        //DO nothing, just revert if call is not from owner\\n\\n        return owner();\\n    }\\n\\n    function totalPnl() external view override returns (int256 usdcTotal, int256 lpTotal)\\n    {\\n        int256 unrealizedPnl = IStrips(params.stripsProxy).assetPnl(owner());\\n\\n        usdcTotal = unrealizedPnl + cumTradingPNL;\\n        lpTotal = cumStakingPNL;\\n    }\\n\\n    function stakingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        current = cumStakingPNL;\\n\\n        if (_totalSupply == 0){\\n            cummulative = cummulativeStakingPnl + current;\\n        } else {\\n            cummulative = cummulativeStakingPnl + (current - prevStakingPnl).divd(_totalSupply);\\n        }\\n\\n    }\\n\\n    function tradingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        int256 assetPnl = IStrips(params.stripsProxy).assetPnl(_owner);\\n\\n        current = assetPnl + cumTradingPNL;\\n        \\n        if (_totalSupply == 0){\\n            cummulative = cummulativeTradingPnl + current;\\n        } else {\\n            cummulative = cummulativeTradingPnl + (current - prevTradingPnl).divd(_totalSupply);\\n        }\\n    }\\n\\n\\n    function accumulatePnl() public override onlyOwner {\\n        int256 currentStakingPnl = 0;\\n        int256 currentTradingPnl = 0;\\n\\n        (currentStakingPnl, cummulativeStakingPnl) = stakingPnl();\\n        prevStakingPnl = currentStakingPnl;\\n\\n\\n        (currentTradingPnl, cummulativeTradingPnl) = tradingPnl();\\n        prevTradingPnl = currentTradingPnl;\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function saveProfit(address staker) public override onlyOwner {\\n        int256 tokenBalance = int256(balanceOf(staker));\\n        \\n        stakers[staker].unrealizedStakingProfit += (cummulativeStakingPnl - stakers[staker].initialStakingPnl).muld(tokenBalance);\\n        stakers[staker].unrealizedTradingProfit += (cummulativeTradingPnl - stakers[staker].initialTradingPnl).muld(tokenBalance);\\n    }\\n\\n\\n    /*All checks should be made inside caller */\\n    function mint(address staker, uint256 amount) public override onlyOwner \\n    {        \\n        stakers[staker] = StakerData({\\n            exist: true,\\n\\n            initialStakingPnl:cummulativeStakingPnl,\\n            initialTradingPnl:cummulativeTradingPnl,\\n    \\n            initialBlockNum:block.number,\\n            initialTimeStamp:block.timestamp,\\n\\n            unrealizedStakingProfit: stakers[staker].unrealizedStakingProfit,\\n            unrealizedTradingProfit: stakers[staker].unrealizedTradingProfit\\n        });\\n\\n        _mint(staker, amount);\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function burn(address staker, uint256 amount) public override onlyOwner \\n    {\\n        int256 burnShare = int256(amount).divd(int256(balanceOf(staker)));\\n\\n        stakers[staker].unrealizedStakingProfit -= (stakers[staker].unrealizedStakingProfit.muld(burnShare));\\n        stakers[staker].unrealizedTradingProfit -= (stakers[staker].unrealizedTradingProfit.muld(burnShare));\\n\\n        _burn(staker, amount);\\n\\n        if (balanceOf(staker) == 0){\\n            delete stakers[staker];\\n        }\\n    }\\n\\n    function canUnstake(address staker, uint256 amount) external view override\\n    {\\n        require(stakers[staker].exist, \\\"NO_SUCH_STAKER\\\");\\n        require(block.number > stakers[staker].initialBlockNum, \\\"UNSTAKE_SAME_BLOCK\\\");\\n        require(amount > 0 && balanceOf(staker) >= amount, \\\"WRONG_UNSTAKE_AMOUNT\\\");\\n    }\\n\\n        \\n\\n\\n    /**\\n     * @dev Major view method that is using by frontend to view the current profit\\n     *  Here is how we show data on frontend (check ProfitParams below):\\n     *  1 - On major screen with the list of all stakes:\\n     *       totalStaked = 100 Lp tokens  (shows in LP amount of LP tokens user staked)\\n     *       stakingProfit (LP) = 10 LP ($10)  (shows the profit or loss that staker earned or lost in LP. Need to convert to USDC using profit.lpPrice)\\n     *       unstakeAmountERC20 (USDC) = -$100  (shows the profit or loss that staker earned in USDC)\\n     *       stakingFee = 1 LP (days left to 0 = penaltyLeft)\\n     *\\n     *  2 - on popup when staker select THE EXACT amount of SLP to unstake:\\n     *       profit.unstakeAmountLP (LP) = 100 LP ($100)   The amount that the staker will receive in LP, including collateral\\n     *       profit.unstakeAmountERC20 (USDC) = $10 | 0.   The amount that the staker will receive in USDC. Will be 0 if pnl is negative.\\n     *       _ hide the penalty\\n     *\\n     * @param staker staker address\\n     * @param amount amount of SLP tokens for unstake\\n     * @return profit ProfitParams all data that is required to show the profit, check IStripsLpToken interface\\n     *       struct ProfitParams\\n     *           // LP unstaked amount \\n     *           int256 unstakeAmountLP;\\n     *\\n     *           //USDC unstaked amount  \\n     *           int256 unstakeAmountERC20;\\n     *\\n     *          //LP profit or loss not including collateral\\n     *           int256 stakingProfit;   \\n     *           \\n     *           //Fee that is paid if unstake in less than 7 days (paid in LP tokens)\\n     *           int256 stakingFee;\\n     *\\n     *          //Time in seconds left untill penalty will become 0\\n     *           int256 penaltyLeft;\\n     *\\n     *           //Collateral in LP that staker staked\\n     *           uint256 totalStaked;\\n     *\\n     *           //The current LP price (in USDC), using for conversion\\n     *           int256 lpPrice;\\n     **/\\n    function calcProfit(address staker, uint256 amount) public view override returns (ProfitParams memory profit)\\n    {\\n        profit.totalStaked = balanceOf(staker);\\n        require(amount > 0 && amount <= profit.totalStaked, \\\"WRONG_AMOUNT\\\");\\n        \\n        InternalCalcs memory internalCalcs;\\n        internalCalcs.amount = int256(amount);\\n\\n        (internalCalcs.currentStakingPnl, \\n            internalCalcs.instantCummulativeStakingPnl) = stakingPnl();\\n        \\n        (internalCalcs.currentTradingPnl, \\n            internalCalcs.isntantCummulativeTradingPnl) = tradingPnl();\\n\\n        internalCalcs.unstakeShare = internalCalcs.amount.divd(int256(profit.totalStaked));\\n        profit.stakingProfit = internalCalcs.amount.muld(internalCalcs.instantCummulativeStakingPnl - stakers[staker].initialStakingPnl) +  internalCalcs.unstakeShare.muld(stakers[staker].unrealizedStakingProfit);\\n        profit.unstakeAmountERC20 = internalCalcs.amount.muld(internalCalcs.isntantCummulativeTradingPnl - stakers[staker].initialTradingPnl) + internalCalcs.unstakeShare.muld(stakers[staker].unrealizedTradingProfit);\\n\\n        (internalCalcs.feeShare, \\n            profit.penaltyLeft) = calcFeeLeft(staker);\\n\\n        profit.stakingFee = internalCalcs.amount.muld(internalCalcs.feeShare);\\n        profit.unstakeAmountLP = internalCalcs.amount + profit.stakingProfit - profit.stakingFee;\\n\\n        profit.lpPrice = IUniswapLpOracle(params.pairOracle).getPrice();\\n        if (profit.unstakeAmountERC20 < 0){\\n            profit.usdcLoss = profit.unstakeAmountERC20;\\n            profit.lpProfit = -1 * profit.usdcLoss.divd(profit.lpPrice);\\n            profit.unstakeAmountLP = profit.unstakeAmountLP  - profit.lpProfit;\\n\\n            profit.unstakeAmountERC20 = 0;\\n            \\n        }\\n\\n    }\\n    \\n\\n    /*\\n        2% fee during 7 days now.\\n    */\\n    function calcFeeLeft(\\n        address staker\\n    ) public view override returns (int256 feeShare, \\n                                int256 periodLeft)\\n    {\\n        feeShare = 0;\\n        periodLeft = 0;\\n\\n        int256 time_elapsed = int256(block.timestamp - stakers[staker].initialTimeStamp);\\n\\n        if (time_elapsed >= params.penaltyPeriod){\\n            return (0, 0);\\n        }\\n        \\n        feeShare = params.penaltyFee - params.penaltyFee.divd(params.penaltyPeriod.toDecimal()).muld(time_elapsed.toDecimal());\\n        periodLeft = params.penaltyPeriod - time_elapsed;\\n    }\\n\\n    function setPenaltyFee(int256 _fee) external override onlyOwner{\\n        require(_fee >= 0, \\\"WRONG_FEE\\\");\\n\\n        params.penaltyFee = _fee;\\n    }\\n\\n    function setParams(TokenParams memory _params) external override onlyOwner{\\n        params = _params;\\n    }\\n\\n\\n    function transfer(address recipient, uint256 amount) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(msg.sender, recipient, amount);\\n\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(sender, recipient, amount);\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferStake(address sender, address recipient, uint256 amount) private {\\n        require(stakers[sender].exist, \\\"STAKER_NOT_FOUND\\\");\\n        require(stakers[recipient].exist == false, \\\"MERGE_NOT_POSSIBLE\\\");\\n\\n        int256 transferShare = int256(amount / balanceOf(sender));\\n\\n        stakers[recipient] = stakers[sender];\\n\\n        int256 stakingProfit = transferShare * stakers[sender].unrealizedStakingProfit;\\n        int256 tradingProfit = transferShare * stakers[sender].unrealizedTradingProfit;\\n\\n        if (stakingProfit != 0){\\n            stakers[sender].unrealizedStakingProfit -= stakingProfit;\\n            stakers[recipient].unrealizedStakingProfit = stakingProfit;\\n        }\\n\\n        if (tradingProfit != 0){\\n            stakers[sender].unrealizedTradingProfit -= tradingProfit;\\n            stakers[recipient].unrealizedTradingProfit = tradingProfit;\\n        }\\n\\n        if (amount == balanceOf(sender)){\\n            delete stakers[sender];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1578fe2e4327eebd21ad4dc9d774d8719a147144de2dbde25fd1a6d10b31baef\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135cd806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639d90e4c8116100de578063d66d8b9b11610097578063e5f4a5d411610071578063e5f4a5d4146103f3578063e82eefe314610406578063ef6d4f3c1461040e578063f2fde38b1461042157600080fd5b8063d66d8b9b146103bc578063d8826fec146103cf578063df3f1ecc146103e257600080fd5b80639d90e4c814610330578063aa4704f314610343578063b02624b214610363578063b42ce2fe14610376578063b63403a014610389578063b97399f5146103a957600080fd5b80635c36b1861161014b5780637dfcd9e5116101255780637dfcd9e51461023f57806381ac79c9146102d85780638be7febc146102f85780638da5cb5b1461030b57600080fd5b80635c36b1861461021c57806364afa24c14610224578063715018a61461023757600080fd5b80630860f3b0146101935780630d6e6237146101a85780630e947bd8146101bb5780631ca3b0cb146101e457806347e1c082146101f6578063586e848f14610209575b600080fd5b6101a66101a13660046125ca565b610434565b005b6101a66101b6366004612787565b6104cd565b6101ce6101c93660046125ca565b61069c565b6040516101db9190613076565b60405180910390f35b6007545b6040519081526020016101db565b6101a6610204366004612602565b61074a565b6101a66102173660046126e4565b6107c8565b6101a6610993565b6101e86102323660046125ca565b610a1c565b6101a6610a5b565b6001546009546040805160e081018252600c548152600d546020820152600e5491810191909152600f546060820152601054608082015260115460a082015260125460c08201526013546014546015546016546017546102c3976001600160a01b0380821698600160a01b90920460ff169791969195918116949181169391921689565b6040516101db99989796959493929190612d15565b6102eb6102e63660046127d3565b610a91565b6040516101db9190612e46565b6101a6610306366004612a12565b610b22565b604b546001600160a01b03165b6040516001600160a01b0390911681526020016101db565b6101a661033e3660046127d3565b610b8f565b6103566103513660046125ca565b610bf3565b6040516101db9190612fa7565b6101a661037136600461284e565b610c9b565b6101a66103843660046126f6565b610e2f565b61039c610397366004612c01565b61104e565b6040516101db9190612dd4565b600054610318906001600160a01b031681565b6101a66103ca366004612746565b6112ee565b6101a66103dd3660046125ca565b6113b2565b6017546001600160a01b0316610318565b6101a661040136600461263a565b61143f565b6101a6611487565b6101a661041c3660046125ca565b6114ec565b6101a661042f3660046125ca565b611533565b604b546001600160a01b031633146104675760405162461bcd60e51b815260040161045e90612eca565b60405180910390fd5b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152600b60248201526a2d22a927afa824a723a2a960a91b604482015260640161045e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff16156104f75760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff16156105315760405162461bcd60e51b815260040161045e90612ea7565b60165460155461054191906132b8565b4211156105605760405162461bcd60e51b815260040161045e90612f36565b604051630f1bdc8d60e21b8152600160048201526001600160a01b038416602482015260448101839052606481018290527334E24efE3a05212740b76EE0a62e8B42e88975da90633c6f72349060840160006040518083038186803b1580156105c857600080fd5b505af41580156105dc573d6000803e3d6000fd5b50600092506105f191506001905085336115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0386169133917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916106819190612f5e565b60405180910390a350506000805460ff60a01b191690555050565b60408051808201825260608082526020820152905163309efe7960e01b8152600160048201526001600160a01b0383166024820152738536Ef02029B5a028791Bc70908cbE0145BE99A39063309efe799060440160006040518083038186803b15801561070857600080fd5b505af415801561071c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190612a62565b92915050565b604051635739dd5d60e11b8152600160048201526001600160a01b03808416602483015282166044820152731ab12bcEaB75368122ea90EdA0BbaccFaAb40E269063ae73baba9060640160006040518083038186803b1580156107ac57600080fd5b505af41580156107c0573d6000803e3d6000fd5b505050505050565b600054600160a01b900460ff16156107f25760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff161561082c5760405162461bcd60e51b815260040161045e90612ea7565b60165460155461083c91906132b8565b42111561085b5760405162461bcd60e51b815260040161045e90612f36565b60405163dc33a4c960e01b8152600160048201526001600160a01b038084166024830152821660448201527334E24efE3a05212740b76EE0a62e8B42e88975da9063dc33a4c99060640160006040518083038186803b1580156108bd57600080fd5b505af41580156108d1573d6000803e3d6000fd5b50600092506108e691506001905084846115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0380861692908516917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916109799190612f5e565b60405180910390a350506000805460ff60a01b1916905550565b6000546001600160a01b031633146109dc5760405162461bcd60e51b815260206004820152600c60248201526b2727aa2fa0afa824a723a2a960a11b604482015260640161045e565b4260158190556016546109ee916132b8565b6015546040517f715bb9087ad9ed85ef65540b33e3d95a7ed34710b4e2c8ca7083c5bc3a3df9a790600090a3565b600080610a2b600184806115ce565b600d810154909150610100900460ff16610a485750600092915050565b610a54600184836115fc565b9392505050565b604b546001600160a01b03163314610a855760405162461bcd60e51b815260040161045e90612eca565b610a8f600061161a565b565b60405163ed3a07d760e01b8152606090738536Ef02029B5a028791Bc70908cbE0145BE99A39063ed3a07d790610ace906001908690600401613021565b60006040518083038186803b158015610ae657600080fd5b505af4158015610afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190612672565b6040516310db51c760e01b8152731ab12bcEaB75368122ea90EdA0BbaccFaAb40E26906310db51c790610b5c906001908590600401613058565b60006040518083038186803b158015610b7457600080fd5b505af4158015610b88573d6000803e3d6000fd5b5050505050565b604b546001600160a01b03163314610bb95760405162461bcd60e51b815260040161045e90612eca565b6040516362fe651760e01b8152732Fb3B5d265D232fD8544197592b9EB3e42139C69906362fe651790610b5c906001908590600401613021565b60408051808201825260608082526020820152905163bae54d2d60e01b8152600160048201526001600160a01b0383166024820152738536Ef02029B5a028791Bc70908cbE0145BE99A39063bae54d2d9060440160006040518083038186803b158015610c5f57600080fd5b505af4158015610c73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074491908101906128ff565b601854610100900460ff1680610cb4575060185460ff16155b610cd05760405162461bcd60e51b815260040161045e90612e59565b601854610100900460ff16158015610cf2576018805461ffff19166101011790555b6001600160a01b038316610d335760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b604482015260640161045e565b843b610d815760405162461bcd60e51b815260206004820152601c60248201527f54524144494e475f544f4b454e5f4e4f545f415f434f4e545241435400000000604482015260640161045e565b610d8961166c565b600080548751600c556020880151600d556040880151600e556060880151600f55608088015160105560a088015160115560c0880151601255601480546001600160a01b03808a166001600160a01b0319928316179092554260155560168890556001805488841690831617905560178054928716929091169190911790556001600160a81b0319163317905580156107c0576018805461ff0019169055505050505050565b600054600160a01b900460ff1615610e595760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff1615610e935760405162461bcd60e51b815260040161045e90612ea7565b601654601554610ea391906132b8565b421115610ec25760405162461bcd60e51b815260040161045e90612f36565b6040805160c0810182526001600160a01b0387811682523360208301908152828401878152606084018781528915156080860190815260a086018881529651635c739ee960e11b815260016004820152955185166024870152925190931660448501525160648401529051608483015251151560a4820152905160c48201527334E24efE3a05212740b76EE0a62e8B42e88975da9063b8e73dd29060e40160006040518083038186803b158015610f7857600080fd5b505af4158015610f8c573d6000803e3d6000fd5b5060009250610fa191506001905087336115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0388169133917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916110319190612f5e565b60405180910390a350506000805460ff60a01b1916905550505050565b6007546060906110ac57604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161106f5790505091506107449050565b6007546000906110bc84866132b8565b11156110d8576007546110d1906001906134b7565b90506110f1565b60016110e484866132b8565b6110ee91906134b7565b90505b60006110fd85836134b7565b6111089060016132b8565b9050600080826001600160401b0381111561113357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561118557816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816111515790505b509050865b8481116112e3576000600160060182815481106111b757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600890915260409091205490915060ff16156112d057600081815260086020526040812060018181015491546001600160a01b03928316939261121492918591610100909104166115ce565b9050600061122e600184846112276116e7565b6000611701565b601154909250905081136112cc576000848152600860209081526040918290208251608081018452815460ff8116151582526001600160a01b03610100909104811693820193909352600182015490921692820192909252600290910154606082015286518790899081106112b357634e487b7160e01b600052603260045260246000fd5b60209081029190910101526112c96001886132b8565b96505b5050505b50806112db816134fa565b91505061118a565b509695505050505050565b600054600160a01b900460ff16156113185760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff16156113525760405162461bcd60e51b815260040161045e90612ea7565b60165460155461136291906132b8565b4211156113815760405162461bcd60e51b815260040161045e90612f36565b801561139857611393600184846117c8565b6113a4565b6113a460018484611843565b60006105f1600185336115ce565b604b546001600160a01b031633146113dc5760405162461bcd60e51b815260040161045e90612eca565b6001600160a01b03811661141d5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b604482015260640161045e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b604b546001600160a01b031633146114695760405162461bcd60e51b815260040161045e90612eca565b60018054911515600160a01b0260ff60a01b19909216919091179055565b6040516307eec72560e51b815260016004820152731ab12bcEaB75368122ea90EdA0BbaccFaAb40E269063fdd8e4a09060240160006040518083038186803b1580156114d257600080fd5b505af41580156114e6573d6000803e3d6000fd5b50505050565b6040516372bea82760e01b8152600160048201526001600160a01b0382166024820152731ab12bcEaB75368122ea90EdA0BbaccFaAb40E26906372bea82790604401610b5c565b604b546001600160a01b0316331461155d5760405162461bcd60e51b815260040161045e90612eca565b6001600160a01b0381166115c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161045e565b6115cb8161161a565b50565b6001600160a01b03808216600090815260058501602090815260408083209386168352929052209392505050565b60008060008061160d8787876118fe565b9998505050505050505050565b604b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601854610100900460ff1680611685575060185460ff16155b6116a15760405162461bcd60e51b815260040161045e90612e59565b601854610100900460ff161580156116c3576018805461ffff19166101011790555b6116cb611b26565b6116d3611b90565b80156115cb576018805461ff001916905550565b60006116fc670de0b6b3a764000060016133f5565b905090565b6000806117118787878787611bf0565b915061171b6116e7565b84141561174757611740856006015483876005015461173a9190613277565b90611c12565b90506117be565b600061175d8888886117576116e7565b88611bf0565b90506117ba6117838661176e6116e7565b6117789190613478565b600689015490611c30565b84836117a6896117916116e7565b61179b9190613478565b60058c015490611c30565b6117b09190613277565b61173a9190613478565b9150505b9550959350505050565b6000811361180a5760405162461bcd60e51b815260206004820152600f60248201526e0434f4c4c41544552414c5f4c545f3608c1b604482015260640161045e565b6000611817848433611c3e565b9050611824843384611cb2565b50611830848284611ccf565b6114e684828561183e6116e7565b611ced565b600081136118855760405162461bcd60e51b815260206004820152600f60248201526e0434f4c4c41544552414c5f4c545f3608c1b604482015260640161045e565b6000611892848433611c3e565b9050806005015482126118d95760405162461bcd60e51b815260206004820152600f60248201526e10d0539517d4915353d59157d05313608a1b604482015260640161045e565b6118e4848284611d0a565b6118ef843384611d72565b506114e684828561183e6116e7565b600080600080856001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193d57600080fd5b505afa158015611951573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197591906127bb565b905061198e8161173a8760020154846117789190613478565b92508460060154600014156119a55784600e015492505b604080516060810182526010870154815260118701546020820152601287015460ff16151591810191909152600986015443146119fd576006860154815260028601546020820152600d86015460ff16151560408201525b6000866007015442611a0f91906134b7565b9050600080821315611ab5576000611a2b8a8a60080154611d8e565b90506000611a48611a3f6301e13380611e7e565b61173a86611e7e565b9050611a6c611a64828760200151611c3090919063ffffffff16565b865190611c30565b611a8a611a82611a7b87611e7e565b8590611c30565b875190611c30565b611a949190613478565b60128b015490935060ff16611ab257611aaf600019846133f5565b92505b50505b600c880154611ac49082613277565b9650876006015460001415611ae457611add8688613277565b9450611b19565b600d88015460ff16151560011415611b0057611add8688613277565b86611b0c876000613478565b611b169190613277565b94505b5050505093509350939050565b601854610100900460ff1680611b3f575060185460ff16155b611b5b5760405162461bcd60e51b815260040161045e90612e59565b601854610100900460ff161580156116d3576018805461ffff191661010117905580156115cb576018805461ff001916905550565b601854610100900460ff1680611ba9575060185460ff16155b611bc55760405162461bcd60e51b815260040161045e90612e59565b601854610100900460ff16158015611be7576018805461ffff19166101011790555b6116d33361161a565b600080600080611c038989898989611e92565b9b9a5050505050505050505050565b60008160011415611c24575081610744565b610a548383601261215b565b6000610a5483836012612183565b6001600160a01b0380821660009081526005850160209081526040808320938616835292905220600d81015460ff610100909104161515600114610a545760405162461bcd60e51b815260206004820152600b60248201526a2727afa827a9a4aa24a7a760a91b604482015260640161045e565b6013830154600090610a54906001600160a01b0316843085612198565b80826005016000828254611ce39190613277565b9091555050505050565b6000611cfd858486856000611701565b915050610b888582612203565b80826005016000828254611d1e9190613478565b9091555050600582015460001315611d6d5760405162461bcd60e51b8152602060048201526012602482015271434f4c4c41544552414c5f544f4f5f42494760701b604482015260640161045e565b505050565b6013830154600090610a54906001600160a01b0316848461224f565b6000826001600160a01b0316634dde1fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc957600080fd5b505afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0191906125e6565b6001600160a01b031663796ba96c836040518263ffffffff1660e01b8152600401611e2e91815260200190565b60206040518083038186803b158015611e4657600080fd5b505afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5491906127bb565b6000610744670de0b6b3a7640000836133f5565b6000806000611ecb6040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b600d87015460ff16151581526002870154602082015260068701546060820152600c8701546080820152611efd6116e7565b8614611f2c576060810151611f129087611c30565b60608201526080810151611f269087611c30565b60808201525b600060018615151415611fb157886001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7257600080fd5b505afa158015611f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faa91906127bb565b905061204c565b886001600160a01b031663dc028c0883606001516000611fd19190613478565b845160405160e084901b6001600160e01b031916815260048101929092521515602482015260440160206040518083038186803b15801561201157600080fd5b505afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204991906127bb565b90505b61206e8161173a8460200151846120639190613478565b606086015190611c30565b9350600088600701544261208291906134b7565b9050600081131561210a57600061209d8b8b60080154611d8e565b905060006120ba6120b16301e13380611e7e565b61173a85611e7e565b90506120e16120d6828760200151611c3090919063ffffffff16565b606087015190611c30565b6120fb6120f0611a7b86611e7e565b606088015190611c30565b6121059190613478565b975050505b60808301516121199087613277565b8351909650156121345761212d8587613277565b935061214d565b85612140866000613478565b61214a9190613478565b93505b505050955095509592505050565b6000826121678361227f565b61217190866133f5565b61217b91906132d0565b949350505050565b600061218e8261227f565b61217184866133f5565b6040516001600160a01b03808516602483015283166044820152606481018290526114e69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261228f565b601082015481121561224b5760405162461bcd60e51b81526020600482015260116024820152702727aa2fa2a727aaa3a42fa6a0a923a4a760791b604482015260640161045e565b5050565b6040516001600160a01b038316602482015260448101829052611d6d90849063a9059cbb60e01b906064016121cc565b600061074460ff8316600a61334d565b60006122e4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123619092919063ffffffff16565b805190915015611d6d57808060200190518101906123029190612656565b611d6d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045e565b606061217b848460008585843b6123ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045e565b600080866001600160a01b031685876040516123d69190612cf9565b60006040518083038185875af1925050503d8060008114612413576040519150601f19603f3d011682016040523d82523d6000602084013e612418565b606091505b5091509150612428828286612433565b979650505050505050565b60608315612442575081610a54565b8251156124525782518084602001fd5b8160405162461bcd60e51b815260040161045e9190612e46565b803561247781613567565b919050565b805161247781613567565b600082601f830112612497578081fd5b815160206124ac6124a78361322d565b6131fd565b82815281810190858301610120808602880185018910156124cb578687fd5b865b868110156125655781838b0312156124e3578788fd5b6124eb61314c565b6124f484612573565b815261250187850161247c565b87820152604061251281860161247c565b90820152606084810151908201526080808501519082015260a0808501519082015260c0808501519082015260e080850151908201526101008085015190820152855293850193918101916001016124cd565b509198975050505050505050565b80516124778161357c565b600082601f83011261258e578081fd5b813561259c6124a782613250565b8181528460208386010111156125b0578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156125db578081fd5b8135610a5481613567565b6000602082840312156125f7578081fd5b8151610a5481613567565b60008060408385031215612614578081fd5b823561261f81613567565b9150602083013561262f81613567565b809150509250929050565b60006020828403121561264b578081fd5b8135610a548161357c565b600060208284031215612667578081fd5b8151610a548161357c565b600060208284031215612683578081fd5b81516001600160401b03811115612698578182fd5b8201601f810184136126a8578182fd5b80516126b66124a782613250565b8181528560208385010111156126ca578384fd5b6126db8260208301602086016134ce565b95945050505050565b60008060408385031215612614578182fd5b600080600080600060a0868803121561270d578081fd5b853561271881613567565b945060208601356127288161357c565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561275a578081fd5b833561276581613567565b925060208401359150604084013561277c8161357c565b809150509250925092565b60008060006060848603121561279b578081fd5b83356127a681613567565b95602085013595506040909401359392505050565b6000602082840312156127cc578081fd5b5051919050565b6000602082840312156127e4578081fd5b81356001600160401b03808211156127fa578283fd5b908301906040828603121561280d578283fd5b612815613175565b82356128208161358a565b8152602083013582811115612833578485fd5b61283f8782860161257e565b60208301525095945050505050565b6000806000806000858703610160811215612867578384fd5b60e0811215612874578384fd5b5061287d613197565b863581526020870135602082015260408701356040820152606087013560608201526080870135608082015260a087013560a082015260c087013560c0820152809550506128cd60e0870161246c565b935061010086013592506128e4610120870161246c565b91506128f3610140870161246c565b90509295509295909350565b60006020808385031215612911578182fd5b82516001600160401b0380821115612927578384fd5b8185019150604080838803121561293c578485fd5b612944613175565b835183811115612952578687fd5b61295e89828701612487565b8252508484015183811115612971578687fd5b80850194505087601f850112612985578586fd5b835192506129956124a78461322d565b8084825286820191508686018a888760061b89010111156129b4578889fd5b8896505b858710156129ff5784818c0312156129ce578889fd5b6129d6613175565b81516129e181613567565b815281890151898201528352600196909601959187019184016129b8565b5095820195909552979650505050505050565b600060208284031215612a23578081fd5b81356001600160401b0380821115612a39578283fd5b9083019060408286031215612a4c578283fd5b612a54613175565b823560018110612820578485fd5b60006020808385031215612a74578182fd5b82516001600160401b0380821115612a8a578384fd5b81850191506040808388031215612a9f578485fd5b612aa7613175565b835183811115612ab5578687fd5b612ac189828701612487565b8252508484015183811115612ad4578687fd5b80850194505087601f850112612ae8578586fd5b83519250612af86124a78461322d565b83815285810190858701610140808702880189018c1015612b1757898afd5b8997505b86881015612bed57818c0381811215612b32578a8bfd5b612b3a6131b9565b8351612b4581613567565b8152838b01518b820152878401518882015260608085015181830152608060c0607f198501811315612b75578e8ffd5b612b7d6131db565b945081870151612b8c8161357c565b855260a0870151612b9c8161357c565b858f0152860151612bac8161357c565b848b015260e0860151918401919091526101008501518184015261012085015160a08401528101919091528452600197909701969288019290810190612b1b565b505095820195909552979650505050505050565b60008060408385031215612c13578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612cc2578151805115158852838101516001600160a01b031684890152604080820151612c70828b01826001600160a01b03169052565b5050606081810151908901526080808201519089015260a0808201519089015260c0808201519089015260e0808201519089015261010090810151908801526101209096019590820190600101612c35565b509495945050505050565b60008151808452612ce58160208601602086016134ce565b601f01601f19169290920160200192915050565b60008251612d0b8184602087016134ce565b9190910192915050565b60006101e08201905060018060a01b038b16825289151560208301528860408301528751606083015260208801516080830152604088015160a0830152606088015160c0830152608088015160e083015260a088015161010083015260c0880151610120830152612d926101408301886001600160a01b03169052565b6001600160a01b03861661016083015284610180830152836101a0830152612dc66101c08301846001600160a01b03169052565b9a9950505050505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612e39578151805115158552868101516001600160a01b03908116888701528682015116868601526060908101519085015260809093019290850190600101612df1565b5091979650505050505050565b602081526000610a546020830184612ccd565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526009908201526814d554d4115391115160ba1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d14125391d7d393d517d193d5539160921b604082015260600190565b60c081016107448284805115158252602081015115156020830152604081015115156040830152606081015160608301526080810151608083015260a081015160a08301525050565b60006020808352835160408083860152612fc46060860183612c22565b86840151868203601f1901838801528051808352908501935085918501905b8083101561301557845180516001600160a01b0316835286015186830152938501936001929092019190830190612fe3565b50979650505050505050565b828152604060208201526000825161303881613557565b806040840152506020830151604060608401526126db6080840182612ccd565b8281526040602082015260008251600181106130385761303861352b565b60006020808352606084516040808487015261309483870183612c22565b87850151878203601f1901838901528051808352908601935086918601905b8083101561313f57845180516001600160a01b0316835287810151888401528481015185840152868101518784015260809081015180511515828501526020810151151560a0808601919091526040820151151560c0860152606082015160e08601529181015161010085015201516101208301529386019360019290920191610140909101906130b3565b5098975050505050505050565b60405161012081016001600160401b038111828210171561316f5761316f613541565b60405290565b604080519081016001600160401b038111828210171561316f5761316f613541565b60405160e081016001600160401b038111828210171561316f5761316f613541565b60405160a081016001600160401b038111828210171561316f5761316f613541565b60405160c081016001600160401b038111828210171561316f5761316f613541565b604051601f8201601f191681016001600160401b038111828210171561322557613225613541565b604052919050565b60006001600160401b0382111561324657613246613541565b5060051b60200190565b60006001600160401b0382111561326957613269613541565b50601f01601f191660200190565b600080821280156001600160ff1b038490038513161561329957613299613515565b600160ff1b83900384128116156132b2576132b2613515565b50500190565b600082198211156132cb576132cb613515565b500190565b6000826132eb57634e487b7160e01b81526012600452602481fd5b600160ff1b82146000198414161561330557613305613515565b500590565b600181815b8085111561334557816000190482111561332b5761332b613515565b8085161561333857918102915b93841c939080029061330f565b509250929050565b6000610a54838360008261336357506001610744565b8161337057506000610744565b81600181146133865760028114613390576133ac565b6001915050610744565b60ff8411156133a1576133a1613515565b50506001821b610744565b5060208310610133831016604e8410600b84101617156133cf575081810a610744565b6133d9838361330a565b80600019048211156133ed576133ed613515565b029392505050565b60006001600160ff1b038184138284138082168684048611161561341b5761341b613515565b600160ff1b8487128281168783058912161561343957613439613515565b85871292508782058712848416161561345457613454613515565b8785058712818416161561346a5761346a613515565b505050929093029392505050565b60008083128015600160ff1b85018412161561349657613496613515565b6001600160ff1b03840183138116156134b1576134b1613515565b50500390565b6000828210156134c9576134c9613515565b500390565b60005b838110156134e95781810151838201526020016134d1565b838111156114e65750506000910152565b600060001982141561350e5761350e613515565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600681106115cb576115cb61352b565b6001600160a01b03811681146115cb57600080fd5b80151581146115cb57600080fd5b600681106115cb57600080fdfea2646970667358221220910f36b0e419175d25ad1a285cd844af320da03b62db499d1513ae871d32be0264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639d90e4c8116100de578063d66d8b9b11610097578063e5f4a5d411610071578063e5f4a5d4146103f3578063e82eefe314610406578063ef6d4f3c1461040e578063f2fde38b1461042157600080fd5b8063d66d8b9b146103bc578063d8826fec146103cf578063df3f1ecc146103e257600080fd5b80639d90e4c814610330578063aa4704f314610343578063b02624b214610363578063b42ce2fe14610376578063b63403a014610389578063b97399f5146103a957600080fd5b80635c36b1861161014b5780637dfcd9e5116101255780637dfcd9e51461023f57806381ac79c9146102d85780638be7febc146102f85780638da5cb5b1461030b57600080fd5b80635c36b1861461021c57806364afa24c14610224578063715018a61461023757600080fd5b80630860f3b0146101935780630d6e6237146101a85780630e947bd8146101bb5780631ca3b0cb146101e457806347e1c082146101f6578063586e848f14610209575b600080fd5b6101a66101a13660046125ca565b610434565b005b6101a66101b6366004612787565b6104cd565b6101ce6101c93660046125ca565b61069c565b6040516101db9190613076565b60405180910390f35b6007545b6040519081526020016101db565b6101a6610204366004612602565b61074a565b6101a66102173660046126e4565b6107c8565b6101a6610993565b6101e86102323660046125ca565b610a1c565b6101a6610a5b565b6001546009546040805160e081018252600c548152600d546020820152600e5491810191909152600f546060820152601054608082015260115460a082015260125460c08201526013546014546015546016546017546102c3976001600160a01b0380821698600160a01b90920460ff169791969195918116949181169391921689565b6040516101db99989796959493929190612d15565b6102eb6102e63660046127d3565b610a91565b6040516101db9190612e46565b6101a6610306366004612a12565b610b22565b604b546001600160a01b03165b6040516001600160a01b0390911681526020016101db565b6101a661033e3660046127d3565b610b8f565b6103566103513660046125ca565b610bf3565b6040516101db9190612fa7565b6101a661037136600461284e565b610c9b565b6101a66103843660046126f6565b610e2f565b61039c610397366004612c01565b61104e565b6040516101db9190612dd4565b600054610318906001600160a01b031681565b6101a66103ca366004612746565b6112ee565b6101a66103dd3660046125ca565b6113b2565b6017546001600160a01b0316610318565b6101a661040136600461263a565b61143f565b6101a6611487565b6101a661041c3660046125ca565b6114ec565b6101a661042f3660046125ca565b611533565b604b546001600160a01b031633146104675760405162461bcd60e51b815260040161045e90612eca565b60405180910390fd5b6001600160a01b0381166104ab5760405162461bcd60e51b815260206004820152600b60248201526a2d22a927afa824a723a2a960a91b604482015260640161045e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff16156104f75760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff16156105315760405162461bcd60e51b815260040161045e90612ea7565b60165460155461054191906132b8565b4211156105605760405162461bcd60e51b815260040161045e90612f36565b604051630f1bdc8d60e21b8152600160048201526001600160a01b0384166024820152604481018390526064810182905273__$924e03e9d2232415021c9b9496309e98d4$__90633c6f72349060840160006040518083038186803b1580156105c857600080fd5b505af41580156105dc573d6000803e3d6000fd5b50600092506105f191506001905085336115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0386169133917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916106819190612f5e565b60405180910390a350506000805460ff60a01b191690555050565b60408051808201825260608082526020820152905163309efe7960e01b8152600160048201526001600160a01b038316602482015273__$641225a8c774088aad0a98e8e797efbbe7$__9063309efe799060440160006040518083038186803b15801561070857600080fd5b505af415801561071c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190612a62565b92915050565b604051635739dd5d60e11b8152600160048201526001600160a01b0380841660248301528216604482015273__$a12c01fbd8122b4f229501571668af9cd9$__9063ae73baba9060640160006040518083038186803b1580156107ac57600080fd5b505af41580156107c0573d6000803e3d6000fd5b505050505050565b600054600160a01b900460ff16156107f25760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff161561082c5760405162461bcd60e51b815260040161045e90612ea7565b60165460155461083c91906132b8565b42111561085b5760405162461bcd60e51b815260040161045e90612f36565b60405163dc33a4c960e01b8152600160048201526001600160a01b0380841660248301528216604482015273__$924e03e9d2232415021c9b9496309e98d4$__9063dc33a4c99060640160006040518083038186803b1580156108bd57600080fd5b505af41580156108d1573d6000803e3d6000fd5b50600092506108e691506001905084846115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0380861692908516917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916109799190612f5e565b60405180910390a350506000805460ff60a01b1916905550565b6000546001600160a01b031633146109dc5760405162461bcd60e51b815260206004820152600c60248201526b2727aa2fa0afa824a723a2a960a11b604482015260640161045e565b4260158190556016546109ee916132b8565b6015546040517f715bb9087ad9ed85ef65540b33e3d95a7ed34710b4e2c8ca7083c5bc3a3df9a790600090a3565b600080610a2b600184806115ce565b600d810154909150610100900460ff16610a485750600092915050565b610a54600184836115fc565b9392505050565b604b546001600160a01b03163314610a855760405162461bcd60e51b815260040161045e90612eca565b610a8f600061161a565b565b60405163ed3a07d760e01b815260609073__$641225a8c774088aad0a98e8e797efbbe7$__9063ed3a07d790610ace906001908690600401613021565b60006040518083038186803b158015610ae657600080fd5b505af4158015610afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190612672565b6040516310db51c760e01b815273__$a12c01fbd8122b4f229501571668af9cd9$__906310db51c790610b5c906001908590600401613058565b60006040518083038186803b158015610b7457600080fd5b505af4158015610b88573d6000803e3d6000fd5b5050505050565b604b546001600160a01b03163314610bb95760405162461bcd60e51b815260040161045e90612eca565b6040516362fe651760e01b815273__$47118f28351ca40d93672e0807da6df852$__906362fe651790610b5c906001908590600401613021565b60408051808201825260608082526020820152905163bae54d2d60e01b8152600160048201526001600160a01b038316602482015273__$641225a8c774088aad0a98e8e797efbbe7$__9063bae54d2d9060440160006040518083038186803b158015610c5f57600080fd5b505af4158015610c73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074491908101906128ff565b601854610100900460ff1680610cb4575060185460ff16155b610cd05760405162461bcd60e51b815260040161045e90612e59565b601854610100900460ff16158015610cf2576018805461ffff19166101011790555b6001600160a01b038316610d335760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b604482015260640161045e565b843b610d815760405162461bcd60e51b815260206004820152601c60248201527f54524144494e475f544f4b454e5f4e4f545f415f434f4e545241435400000000604482015260640161045e565b610d8961166c565b600080548751600c556020880151600d556040880151600e556060880151600f55608088015160105560a088015160115560c0880151601255601480546001600160a01b03808a166001600160a01b0319928316179092554260155560168890556001805488841690831617905560178054928716929091169190911790556001600160a81b0319163317905580156107c0576018805461ff0019169055505050505050565b600054600160a01b900460ff1615610e595760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff1615610e935760405162461bcd60e51b815260040161045e90612ea7565b601654601554610ea391906132b8565b421115610ec25760405162461bcd60e51b815260040161045e90612f36565b6040805160c0810182526001600160a01b0387811682523360208301908152828401878152606084018781528915156080860190815260a086018881529651635c739ee960e11b815260016004820152955185166024870152925190931660448501525160648401529051608483015251151560a4820152905160c482015273__$924e03e9d2232415021c9b9496309e98d4$__9063b8e73dd29060e40160006040518083038186803b158015610f7857600080fd5b505af4158015610f8c573d6000803e3d6000fd5b5060009250610fa191506001905087336115ce565b6040805160c081018252600d83015460ff80821615158352610100820481161515602084015262010000909104161515818301526006830154606082015260058301546080820152600283015460a082015290519192506001600160a01b0388169133917fe29f470cb2cfa2003bdd9a73777e5597f1c2f6b9f9f30eabb327ac3376f4a710916110319190612f5e565b60405180910390a350506000805460ff60a01b1916905550505050565b6007546060906110ac57604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161106f5790505091506107449050565b6007546000906110bc84866132b8565b11156110d8576007546110d1906001906134b7565b90506110f1565b60016110e484866132b8565b6110ee91906134b7565b90505b60006110fd85836134b7565b6111089060016132b8565b9050600080826001600160401b0381111561113357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561118557816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816111515790505b509050865b8481116112e3576000600160060182815481106111b757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600890915260409091205490915060ff16156112d057600081815260086020526040812060018181015491546001600160a01b03928316939261121492918591610100909104166115ce565b9050600061122e600184846112276116e7565b6000611701565b601154909250905081136112cc576000848152600860209081526040918290208251608081018452815460ff8116151582526001600160a01b03610100909104811693820193909352600182015490921692820192909252600290910154606082015286518790899081106112b357634e487b7160e01b600052603260045260246000fd5b60209081029190910101526112c96001886132b8565b96505b5050505b50806112db816134fa565b91505061118a565b509695505050505050565b600054600160a01b900460ff16156113185760405162461bcd60e51b815260040161045e90612eff565b6000805460ff60a01b1916600160a01b9081179091556001540460ff16156113525760405162461bcd60e51b815260040161045e90612ea7565b60165460155461136291906132b8565b4211156113815760405162461bcd60e51b815260040161045e90612f36565b801561139857611393600184846117c8565b6113a4565b6113a460018484611843565b60006105f1600185336115ce565b604b546001600160a01b031633146113dc5760405162461bcd60e51b815260040161045e90612eca565b6001600160a01b03811661141d5760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b604482015260640161045e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b604b546001600160a01b031633146114695760405162461bcd60e51b815260040161045e90612eca565b60018054911515600160a01b0260ff60a01b19909216919091179055565b6040516307eec72560e51b81526001600482015273__$a12c01fbd8122b4f229501571668af9cd9$__9063fdd8e4a09060240160006040518083038186803b1580156114d257600080fd5b505af41580156114e6573d6000803e3d6000fd5b50505050565b6040516372bea82760e01b8152600160048201526001600160a01b038216602482015273__$a12c01fbd8122b4f229501571668af9cd9$",
  "libraries": {
    "TradeImpl": "0x34E24efE3a05212740b76EE0a62e8B42e88975da",
    "StripsViewImpl": "0x8536Ef02029B5a028791Bc70908cbE0145BE99A3",
    "StripsStateImpl": "0x1ab12bcEaB75368122ea90EdA0BbaccFaAb40E26",
    "StripsAdminImpl": "0x2Fb3B5d265D232fD8544197592b9EB3e42139C69"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPositionsForLiquidation(uint256,uint256)": {
        "details": "Return the list of liquidateable positions. NOT Efficien - rewrite for more efficient way Used by LiquidationKeeper to find liquidateable positions and efficiently iterate over them.",
        "params": {
          "_length": "the max length of returned list.",
          "_start": "position index to start from"
        },
        "returns": {
          "_0": "The list of Meta Data on position that is enough for liquidation*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ping()": {
        "notice": "Sets timestamp of last call for the availability of contract methods when interacting with keepers. The call can only be made by the user who has PINGER_ROLE"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18045,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "pinger",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18047,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "lock",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18050,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "g_state",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(State)12832_storage"
      },
      {
        "astId": 557,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "_initialized",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 560,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "_initializing",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 698,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "__gap",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 437,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "_owner",
        "offset": 0,
        "slot": "75",
        "type": "t_address"
      },
      {
        "astId": 550,
        "contract": "contracts/strips/Strips.sol:Strips",
        "label": "__gap",
        "offset": 0,
        "slot": "76",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IMarket)9983)dyn_storage": {
        "base": "t_contract(IMarket)9983",
        "encoding": "dynamic_array",
        "label": "contract IMarket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2108": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInsuranceFund)9888": {
        "encoding": "inplace",
        "label": "contract IInsuranceFund",
        "numberOfBytes": "20"
      },
      "t_contract(IMarket)9983": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_contract(IMarket)9983,t_struct(Position)12739_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IMarket => struct StorageStripsLib.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IMarket)9983,t_struct(Position)12739_storage)"
      },
      "t_mapping(t_address,t_struct(OracleData)12759_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StorageStripsLib.OracleData)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleData)12759_storage"
      },
      "t_mapping(t_contract(IMarket)9983,t_struct(MarketData)12691_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IMarket)9983",
        "label": "mapping(contract IMarket => struct StorageStripsLib.MarketData)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketData)12691_storage"
      },
      "t_mapping(t_contract(IMarket)9983,t_struct(Position)12739_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IMarket)9983",
        "label": "mapping(contract IMarket => struct StorageStripsLib.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)12739_storage"
      },
      "t_mapping(t_uint256,t_struct(PositionMeta)12769_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StorageStripsLib.PositionMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(PositionMeta)12769_storage"
      },
      "t_struct(MarketData)12691_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.MarketData",
        "members": [
          {
            "astId": 12690,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "created",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OracleData)12759_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.OracleData",
        "members": [
          {
            "astId": 12756,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12758,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "keeperReward",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)12739_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.Position",
        "members": [
          {
            "astId": 12694,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "market",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IMarket)9983"
          },
          {
            "astId": 12696,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "trader",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12698,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "initialPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 12700,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "entryPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 12702,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "prevAvgPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 12704,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 12706,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "notional",
            "offset": 0,
            "slot": "6",
            "type": "t_int256"
          },
          {
            "astId": 12708,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "initialTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12710,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "cummulativeIndex",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12712,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "initialBlockNumber",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12714,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "posIndex",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 12716,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lastChangeBlock",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 12718,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "unrealizedPnl",
            "offset": 0,
            "slot": "12",
            "type": "t_int256"
          },
          {
            "astId": 12720,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isLong",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 12722,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isActive",
            "offset": 1,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 12724,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isLiquidated",
            "offset": 2,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 12726,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isAmm",
            "offset": 3,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 12728,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "savedTradingPnl",
            "offset": 0,
            "slot": "14",
            "type": "t_int256"
          },
          {
            "astId": 12730,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "zeroParameter",
            "offset": 0,
            "slot": "15",
            "type": "t_int256"
          },
          {
            "astId": 12732,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lastNotional",
            "offset": 0,
            "slot": "16",
            "type": "t_int256"
          },
          {
            "astId": 12734,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lastInitialPrice",
            "offset": 0,
            "slot": "17",
            "type": "t_int256"
          },
          {
            "astId": 12736,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lastIsLong",
            "offset": 0,
            "slot": "18",
            "type": "t_bool"
          },
          {
            "astId": 12738,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "oraclePriceUsed",
            "offset": 0,
            "slot": "19",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(PositionMeta)12769_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.PositionMeta",
        "members": [
          {
            "astId": 12761,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12763,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "_account",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12766,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "_market",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMarket)9983"
          },
          {
            "astId": 12768,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "_posIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RiskParams)12754_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.RiskParams",
        "members": [
          {
            "astId": 12741,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "fundFeeRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 12743,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "daoFeeRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 12745,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "liquidatorFeeRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 12747,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "marketFeeRatio",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 12749,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "insuranceProfitOnPositionClosed",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 12751,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "liquidationMarginRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 12753,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "minimumPricePossible",
            "offset": 0,
            "slot": "6",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(State)12832_storage": {
        "encoding": "inplace",
        "label": "struct StorageStripsLib.State",
        "members": [
          {
            "astId": 12771,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "dao",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12773,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "isSuspended",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12777,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "allMarkets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(IMarket)9983)dyn_storage"
          },
          {
            "astId": 12783,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "markets",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IMarket)9983,t_struct(MarketData)12691_storage)"
          },
          {
            "astId": 12786,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "allAccounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12790,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "existingAccounts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 12798,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "accounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_contract(IMarket)9983,t_struct(Position)12739_storage))"
          },
          {
            "astId": 12801,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "allIndexes",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12806,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "indexToPositionMeta",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(PositionMeta)12769_storage)"
          },
          {
            "astId": 12808,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "currentPositionIndex",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12811,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "allOracles",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12816,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "oracles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_struct(OracleData)12759_storage)"
          },
          {
            "astId": 12819,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "riskParams",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(RiskParams)12754_storage"
          },
          {
            "astId": 12822,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "insuranceFund",
            "offset": 0,
            "slot": "18",
            "type": "t_contract(IInsuranceFund)9888"
          },
          {
            "astId": 12825,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "tradingToken",
            "offset": 0,
            "slot": "19",
            "type": "t_contract(IERC20)2108"
          },
          {
            "astId": 12827,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lastAlive",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 12829,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "keepAliveInterval",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 12831,
            "contract": "contracts/strips/Strips.sol:Strips",
            "label": "lpOracle",
            "offset": 0,
            "slot": "22",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "736"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}