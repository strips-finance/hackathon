{
  "address": "0x34E24efE3a05212740b76EE0a62e8B42e88975da",
  "abi": [],
  "transactionHash": "0xa0203815c6617a48697f00f0b73969f16334d4a63533ceff3c90691bd8458577",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0x34E24efE3a05212740b76EE0a62e8B42e88975da",
    "transactionIndex": 0,
    "gasUsed": "115121886",
    "logsBloom": "0x
    "blockHash": "0xf5c905e0e7e97fc3c02f8307c9e3f584b134cb4635c05a46a5123288569132a5",
    "transactionHash": "0xa0203815c6617a48697f00f0b73969f16334d4a63533ceff3c90691bd8458577",
    "logs": [],
    "blockNumber": 7139081,
    "cumulativeGasUsed": "89009984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/impl/TradeImpl.sol\":\"TradeImpl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/impl/TradeImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\n\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\n\\nlibrary TradeImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    //against stack too deep error\\n    struct PositionParams {\\n        IMarket _market;\\n        address _account;\\n        int256 _collateral;\\n        int256 _leverage;\\n        bool _isLong;\\n        int256 _slippage;\\n    }\\n\\n    struct TraderUpdate{\\n        int256 _notional;\\n        int256 _initialPrice;\\n        int256 _fundingPaid;\\n        bool _isActive;\\n        bool _isLong;\\n    }\\n\\n    struct PosInfo{\\n        int256 _notional;\\n        int256 _collateral;\\n        int256 _unrealizedPnl;\\n        int256 _priceBeforeChange;\\n    }\\n\\n    function openPosition(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams\\n    ) public {        \\n        require(posParams._collateral > 0, \\\"COLLATERAL_LEQ_0\\\");\\n\\n        StorageStripsLib.Position storage prevPosition = state.checkPosition(posParams._market, posParams._account);\\n        \\n        require(prevPosition.lastChangeBlock != block.number, \\\"SAME_BLOCK_ACTION_DENIED\\\");\\n\\n        int256 slippage = 0;\\n        int256 rewardedNotional = posParams._collateral * posParams._leverage;\\n\\n        if (prevPosition.isActive == false){\\n            //There is no active position - just open new\\n           slippage = _open(state,\\n                                posParams,\\n                                false);  //not merge\\n        }else{\\n            if (posParams._isLong != prevPosition.isLong){    // opposite?\\n                \\n                //check if it's opposite close\\n                int256 notional = posParams._collateral * posParams._leverage;\\n                if (notional == prevPosition.notional){     // the same but opposite, just close current\\n                    slippage = _liquidateWholeOrCloseRatio(state,\\n                                                prevPosition,\\n                                                posParams._market,\\n                                                SignedBaseMath.oneDecimal());\\n                }else{  //netting\\n                    slippage = _netPosition(state,\\n                        posParams,\\n                        prevPosition\\n                    );\\n\\n                }\\n            }else{  //the same side, it's aggregation\\n                slippage = _aggregate(state, \\n                            posParams,\\n                            prevPosition);\\n            }\\n        }\\n        _requireSlippage(posParams._slippage, slippage);\\n\\n        if (IStakeble(address(posParams._market)).isRewardable()){\\n            address rewarder = IRewardable(address(posParams._market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(posParams._account, rewardedNotional);\\n        }\\n    }\\n\\n\\n\\n    function closePosition(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) public {\\n        require(_closeRatio > 0 && _closeRatio <= SignedBaseMath.oneDecimal(), \\\"WRONG_CLOSE_RATIO\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n        \\n        int256 notional = position.notional;\\n        require(position.lastChangeBlock != block.number, \\\"SAME_BLOCK_ACTION_DENIED\\\");\\n\\n        //ALWAYS check the full position first\\n        _requireMargin(state, \\n                position, \\n                _market,\\n                SignedBaseMath.oneDecimal());\\n\\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\\n            notional = notional.muld(_closeRatio);\\n        }\\n\\n        int256 slippage = _close(state,\\n                                position,\\n                                _market,\\n                                _closeRatio);\\n\\n        _requireSlippage(_slippage, slippage);\\n        if (IStakeble(address(_market)).isRewardable()){\\n            address rewarder = IRewardable(address(_market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(msg.sender, notional);\\n        }\\n\\n        if (position.isActive){\\n            _requireMargin(state, \\n                    position, \\n                    _market,\\n                    SignedBaseMath.oneDecimal());\\n        }\\n    }\\n\\n\\n    function liquidatePosition(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        address account\\n    ) public {\\n        //trader can't liquidate it's own position\\n        require(account != msg.sender, \\\"TRADER_CANTBE_LIQUIDATOR\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        account);\\n\\n\\n        (int256 total_pnl,\\n         int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    position,\\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\\n                                                    false);  // based on Exit price\\n                \\n        require(marginRatio <= state.getLiquidationRatio(), \\\"MARGIN_OK\\\");\\n        \\n\\n        _liquidate(state,\\n                    _market,\\n                    msg.sender,\\n                    position);\\n    }\\n\\n\\n    function addCollateral(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        int256 collateral\\n    ) internal {\\n        require(collateral > 0, \\\"COLLATERAL_LT_0\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n\\n                //Get collateral on STRIPS balance\\n        _receiveCollateral(state,\\n                            msg.sender, \\n                            collateral);\\n\\n        state.addCollateral(position,\\n                            collateral);\\n\\n        _requireMargin(state,\\n                        position,\\n                        _market,\\n                        SignedBaseMath.oneDecimal());\\n    }\\n\\n    function removeCollateral(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        int256 collateral\\n    ) internal {\\n        require(collateral > 0, \\\"COLLATERAL_LT_0\\\");\\n\\n        StorageStripsLib.Position storage position = state.getPosition(_market,\\n                                                                        msg.sender);\\n\\n        require(collateral < position.collateral, \\\"CANT_REMOVE_ALL\\\");\\n\\n        state.removeCollateral(position, \\n                                collateral);\\n\\n        _returnCollateral(state,\\n                            msg.sender, \\n                            collateral);\\n        \\n        _requireMargin(state,\\n                        position,\\n                        _market,\\n                        SignedBaseMath.oneDecimal());\\n\\n    }\\n\\n    /*\\n    **************************************************************************\\n    *   Different netting AMM scenarios and Unrealized PNL\\n     **************************************************************************\\n    */\\n\\n    function ammPositionUpdate(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        TraderUpdate memory _traderUpdate\\n    ) private {\\n        StorageStripsLib.Position storage ammPosition = state.checkPosition(_market, address(_market));\\n\\n        if (ammPosition.isActive == false){\\n            if (_traderUpdate._isActive == false){\\n                //trader closed the position, and we didn't have amm position\\n                return; // do nothing\\n            }\\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\\n\\n            //it's the new position, just open\\n            state.setPosition(\\n                _market, \\n                address(_market), \\n                traderRevertedSide,  //revert position \\n                0,                      // for amm we don't have collateral \\n                _traderUpdate._notional, \\n                _traderUpdate._initialPrice, \\n                false);\\n        }else{\\n            _ammCummulateFundingPnl(state, \\n                                    ammPosition,\\n                                    _market);\\n\\n            int256 ammNotional = ammPosition.notional;\\n            int256 ammUpdatedNotional = ammNotional;\\n            \\n            bool ammSide = ammPosition.isLong;\\n            bool newSide = ammSide;\\n\\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\\n\\n            int256 closeNotional = _traderUpdate._notional;\\n            if (_traderUpdate._isActive == false){\\n                closeNotional *= -1;\\n            }\\n\\n            //Trader open/change position\\n            if (ammSide == traderRevertedSide){\\n                //the same side\\n                ammUpdatedNotional += closeNotional;\\n                if (ammUpdatedNotional < 0){\\n                    ammUpdatedNotional *= -1;\\n                    newSide = !ammSide;\\n                }\\n            }else{\\n                int256 diff = ammNotional - closeNotional;        \\n            \\n                if (diff >= 0){\\n                    //the same side\\n                    ammUpdatedNotional = diff;\\n                } else {\\n                    //change side\\n                    ammUpdatedNotional = 0 - diff; \\n                    newSide = !ammSide;\\n                }\\n            }\\n\\n            if (_traderUpdate._isActive == false){\\n                ammPosition.unrealizedPnl += _traderUpdate._fundingPaid;\\n            }\\n\\n            int256 t = _traderUpdate._notional.muld(_traderUpdate._initialPrice);\\n            if (_traderUpdate._isActive == true && _traderUpdate._isLong == false){\\n                t *= -1;\\n            }else if(_traderUpdate._isActive == false && _traderUpdate._isLong == true){\\n                t *= -1;\\n            }\\n\\n            if (ammUpdatedNotional != 0){\\n\\n                //Last time it was closed\\n                int256 a = ammPosition.initialPrice.muld(ammNotional);\\n                if (ammNotional == 0){\\n                    a = ammPosition.zeroParameter;\\n                }else{\\n                    if (ammSide == false){\\n                        a *= -1;\\n                    }\\n                }\\n\\n\\n                int256 divTo = ammUpdatedNotional;\\n                if (newSide == false){\\n                    divTo *= -1;\\n                }\\n\\n                ammPosition.initialPrice = (a - t).divd(divTo);\\n            }else{\\n                \\n                int256 mulTo = ammNotional;\\n                if (ammSide == false){\\n                    mulTo *= -1;\\n                }\\n                ammPosition.savedTradingPnl = (_traderUpdate._initialPrice - ammPosition.initialPrice).muld(mulTo).divd(_traderUpdate._initialPrice);\\n                ammPosition.zeroParameter = ammPosition.initialPrice.muld(mulTo) - t; \\n            }\\n\\n    \\n            ammPosition.notional = ammUpdatedNotional;\\n            ammPosition.isLong = newSide;\\n        }\\n    }\\n\\n    \\n    function _ammCummulateFundingPnl(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage ammPosition,\\n        IMarket _market\\n    ) private {\\n        //ONLY once pre block\\n        if (ammPosition.initialBlockNumber == block.number){\\n            return;\\n        }\\n        ammPosition.initialBlockNumber = block.number;\\n\\n\\n        ammPosition.lastNotional = ammPosition.notional;\\n        ammPosition.lastIsLong = ammPosition.isLong;\\n        ammPosition.lastInitialPrice = ammPosition.initialPrice;\\n\\n        ammPosition.unrealizedPnl = PnlLib.getAmmFundingPnl(state, \\n                                                            _market, \\n                                                            ammPosition);\\n        \\n        ammPosition.initialTimestamp = block.timestamp;\\n        ammPosition.cummulativeIndex = _market.currentOracleIndex();\\n\\n    }\\n\\n\\n\\n    /*\\n    **************************************************************************\\n    *   Different netting scenarios\\n    **************************************************************************\\n    */\\n\\n    function _netPosition(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        StorageStripsLib.Position storage prevPosition\\n    ) private returns (int256) {\\n        int256 notional = posParams._collateral * posParams._leverage;\\n        int256 prevNotional = prevPosition.notional;\\n        int256 diff = notional - prevNotional;\\n        // Is itpartly close?\\n        if (diff < 0){\\n            int256 closeRatio = notional.divd(prevNotional);\\n\\n            // If position for liquidation, the AMM will liquidate it\\n            // In other way it will be partly close\\n            return _liquidateWholeOrCloseRatio(state,\\n                                        prevPosition,\\n                                        posParams._market,\\n                                        closeRatio);\\n        }\\n\\n\\n        // Is the new position bigger?\\n        if (diff > 0){\\n\\n            //STEP 1: close prev(long10: return collateral+profit)\\n            int256 slippage = _liquidateWholeOrCloseRatio(state,\\n                                        prevPosition,\\n                                        posParams._market,\\n                                        SignedBaseMath.oneDecimal());\\n            /*\\n            *   open short(5K)\\n            *   We need to save the same proportion\\n            *   diff / (collateral - x) = leverage\\n            *   \\n            *   x = collateral - diff/leverage\\n            *   adjCollateral = collateral - collateral + diff/leverage = difd/leverage \\n            */\\n            posParams._collateral = diff.divd(posParams._leverage.toDecimal());\\n\\n            slippage += _open(state, \\n                                posParams, \\n                                false);  //not a merge\\n            \\n            return slippage;\\n        }\\n\\n        require(true == false, \\\"UNKNOWN_NETTING\\\");\\n    }\\n\\n\\n    function _aggregate(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        StorageStripsLib.Position storage prevPosition\\n    ) private returns (int256) {\\n        //We save ONLY funding_pnl\\n        prevPosition.unrealizedPnl += PnlLib.getFundingUnrealizedPnl(state, \\n                                                            posParams._market, \\n                                                            prevPosition, \\n                                                            SignedBaseMath.oneDecimal(), \\n                                                            true);  //based on CURRENT_MARKET_PRICE\\n        return _open(state,\\n                    posParams,\\n                    true);  // it's a merge\\n    }\\n\\n\\n    function _liquidateWholeOrCloseRatio(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage _position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private returns (int256 slippage){\\n\\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    _position,\\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\\n                                                    false); // Based on exit price\\n\\n\\n        if (marginRatio <= state.getLiquidationRatio()){\\n            //If it's opposite close we can liquidate\\n            _liquidate(state,\\n                        _market,\\n                        address(_market),\\n                        _position\\n            );\\n            slippage = 0;\\n        }else{\\n            slippage = _close(state,\\n                                    _position,\\n                                    _market,\\n                                    _closeRatio); //the whole position\\n        }\\n    }\\n\\n\\n    /*\\n    ****************************************************\\n    * OPEN/CLOSE/LIQUIDATE implementation\\n    ****************************************************\\n    */\\n\\n    //not safe, all checks should be outside\\n    function _close(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private returns (int256 slippage) {\\n        //we need to use closePrice here after the position will be closed\\n        (int256 funding_pnl,\\n        int256 trading_pnl,\\n        int256 traderPnl) = PnlLib.getAllUnrealizedPnl(state,\\n                                                    _market,\\n                                                    position,\\n                                                    _closeRatio,\\n                                                    false);\\n\\n        int256 marketPnl = 0 - traderPnl;\\n\\n\\n        PosInfo memory pos_info = PosInfo({\\n            _notional:position.notional,\\n            _collateral:position.collateral,\\n            _unrealizedPnl:position.unrealizedPnl,\\n            _priceBeforeChange:_market.currentPrice()\\n        });\\n\\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\\n            pos_info._notional = pos_info._notional.muld(_closeRatio);\\n            pos_info._collateral = pos_info._collateral.muld(_closeRatio);\\n            pos_info._unrealizedPnl = pos_info._unrealizedPnl.muld(_closeRatio);\\n        }\\n\\n        int256 closePrice = _market.closePosition(position.isLong, \\n                                                    pos_info._notional);\\n        slippage = (closePrice - pos_info._priceBeforeChange).divd(pos_info._priceBeforeChange);\\n        if (slippage < 0){\\n            slippage *= -1;\\n        }\\n\\n\\n        // something went wrong, don't allow close positions\\n        require(closePrice > 0, \\\"CLOSEPRICE_BROKEN\\\");\\n\\n        //Pay position Fee\\n        //expectedClosePrice\\n        _payPositionFee(state,\\n                        _market, \\n                        msg.sender, \\n                        pos_info._notional, \\n                        closePrice);\\n\\n\\n        if (marketPnl > 0){\\n            //PROFIT: trader pays to Market from collateral\\n\\n            if (marketPnl > pos_info._collateral){\\n                marketPnl = pos_info._collateral;\\n            }\\n\\n            _payProfitOnPositionClose(state,\\n                                    _market,\\n                                    address(this),\\n                                    marketPnl);\\n            int256 left = pos_info._collateral - marketPnl;\\n            if (left > 0){\\n                _returnCollateral(state,\\n                                    msg.sender, \\n                                    left);\\n            }\\n        }\\n        else if (marketPnl < 0){\\n            //LOSS: market pays to trader from liquidity\\n\\n            int256 liquidity = _market.getLiquidity();\\n            if (liquidity < traderPnl){\\n                int256 debt = traderPnl - liquidity;\\n                _borrowInsurance(state,\\n                                    address(_market), \\n                                    debt);\\n            }\\n\\n            state.withdrawFromMarket(_market,\\n                                        msg.sender,\\n                                        traderPnl);\\n            _returnCollateral(state,\\n                                msg.sender,\\n                                pos_info._collateral);\\n        }\\n        else if (marketPnl == 0){\\n            //ZERO: just return collateral to trader\\n            _returnCollateral(state,\\n                                msg.sender,\\n                                pos_info._collateral);\\n        }\\n\\n\\n        int256 paid_funding = funding_pnl;\\n        if (position.isLong == false){\\n            paid_funding*= -1;\\n        }\\n\\n        ammPositionUpdate(state,\\n                _market,\\n                TraderUpdate({\\n                    _notional:pos_info._notional,\\n                    _isLong: position.isLong,\\n                    _initialPrice:position.initialPrice,\\n                    _fundingPaid:paid_funding,\\n                    _isActive:false\\n                }));\\n\\n        _unsetPostion(state,\\n                    position,\\n                    pos_info._notional,\\n                    pos_info._collateral,\\n                    _closeRatio,\\n                    pos_info._unrealizedPnl);\\n    }\\n\\n    function _open(\\n        StorageStripsLib.State storage state,\\n        PositionParams memory posParams,\\n        bool merge\\n    ) private returns (int256 slippage) {\\n        int256 notional = posParams._collateral * posParams._leverage;\\n\\n        _requireNotional(posParams._market,\\n                        notional);\\n\\n        int256 currentPrice = posParams._market.currentPrice();\\n        int256 openPrice = posParams._market.openPosition(posParams._isLong, notional);\\n\\n        slippage = (openPrice - currentPrice).divd(currentPrice);\\n        if (slippage < 0){\\n            slippage *= -1;\\n        }\\n\\n        // something went wrong, don't allow open positions\\n        require(openPrice > 0, \\\"OPEN_PRICE_LTE_0\\\");\\n        \\n        state.setPosition(\\n            posParams._market,\\n            posParams._account,\\n            posParams._isLong,\\n            posParams._collateral,\\n            notional,\\n            openPrice,\\n            merge\\n        );\\n\\n    \\n\\n        //Get collateral on STRIPS balance\\n        _receiveCollateral(state,\\n                            posParams._account, \\n                            posParams._collateral);\\n\\n        //Send fee to Market and Insurance Balance, it will change liquidity\\n        _payPositionFee(state,\\n                        posParams._market, \\n                        posParams._account, \\n                        notional, \\n                        openPrice);\\n        \\n        StorageStripsLib.Position storage position = state.getPosition(posParams._market, posParams._account);\\n        ammPositionUpdate(state,\\n                posParams._market,\\n                TraderUpdate({\\n                    _notional:notional,\\n                    _isLong:posParams._isLong,\\n                    _initialPrice:position.entryPrice,\\n                    _fundingPaid:0,\\n                    _isActive:true\\n                }));\\n    \\n        \\n        //Always check margin after any open\\n        _requireMargin(state,\\n                position,\\n                posParams._market,\\n                SignedBaseMath.oneDecimal());\\n\\n\\n    }\\n\\n    function _liquidate(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        address _liquidator,\\n        StorageStripsLib.Position storage position\\n    ) private {\\n        //The closePrice after the notional removed should be USED\\n\\n        (int256 ammFee,\\n        int256 liquidatorFee,\\n        int256 insuranceFee,\\n        int256 funding_pnl_on_liquidation) = PnlLib.calcLiquidationFee(state,\\n                                                        _market, \\n                                                        position);\\n\\n        int256 closePrice = _market.closePosition(position.isLong, \\n                                                    position.notional);\\n        \\n        require(closePrice > 0, \\\"CLOSE_PRICE_ERROR\\\");\\n\\n\\n        //Calc how much debt we need to borrow for all possible situations\\n        int256 debt = 0; \\n        if (insuranceFee < 0){\\n            debt += 0 - insuranceFee;\\n            \\n            insuranceFee = 0; //We don't pay insuranceFee\\n        }\\n\\n        int256 liquidity = _market.getLiquidity() + debt;\\n\\n        // If not enough then we borrow only for amm and liquidator\\n        // It's ok to borrow more than we need - then we will have enough for the next time. But logic will be simpler.\\n        if (liquidity < (ammFee + liquidatorFee)){\\n            debt = debt + ammFee + liquidatorFee - liquidity;\\n            \\n            insuranceFee = 0; // We don't pay insurance\\n\\n        }\\n        // we have a little bit to pay to insurance but we DON'T borrow\\n        else if(liquidity < (ammFee + liquidatorFee + insuranceFee)) \\n        {\\n            insuranceFee = liquidity - ammFee - liquidatorFee;\\n            if (insuranceFee <= 0){\\n                insuranceFee = 0; //Just don't pay fee in this case\\n            }\\n        }\\n        \\n        /*EVERYTHING paid from collateral:\\n        * 1. Market fee - paid from strips balance to market\\n        * 2. Insurance fee - paid from strips balance to insurance\\n        * 3. Liquidator fee - paid from strips balance to liquidator (we use _returnCollateral)\\n        */\\n        if (debt > 0) {\\n            _borrowInsurance(state,\\n                            address(this), \\n                            debt);//SO if we need to borrow we borrow to STRIPS balance, to keep logic unified\\n\\n        }\\n\\n        state.depositToMarket(_market, address(this), ammFee); //pay to Market\\n\\n        if (insuranceFee > 0){\\n            state.depositToInsurance(address(this), insuranceFee); //pay to Insurance\\n        }\\n        _returnCollateral(state,\\n                        _liquidator, \\n                        liquidatorFee); // pay to liquidator\\n\\n        \\n        \\n        if (position.isLong == false){\\n            funding_pnl_on_liquidation*= -1;\\n        }\\n        ammPositionUpdate(state,\\n                _market,\\n                TraderUpdate({\\n                    _notional:position.notional,\\n                    _isLong:position.isLong,\\n                    _initialPrice:position.initialPrice,\\n                    _fundingPaid:funding_pnl_on_liquidation,\\n                    _isActive:false\\n                }));\\n\\n        if (IStakeble(address(_market)).isRewardable()){\\n            address rewarder = IRewardable(address(_market)).getRewarder();\\n            IRewarder(rewarder).rewardTrader(position.trader, position.notional);\\n        }\\n\\n\\n        //ALWAYS CLOSE here: no need to read from storage, that's why 0\\n        _unsetPostion(state,\\n                    position,\\n                    0,\\n                    0,\\n                    SignedBaseMath.oneDecimal(),\\n                    0);\\n        \\n        position.isLiquidated = true;\\n    }\\n\\n    /*\\n    *\\n    *   HELPERS\\n    *\\n    */\\n    function _unsetPostion(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        int256 notional,\\n        int256 collateral,\\n        int256 _closeRatio,\\n        int256 unrealizedPaid\\n    ) private {\\n        if (_closeRatio == SignedBaseMath.oneDecimal()){\\n            state.unsetPosition(position);\\n        }else{\\n            \\n            //It's just partly close\\n            state.partlyClose(\\n                position,\\n                collateral,\\n                notional,\\n                unrealizedPaid      \\n            );\\n        }\\n    }\\n\\n\\n    function _requireMargin(\\n        StorageStripsLib.State storage state,\\n        StorageStripsLib.Position storage position,\\n        IMarket _market,\\n        int256 _closeRatio\\n    ) private view {\\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\\n                                                    _market,\\n                                                    position,\\n                                                    _closeRatio,\\n                                                    false);  // based on Exit Price always\\n\\n        // Trader can't close position for liquidation                                            \\n        _requireMarginRatio(state, \\n                            marginRatio);\\n    }\\n\\n\\n    function _requireMarginRatio(\\n        StorageStripsLib.State storage state,\\n        int256 marginRatio\\n    ) private view {\\n        require(marginRatio >= state.getLiquidationRatio(), \\\"NOT_ENOUGH_MARGIN\\\");\\n    }\\n\\n    function _requireSlippage(\\n        int256 _requested,\\n        int256 _current\\n    ) private {\\n        require(_requested >= _current, \\\"SLIPPAGE_EXCEEDED\\\");\\n    }\\n\\n\\n    function _requireNotional(\\n        IMarket _market,\\n        int256 notional\\n    ) private returns (int256) {\\n        require(notional > 0, \\\"NOTIONAL_LT_0\\\");\\n\\n        int256 maxNotional = _market.maxNotional();\\n\\n\\n        require(notional <= maxNotional, \\\"NOTIONAL_GT_MAX\\\");\\n\\n        return maxNotional;\\n    }\\n\\n\\n    function _receiveCollateral(\\n        StorageStripsLib.State storage state,\\n        address _from, \\n        int256 _amount\\n    )private returns (int256) {\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                _from, \\n                                address(this), \\n                                uint(_amount));\\n    }\\n\\n    function _returnCollateral(\\n        StorageStripsLib.State storage state,\\n        address _to, \\n        int256 _amount\\n    )private returns (int256) {\\n        SafeERC20.safeTransfer(state.tradingToken, \\n                                _to, \\n                                uint(_amount));\\n    }\\n\\n    function _payProfitOnPositionClose(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _from,\\n        int256 _amount\\n    ) private {\\n        int256 insuranceFee = _amount.muld(state.riskParams.insuranceProfitOnPositionClosed);\\n        int256 marketFee =_amount - insuranceFee;\\n        require(insuranceFee > 0 && marketFee > 0, \\\"FEE_CALC_ERROR\\\");\\n        state.depositToMarket(_market, \\n                                _from, \\n                                marketFee);\\n\\n        //Pay fee to insurance fund\\n        state.depositToInsurance(_from, \\n                                    insuranceFee);\\n\\n\\n    }\\n\\n    //TODO: Can we store all the money on Strips? And just keep balances.\\n    // The only advantage is that Insurance money is safe in case of hack\\n    function _payPositionFee(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _from, \\n        int256 _notional, \\n        int256 _price\\n    ) private returns (int256 marketFee, int256 insuranceFee, int256 daoFee) {\\n\\n        (marketFee, insuranceFee, daoFee) = PnlLib.calcPositionFee(state, \\n                                                            _notional, \\n                                                            _price);\\n\\n\\n        require(marketFee > 0 && insuranceFee > 0, \\\"FEE_CALC_ERROR\\\");\\n\\n        state.depositToMarket(_market, \\n                                _from, \\n                                marketFee);\\n        \\n        //Pay fee to insurance fund\\n        state.depositToInsurance(_from, \\n                                insuranceFee);\\n\\n        //TODO: implement DAO here\\n        state.depositToDao(_from,\\n                            daoFee);\\n    }\\n\\n    function _borrowInsurance(\\n        StorageStripsLib.State storage state,\\n        address _to, \\n        int256 _amount         \\n    ) private {\\n\\n        state.withdrawFromInsurance(_to, _amount);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x1c27a8fce5a8f3f72d8297c3d15cf596d7c5586d2ae75af093d673dc6bde7546\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewardable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"./IRewarder.sol\\\";\\n\\ninterface IRewardable {\\n    function createRewarder(IRewarder.InitParams memory _params) external;\\n    function getRewarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x41b21e1eb0519392072e64c1443706859afd275eda09e3b8ae400aa1efc7c6ba\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/Pnl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"./StorageStrips.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary PnlLib {\\n    int256 constant ANN_PERIOD_SEC = 31536000;\\n\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n    using StorageMarketLib for StorageMarketLib.State;\\n\\n    // To not have stack too deep error\\n    struct PosInfo {\\n        bool isLong;\\n        int256 initialPrice;\\n        uint256 cummulativeIndex;\\n        int256 notional;\\n        int256 unrealizedPnl;\\n    }\\n\\n    struct AmmPosInfo {\\n        int256 notional;        \\n        int256 initialPrice;\\n        bool lastIsLong;\\n    }\\n\\n\\n    function getMarginRatio(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage _position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 total_pnl, int256 marginRatio) {\\n         total_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        \\n        //traderPnl already calculated for right ratio\\n        if (_notionalRatio == SignedBaseMath.oneDecimal()){\\n            marginRatio = (_position.collateral + total_pnl).divd(_position.notional);\\n        }else{\\n            int256 full_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        SignedBaseMath.oneDecimal(),\\n                                        is_market_price);\\n                                        \\n            // Margin ratio after partly close\\n            marginRatio = (_position.collateral.muld(SignedBaseMath.oneDecimal() - _notionalRatio) + full_pnl - total_pnl).divd(_position.notional.muld(SignedBaseMath.oneDecimal() - _notionalRatio));\\n        }\\n    }\\n\\n    function getFundingUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return funding_pnl;\\n    }\\n\\n    \\n    function calcUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return total_pnl;\\n    }\\n\\n    function getAmmTotalPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return total_pnl;\\n    }\\n\\n\\n    function getAmmFundingPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return funding_pnl;\\n    }\\n\\n\\n    function getAmmAllPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n    }\\n\\n    function getAllUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n    }\\n\\n\\n    //It can calc partlyPnl \\n    function calcPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n        \\n        PosInfo memory pos_info;\\n\\n        //Save gas on reading\\n        pos_info.isLong = position.isLong;\\n        pos_info.initialPrice = position.initialPrice;\\n        pos_info.notional = position.notional;\\n        pos_info.unrealizedPnl = position.unrealizedPnl;\\n        if (_notionalRatio != SignedBaseMath.oneDecimal()){\\n            pos_info.notional = pos_info.notional.muld(_notionalRatio);\\n            pos_info.unrealizedPnl = pos_info.unrealizedPnl.muld(_notionalRatio);\\n        }\\n\\n        \\n\\n        int256 _price;\\n\\n        if (is_market_price == true){\\n            _price = _market.currentPrice();\\n        }else{\\n            _price = _market.priceChange(0 - pos_info.notional, \\n                                            pos_info.isLong);\\n        }\\n        \\n        //DONE: after 24-June discussion\\n        trading_pnl = pos_info.notional.muld(_price - pos_info.initialPrice).divd(_price);\\n\\n\\n                //scalar - in seconds since epoch\\n        int256 time_elapsed = int256(block.timestamp - position.initialTimestamp);\\n\\n        //we have funding_pnl ONLY for next block\\n        if (time_elapsed > 0){\\n            int256 oracle_avg = calcOracleAverage(_market, position.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());      \\n\\n            //DONE: after 24-June discussion\\n            funding_pnl = pos_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - pos_info.notional.muld(pos_info.initialPrice.muld(proportion));\\n        }\\n\\n        funding_pnl += pos_info.unrealizedPnl;\\n\\n        if (pos_info.isLong){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl - funding_pnl;\\n        }\\n    }\\n\\n    function calcAmmPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage ammPosition\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n\\n        int256 _price = _market.currentPrice();\\n\\n\\n        //trading calcs always based on current notional\\n        trading_pnl = ammPosition.notional.muld(_price - ammPosition.initialPrice).divd(_price);\\n        if (ammPosition.notional == 0){\\n            trading_pnl = ammPosition.savedTradingPnl;\\n        }\\n\\n        AmmPosInfo memory amm_info = AmmPosInfo({\\n            notional:ammPosition.lastNotional,      \\n            initialPrice:ammPosition.lastInitialPrice,\\n            lastIsLong:ammPosition.lastIsLong\\n        });\\n\\n\\n        if (ammPosition.initialBlockNumber != block.number){\\n            amm_info.notional = ammPosition.notional;\\n            amm_info.initialPrice = ammPosition.initialPrice;\\n            amm_info.lastIsLong = ammPosition.isLong;\\n        }\\n\\n        int256 time_elapsed = int256(block.timestamp - ammPosition.initialTimestamp);\\n\\n        int256 instantFunding;\\n        if (time_elapsed > 0){\\n            int256 oracle_avg;\\n\\n            oracle_avg = calcOracleAverage(_market, ammPosition.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());     \\n\\n            instantFunding = amm_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - amm_info.notional.muld(amm_info.initialPrice.muld(proportion));\\n            \\n            //SUPER carefull here - we need to know the PREVIOUS sign if we calc based on historical value\\n            if (ammPosition.lastIsLong == false){\\n                instantFunding *= -1;\\n            }\\n\\n            \\n            \\n        }\\n\\n\\n        funding_pnl = instantFunding + ammPosition.unrealizedPnl;\\n\\n\\n        //BUT here we are using current isLong of amm\\n        if (ammPosition.notional == 0){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }\\n        else if (ammPosition.isLong == true){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl + funding_pnl;\\n        }\\n\\n    }\\n\\n\\n\\n    function calcOracleAverage(\\n        IMarket _market,\\n        uint256 fromIndex\\n    ) internal view returns (int256) {        \\n        return IAssetOracle(_market.getAssetOracle()).calcOracleAverage(fromIndex);\\n    }\\n\\n    function calcPositionParams(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _account, \\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl, \\n                            int256 trading_pnl,\\n                            int256 total_pnl,\\n                            int256 margin_ratio)\\n    {\\n        StorageStripsLib.Position storage _position = state.getPosition(_market, _account);\\n\\n        (funding_pnl,\\n          trading_pnl,\\n          total_pnl) = calcPnlParts(state, \\n                                    _market, \\n                                    _position,\\n                                    SignedBaseMath.oneDecimal(),\\n                                    is_market_price);\\n        \\n        margin_ratio = (_position.collateral + total_pnl).divd(_position.notional);\\n    }\\n\\n    /*\\n    *\\n    *   FEE CALCULATIOSN\\n    *\\n    */\\n\\n    function calcLiquidationFee(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 ammFee,\\n                            int256 liquidatorFee,\\n                            int256 insuranceFee,\\n                            int256 funding_pnl_liquidated)\\n    {\\n\\n        //we calc PNL based on price after the position is closed\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 unrealizedPnl) = getAllUnrealizedPnl(state,\\n                                                _market, \\n                                                position,\\n                                                SignedBaseMath.oneDecimal(),\\n                                                false);\\n\\n\\n        funding_pnl_liquidated = funding_pnl;\\n\\n        if (unrealizedPnl < 0){\\n            unrealizedPnl *= -1;\\n        }\\n\\n        int256 netEquity = position.collateral - unrealizedPnl;\\n\\n        //Market and liquidator Fee are always the same\\n        ammFee = unrealizedPnl.muld(state.riskParams.marketFeeRatio);\\n        liquidatorFee = unrealizedPnl.muld(state.riskParams.liquidatorFeeRatio);\\n\\n        //easy to read is more important than optimization now\\n        int256 insuranceFeeRatio = SignedBaseMath.oneDecimal() - state.riskParams.liquidatorFeeRatio - state.riskParams.marketFeeRatio;\\n\\n        insuranceFee = unrealizedPnl.muld(insuranceFeeRatio);\\n\\n        insuranceFee += netEquity;\\n    }\\n\\n    function calcPositionFee(\\n        StorageStripsLib.State storage state,\\n        int256 _notional,\\n        int256 _price\\n    ) internal view returns (int256 fee, int256 iFee, int256 daoFee) {\\n        int256 calcPrice = _price;\\n        if (calcPrice < state.riskParams.minimumPricePossible){\\n            calcPrice = state.riskParams.minimumPricePossible;\\n        }\\n\\n        int256 baseFee = calcPrice.muld(_notional).muld(SignedBaseMath.onePercent());\\n\\n        int256 ammFeeRatio = state.riskParams.fundFeeRatio;\\n        int256 daoFeeRatio = state.riskParams.daoFeeRatio;\\n        int256 iFeeRatio = SignedBaseMath.oneDecimal() - ammFeeRatio - daoFeeRatio;\\n\\n        require((ammFeeRatio + daoFeeRatio + iFeeRatio) <= SignedBaseMath.oneDecimal(), \\\"FEE_SUM_GT_1\\\");\\n\\n        fee = ammFeeRatio.muld(baseFee);\\n        daoFee = daoFeeRatio.muld(baseFee);\\n        iFee = iFeeRatio.muld(baseFee);\\n    }\\n}\",\"keccak256\":\"0xb983322e9c32791a626b3ddeb66fbfc6b96c068e112999abb8d57f198b682d44\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"}},\"version\":1}",
  "bytecode": "0x61373c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633c6f723414610050578063b8e73dd214610072578063dc33a4c914610092575b600080fd5b81801561005c57600080fd5b5061007061006b3660046132e4565b6100b2565b005b81801561007e57600080fd5b5061007061008d366004613320565b610332565b81801561009e57600080fd5b506100706100ad3660046132a3565b610620565b6000821380156100c957506100c56106fe565b8213155b61010e5760405162461bcd60e51b815260206004820152601160248201527057524f4e475f434c4f53455f524154494f60781b60448201526064015b60405180910390fd5b600061011b858533610718565b6006810154600b820154919250904314156101735760405162461bcd60e51b815260206004820152601860248201527714d0535157d09313d0d2d7d050d51253d397d1115392515160421b6044820152606401610105565b6101868683876101816106fe565b610793565b61018e6106fe565b84146101a15761019e81856107b0565b90505b60006101af878488886107c7565b90506101bb8482610ba3565b856001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f457600080fd5b505afa158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c919061326f565b15610309576000866001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561026c57600080fd5b505afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190613253565b604051632a236bbd60e11b8152336004820152602481018590529091506001600160a01b03821690635446d77a90604401600060405180830381600087803b1580156102ef57600080fd5b505af1158015610303573d6000803e3d6000fd5b50505050505b600d830154610100900460ff1615610329576103298784886101816106fe565b50505050505050565b60008160400151136103795760405162461bcd60e51b815260206004820152601060248201526f0434f4c4c41544552414c5f4c45515f360841b6044820152606401610105565b80516020808301516001600160a01b0390811660009081526005860183526040808220929094168152915220600b8101544314156103f45760405162461bcd60e51b815260206004820152601860248201527714d0535157d09313d0d2d7d050d51253d397d1115392515160421b6044820152606401610105565b6000808360600151846040015161040b91906135c5565b600d840154909150610100900460ff166104325761042b85856000610beb565b91506104ae565b600d8301546080850151151560ff9091161515146104a05760008460600151856040015161046091906135c5565b9050836006015481141561048c57610485868587600001516104806106fe565b610e4e565b925061049a565b610497868686610ea0565b92505b506104ae565b6104ab858585610f96565b91505b6104bc8460a0015183610ba3565b83600001516001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610531919061326f565b1561061957600084600001516001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190613253565b6020860151604051632a236bbd60e11b81526001600160a01b03918216600482015260248101859052919250821690635446d77a90604401600060405180830381600087803b1580156105ff57600080fd5b505af1158015610613573d6000803e3d6000fd5b50505050505b5050505050565b6001600160a01b0381163314156106795760405162461bcd60e51b815260206004820152601860248201527f5452414445525f43414e5442455f4c495155494441544f5200000000000000006044820152606401610105565b6000610686848484610718565b90506000806106a08686856106996106fe565b6000610fde565b915091506106af866010015490565b8113156106ea5760405162461bcd60e51b81526020600482015260096024820152684d415247494e5f4f4b60b81b6044820152606401610105565b6106f68686338661109f565b505050505050565b6000610713670de0b6b3a764000060016135c5565b905090565b6001600160a01b0380821660009081526005850160209081526040808320938616835292905220600d81015460ff61010090910416151560011461078c5760405162461bcd60e51b815260206004820152600b60248201526a2727afa827a9a4aa24a7a760a91b6044820152606401610105565b9392505050565b60006107a3858486856000610fde565b91505061061985826114e4565b60006107be8383601261152c565b90505b92915050565b6000806000806107db88878988600061154b565b9194509250905060006107ee8282613648565b9050600060405180608001604052808a6006015481526020018a6005015481526020018a600c01548152602001896001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c919061328b565b905290506108986106fe565b87146108d55780516108aa90886107b0565b815260208101516108bb90886107b0565b602082015260408101516108cf90886107b0565b60408201525b600d89015481516040516320d7b99760e01b815260ff9092161515600483015260248201526000906001600160a01b038a16906320d7b99790604401602060405180830381600087803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061328b565b606083015190915061097f906109798184613648565b9061156e565b9650600087121561099957610996600019886135c5565b96505b600081136109dd5760405162461bcd60e51b815260206004820152601160248201527021a627a9a2a82924a1a2afa12927a5a2a760791b6044820152606401610105565b6109ee8b8a3385600001518561158c565b5050506000831315610a4a578160200151831315610a0e57816020015192505b610a1a8b8a308661161d565b6000838360200151610a2c9190613648565b90506000811315610a4457610a428c33836116a4565b505b50610b1c565b6000831215610b06576000896001600160a01b0316630910a5106040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac6919061328b565b905084811215610aeb576000610adc8287613648565b9050610ae98d8c836116c0565b505b610af78c8b33886116d0565b610a428c3385602001516116a4565b82610b1c57610b1a8b3384602001516116a4565b505b600d8a0154869060ff16610b3957610b36600019826135c5565b90505b6040805160a0810182528451815260028d0154602082015290810182905260006060820152600d8c015460ff1615156080820152610b7a908d908c9061189c565b610b948c8c856000015186602001518d8860400151611b45565b50505050505050949350505050565b80821215610be75760405162461bcd60e51b815260206004820152601160248201527014d31254141051d157d15610d151511151607a1b6044820152606401610105565b5050565b60008083606001518460400151610c0291906135c5565b9050610c12846000015182611b70565b50600084600001516001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a919061328b565b8551608087015160405163036284eb60e41b81529015156004820152602481018590529192506000916001600160a01b03909116906336284eb090604401602060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a919061328b565b9050610d2a826109798184613648565b93506000841215610d4457610d41600019856135c5565b93505b60008113610d875760405162461bcd60e51b815260206004820152601060248201526f04f50454e5f50524943455f4c54455f360841b6044820152606401610105565b8551602087015160808801516040890151610daa938b939092909188878c611c68565b50610dbe878760200151886040015161205c565b50610dd48787600001518860200151868561158c565b50508651602088015160009250610dec918a91610718565b9050610e318888600001516040518060a0016040528088815260200185600301548152602001600081526020016001151581526020018b60800151151581525061189c565b610e43888289600001516101816106fe565b505050509392505050565b600080610e5f8685876106996106fe565b915050610e6d866010015490565b8113610e8857610e7f8685868861109f565b60009150610e97565b610e94868686866107c7565b91505b50949350505050565b60008083606001518460400151610eb791906135c5565b60068401549091506000610ecb8284613648565b90506000811215610eff576000610ee2848461156e565b9050610ef48887896000015184610e4e565b94505050505061078c565b6000811315610f5c576000610f1c888789600001516104806106fe565b9050610f35610f2e8860600151612079565b839061156e565b6040880152610f4688886000610beb565b610f509082613447565b945061078c9350505050565b60405162461bcd60e51b815260206004820152600f60248201526e554e4b4e4f574e5f4e455454494e4760881b6044820152606401610105565b6000610fb184846000015184610faa6106fe565b600161208d565b82600c016000828254610fc49190613447565b90915550610fd6905084846001610beb565b949350505050565b600080610fee87878787876120b0565b9150610ff86106fe565b84141561101e5761101785600601548387600501546109799190613447565b9050611095565b600061103488888861102e6106fe565b886120b0565b905061109161105a866110456106fe565b61104f9190613648565b6006890154906107b0565b848361107d896110686106fe565b6110729190613648565b60058c0154906107b0565b6110879190613447565b6109799190613648565b9150505b9550959350505050565b6000806000806110b08888876120d2565b600d89015460068a01546040516320d7b99760e01b815260ff909216151560048301526024820152939750919550935091506000906001600160a01b038916906320d7b99790604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b919061328b565b9050600081136111915760405162461bcd60e51b815260206004820152601160248201527021a627a9a2afa82924a1a2afa2a92927a960791b6044820152606401610105565b6000808412156111b7576111a6846000613648565b6111b09082613447565b9050600093505b6000818a6001600160a01b0316630910a5106040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f357600080fd5b505afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b919061328b565b6112359190613447565b90506112418688613447565b8112156112735780866112548985613447565b61125e9190613447565b6112689190613648565b9150600094506112b3565b8461127e8789613447565b6112889190613447565b8112156112b3578561129a8883613648565b6112a49190613648565b9450600085136112b357600094505b60008213156112c7576112c78b30846116c0565b6112d38b8b308a61219f565b60008513156112e7576112e78b3087612293565b6112f28b8a886116a4565b50600d88015460ff1661130e5761130b600019856135c5565b93505b6040805160a08101825260068a0154815260028a0154602082015290810185905260006060820152600d89015460ff1615156080820152611352908c908c9061189c565b896001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061326f565b156114ad5760008a6001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190613253565b60018a015460068b0154604051632a236bbd60e11b81526001600160a01b0392831660048201526024810191909152919250821690635446d77a90604401600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b50505050505b6114c48b896000806114bd6106fe565b6000611b45565b505050600d909401805462ff000019166201000017905550505050505050565b6010820154811215610be75760405162461bcd60e51b81526020600482015260116024820152702727aa2fa2a727aaa3a42fa6a0a923a4a760791b6044820152606401610105565b600061153782612409565b61154184866135c5565b610fd691906134a0565b600080600061155d8888888888612419565b919a90995090975095505050505050565b600081600114156115805750816107c1565b6107be838360126126e9565b600080600061159c8886866126ff565b919450925090506000831380156115b35750600082135b6115f05760405162461bcd60e51b815260206004820152600e60248201526d2322a2afa1a0a621afa2a92927a960911b6044820152606401610105565b6115fc8888888661219f565b611607888784612293565b6116128887836127ee565b955095509592505050565b600f8401546000906116309083906107b0565b9050600061163e8284613648565b90506000821380156116505750600081135b61168d5760405162461bcd60e51b815260206004820152600e60248201526d2322a2afa1a0a621afa2a92927a960911b6044820152606401610105565b6116998686868461219f565b6106f6868584612293565b601383015460009061078c906001600160a01b0316848461289f565b6116cb838383612902565b505050565b600081136116f05760405162461bcd60e51b815260040161010590613421565b6116fa8484612a5b565b50604051631f36232360e01b8152600481018290526001600160a01b03841690631f36232390602401600060405180830381600087803b15801561173d57600080fd5b505af1158015611751573d6000803e3d6000fd5b505050506013840154604051635690f64d60e01b81526001600160a01b0391821660048201526024810183905290841690635690f64d90604401600060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b50505060138501546117d791506001600160a01b0316848484612ab7565b826001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561181257600080fd5b505af1158015611826573d6000803e3d6000fd5b50505050826001600160a01b031663e71acffe8260006118469190613648565b6040518263ffffffff1660e01b815260040161186491815260200190565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038216600090815260058401602090815260408083209091529020600d810154610100900460ff166119095760608201516118de5750505050565b60808201518251602084015191159161190291879187918291869160009182611c68565b5050611b3f565b611914848285612aef565b6006810154600d820154608084015184516060860151849360ff1692839290159161194857611945600019826135c5565b90505b81151584151514156119815761195e8186613447565b9450600085121561197c57611975600019866135c5565b9450831592505b6119b3565b600061198d8288613648565b90506000811261199f578095506119b1565b6119aa816000613648565b9550841593505b505b60608801516119da57876040015187600c0160008282546119d49190613447565b90915550505b602088015188516000916119ee91906107b0565b90508860600151151560011515148015611a0a57506080890151155b15611a2257611a1b600019826135c5565b9050611a4e565b6060890151158015611a3a5750608089015115156001145b15611a4e57611a4b600019826135c5565b90505b8515611abc576002880154600090611a6690896107b0565b905087611a785750600f880154611a8c565b85611a8c57611a89600019826135c5565b90505b8685611aa157611a9e600019826135c5565b90505b611aaf816109798585613648565b60028b015550611b1e9050565b8685611ad157611ace600019826135c5565b90505b611af78a60200151610979838c600201548e60200151611af19190613648565b906107b0565b600e8a015560028901548290611b0d90836107b0565b611b179190613648565b600f8a0155505b505050600685019290925550600d8301805460ff1916911515919091179055505b50505050565b611b4d6106fe565b821415611b6357611b5e8686612bd0565b6106f6565b6106f68686858785612c53565b6000808213611bb15760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b6044820152606401610105565b6000836001600160a01b0316638ec812ee6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c24919061328b565b9050808313156107be5760405162461bcd60e51b815260206004820152600f60248201526e09c9ea8929e9c8298be8ea8be9a82b608b1b6044820152606401610105565b6001600160a01b038616600090815260048901602052604081205460ff16611cda57600389018054600180820183556000928352602080842090920180546001600160a01b0319166001600160a01b038c16908117909155835260048c019091526040909120805460ff191690911790555b6001600160a01b03808816600081815260058c0160209081526040808320948d168084529490915290209114801590611d1d5750600d810154610100900460ff16155b15611e9357600a810154611e725760088a0154611d3c57600160088b01555b896008015481600a01819055508960060181600a015490806001815401808255809150506001900390600052602060002001600090919091909150556040518060800160405280600115158152602001896001600160a01b031681526020018a6001600160a01b0316815260200182600a01548152508a600701600083600a0154815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816002015590505060018a6008016000828254611e679190613488565b90915550611e939050565b600a810154600090815260078b0160205260409020805460ff191660011790555b600a8101546001820180546001600160a01b03808c166001600160a01b03199283161790925543600b850155600d840180548b151562ffffff19909116176101001790558354918c169116811783556040805163e2b99e6b60e01b81529051929450909163e2b99e6b91600480820192602092909190829003018186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f55919061328b565b600882015542600782015543600982015560038101849055600481015484908015611fae576006830154611faa611f8c828a613447565b611f96898b6107b0565b611fa085856107b0565b6109799190613447565b9250505b60048301829055600185151514156120005787836005016000828254611fd49190613447565b9250508190555086836006016000828254611fef9190613447565b90915550506002830182905561204d565b6005830188905560068301879055600283018690556001600160a01b038b8116908b16141561204d57600d8301805463ff0000001916630100000017905560108301879055601183018690555b50505098975050505050505050565b601383015460009061078c906001600160a01b0316843085612ab7565b60006107c1670de0b6b3a7640000836135c5565b6000806000806120a08989898989612419565b50909a9950505050505050505050565b6000806000806120c38989898989612419565b9b9a5050505050505050505050565b60008060008060008060006120f28a8a8a6120eb6106fe565b600061154b565b925092509250829350600081121561211357612110600019826135c5565b90505b60008189600501546121259190613648565b600e8c01549091506121389083906107b0565b600d8c015490985061214b9083906107b0565b600e8c0154600d8d01549198506000916121636106fe565b61216d9190613648565b6121779190613648565b905061218383826107b0565b965061218f8288613447565b9650505050505093509350935093565b600081136121bf5760405162461bcd60e51b815260040161010590613421565b6121c98484612a5b565b506001600160a01b0382163014156121f95760138401546121f4906001600160a01b0316848361289f565b612213565b6013840154612213906001600160a01b0316838584612ab7565b826001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b505060405163738d67ff60e11b8152600481018490526001600160a01b038616925063e71acffe9150602401611864565b60128301546001600160a01b03166122e85760405162461bcd60e51b815260206004820152601860248201527742524f4b454e5f494e535552414e43455f4144445245535360401b6044820152606401610105565b6001600160a01b03821630141561231f576013830154601284015461231a916001600160a01b0390811691168361289f565b612342565b60138301546012840154612342916001600160a01b039081169185911684612ab7565b8260120160009054906101000a90046001600160a01b03166001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561239457600080fd5b505af11580156123a8573d6000803e3d6000fd5b50505050601283015460405163738d67ff60e11b8152600481018390526001600160a01b039091169063e71acffe906024015b600060405180830381600087803b1580156123f557600080fd5b505af1158015610329573d6000803e3d6000fd5b60006107c160ff8316600a61351d565b60008060006124526040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b600d87015460ff16151581526002870154602082015260068701546060820152600c87015460808201526124846106fe565b86146124b357606081015161249990876107b0565b606082015260808101516124ad90876107b0565b60808201525b60006001861515141561253857886001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f957600080fd5b505afa15801561250d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612531919061328b565b90506125d3565b886001600160a01b031663dc028c08836060015160006125589190613648565b845160405160e084901b6001600160e01b031916815260048101929092521515602482015260440160206040518083038186803b15801561259857600080fd5b505afa1580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d0919061328b565b90505b6125f5816109798460200151846125ea9190613648565b6060860151906107b0565b935060008860070154426126099190613687565b905060008113156126985760006126248b8b60080154612cb2565b905060006126416126386301e13380612079565b61097985612079565b905061266861265d8287602001516107b090919063ffffffff16565b6060870151906107b0565b61268961267e61267786612079565b85906107b0565b6060880151906107b0565b6126939190613648565b975050505b60808301516126a79087613447565b8351909650156126c2576126bb8587613447565b93506126db565b856126ce866000613648565b6126d89190613648565b93505b505050955095509592505050565b6000826126f583612409565b61154190866135c5565b601183015460009081908190849081121561271b575060118601545b6000612732612728612da2565b611af1848a6107b0565b600b890154600c8a0154919250906000818361274c6106fe565b6127569190613648565b6127609190613648565b905061276a6106fe565b816127758486613447565b61277f9190613447565b13156127bc5760405162461bcd60e51b815260206004820152600c60248201526b4645455f53554d5f47545f3160a01b6044820152606401610105565b6127c683856107b0565b97506127d282856107b0565b95506127de81856107b0565b9650505050505093509350939050565b6000811361280e5760405162461bcd60e51b815260040161010590613421565b82546001600160a01b03166128505760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b6044820152606401610105565b6001600160a01b03821630141561287f57601383015483546116cb916001600160a01b0390811691168361289f565b601383015483546116cb916001600160a01b039081169185911684612ab7565b6040516001600160a01b0383166024820152604481018290526116cb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612db6565b60128301546001600160a01b03166129575760405162461bcd60e51b815260206004820152601860248201527742524f4b454e5f494e535552414e43455f4144445245535360401b6044820152606401610105565b6012830154604051631f36232360e01b8152600481018390526001600160a01b0390911690631f36232390602401600060405180830381600087803b15801561299f57600080fd5b505af11580156129b3573d6000803e3d6000fd5b505050506012830154604051637da7d3f160e01b81526001600160a01b0384811660048301526024820184905290911690637da7d3f190604401600060405180830381600087803b158015612a0757600080fd5b505af1158015612a1b573d6000803e3d6000fd5b5050505060128301546001600160a01b031663e71acffe612a3d836000613648565b6040518263ffffffff1660e01b81526004016123db91815260200190565b6001600160a01b03811660009081526002830160205260409020805460ff1615156001146107c15760405162461bcd60e51b81526020600482015260096024820152681393d7d3505492d15560ba1b6044820152606401610105565b6040516001600160a01b0380851660248301528316604482015260648101829052611b3f9085906323b872dd60e01b906084016128cb565b4382600901541415612b0057505050565b43600983015560068201546010830155600d82015460128301805460ff191660ff909216151591909117905560028201546011830155612b41838284612e88565b82600c0181905550428260070181905550806001600160a01b031663e2b99e6b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc3919061328b565b8260080181905550505050565b600d810154610100900460ff16612be5575050565b600a8101546000908152600792830160205260408120805460ff1916905543600b830155600d8201805461ff0019169055600382018190556005820181905560068201819055600282018190556008820181905591810182905560098101829055600c810182905560040155565b82846005016000828254612c679190613648565b9250508190555081846006016000828254612c829190613648565b925050819055508084600c016000828254612c9d9190613648565b909155505043600b9094019390935550505050565b6000826001600160a01b0316634dde1fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ced57600080fd5b505afa158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d259190613253565b6001600160a01b031663796ba96c836040518263ffffffff1660e01b8152600401612d5291815260200190565b60206040518083038186803b158015612d6a57600080fd5b505afa158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be919061328b565b6000610713662386f26fc1000060016135c5565b6000612e0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ea79092919063ffffffff16565b8051909150156116cb5780806020019051810190612e29919061326f565b6116cb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610105565b600080600080612e99878787612eb6565b509098975050505050505050565b6060610fd684846000856130d7565b600080600080856001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef557600080fd5b505afa158015612f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2d919061328b565b9050612f468161097987600201548461104f9190613648565b9250846006015460001415612f5d5784600e015492505b604080516060810182526010870154815260118701546020820152601287015460ff1615159181019190915260098601544314612fb5576006860154815260028601546020820152600d86015460ff16151560408201525b6000866007015442612fc79190613687565b9050600080821315613066576000612fe38a8a60080154612cb2565b90506000613000612ff76301e13380612079565b61097986612079565b905061302461301c8287602001516107b090919063ffffffff16565b8651906107b0565b61303b61303361267787612079565b8751906107b0565b6130459190613648565b60128b015490935060ff1661306357613060600019846135c5565b92505b50505b600c8801546130759082613447565b96508760060154600014156130955761308e8688613447565b94506130ca565b600d88015460ff161515600114156130b15761308e8688613447565b866130bd876000613648565b6130c79190613447565b94505b5050505093509350939050565b6060824710156131385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610105565b843b6131865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b600080866001600160a01b031685876040516131a291906133d2565b60006040518083038185875af1925050503d80600081146131df576040519150601f19603f3d011682016040523d82523d6000602084013e6131e4565b606091505b50915091506131f48282866131ff565b979650505050505050565b6060831561320e57508161078c565b82511561321e5782518084602001fd5b8160405162461bcd60e51b815260040161010591906133ee565b8035613243816136e0565b919050565b8035613243816136f8565b600060208284031215613264578081fd5b81516107be816136e0565b600060208284031215613280578081fd5b81516107be816136f8565b60006020828403121561329c578081fd5b5051919050565b6000806000606084860312156132b7578182fd5b8335925060208401356132c9816136e0565b915060408401356132d9816136e0565b809150509250925092565b600080600080608085870312156132f9578081fd5b84359350602085013561330b816136e0565b93969395505050506040820135916060013590565b60008082840360e0811215613333578283fd5b8335925060c0601f1982011215613348578182fd5b5060405160c0810181811067ffffffffffffffff8211171561337857634e487b7160e01b83526041600452602483fd5b60405261338760208501613238565b815261339560408501613238565b602082015260608401356040820152608084013560608201526133ba60a08501613248565b608082015260c0939093013560a08401525092909150565b600082516133e481846020870161369e565b9190910192915050565b602081526000825180602084015261340d81604085016020870161369e565b601f01601f19169190910160400192915050565b6020808252600c908201526b15d493d391d7d05353d5539560a21b604082015260600190565b600080821280156001600160ff1b0384900385131615613469576134696136ca565b600160ff1b8390038412811615613482576134826136ca565b50500190565b6000821982111561349b5761349b6136ca565b500190565b6000826134bb57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156134d5576134d56136ca565b500590565b600181815b808511156135155781600019048211156134fb576134fb6136ca565b8085161561350857918102915b93841c93908002906134df565b509250929050565b60006107be8383600082613533575060016107c1565b81613540575060006107c1565b816001811461355657600281146135605761357c565b60019150506107c1565b60ff841115613571576135716136ca565b50506001821b6107c1565b5060208310610133831016604e8410600b841016171561359f575081810a6107c1565b6135a983836134da565b80600019048211156135bd576135bd6136ca565b029392505050565b60006001600160ff1b03818413828413808216868404861116156135eb576135eb6136ca565b600160ff1b84871282811687830589121615613609576136096136ca565b858712925087820587128484161615613624576136246136ca565b8785058712818416161561363a5761363a6136ca565b505050929093029392505050565b60008083128015600160ff1b850184121615613666576136666136ca565b6001600160ff1b0384018313811615613681576136816136ca565b50500390565b600082821015613699576136996136ca565b500390565b60005b838110156136b95781810151838201526020016136a1565b83811115611b3f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146136f557600080fd5b50565b80151581146136f557600080fdfea264697066735822122005967186e637277a0d63fc1e68ab06393598838c7a6ff6bd0e5ce57b6d0788ca64736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633c6f723414610050578063b8e73dd214610072578063dc33a4c914610092575b600080fd5b81801561005c57600080fd5b5061007061006b3660046132e4565b6100b2565b005b81801561007e57600080fd5b5061007061008d366004613320565b610332565b81801561009e57600080fd5b506100706100ad3660046132a3565b610620565b6000821380156100c957506100c56106fe565b8213155b61010e5760405162461bcd60e51b815260206004820152601160248201527057524f4e475f434c4f53455f524154494f60781b60448201526064015b60405180910390fd5b600061011b858533610718565b6006810154600b820154919250904314156101735760405162461bcd60e51b815260206004820152601860248201527714d0535157d09313d0d2d7d050d51253d397d1115392515160421b6044820152606401610105565b6101868683876101816106fe565b610793565b61018e6106fe565b84146101a15761019e81856107b0565b90505b60006101af878488886107c7565b90506101bb8482610ba3565b856001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f457600080fd5b505afa158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c919061326f565b15610309576000866001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561026c57600080fd5b505afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190613253565b604051632a236bbd60e11b8152336004820152602481018590529091506001600160a01b03821690635446d77a90604401600060405180830381600087803b1580156102ef57600080fd5b505af1158015610303573d6000803e3d6000fd5b50505050505b600d830154610100900460ff1615610329576103298784886101816106fe565b50505050505050565b60008160400151136103795760405162461bcd60e51b815260206004820152601060248201526f0434f4c4c41544552414c5f4c45515f360841b6044820152606401610105565b80516020808301516001600160a01b0390811660009081526005860183526040808220929094168152915220600b8101544314156103f45760405162461bcd60e51b815260206004820152601860248201527714d0535157d09313d0d2d7d050d51253d397d1115392515160421b6044820152606401610105565b6000808360600151846040015161040b91906135c5565b600d840154909150610100900460ff166104325761042b85856000610beb565b91506104ae565b600d8301546080850151151560ff9091161515146104a05760008460600151856040015161046091906135c5565b9050836006015481141561048c57610485868587600001516104806106fe565b610e4e565b925061049a565b610497868686610ea0565b92505b506104ae565b6104ab858585610f96565b91505b6104bc8460a0015183610ba3565b83600001516001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610531919061326f565b1561061957600084600001516001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190613253565b6020860151604051632a236bbd60e11b81526001600160a01b03918216600482015260248101859052919250821690635446d77a90604401600060405180830381600087803b1580156105ff57600080fd5b505af1158015610613573d6000803e3d6000fd5b50505050505b5050505050565b6001600160a01b0381163314156106795760405162461bcd60e51b815260206004820152601860248201527f5452414445525f43414e5442455f4c495155494441544f5200000000000000006044820152606401610105565b6000610686848484610718565b90506000806106a08686856106996106fe565b6000610fde565b915091506106af866010015490565b8113156106ea5760405162461bcd60e51b81526020600482015260096024820152684d415247494e5f4f4b60b81b6044820152606401610105565b6106f68686338661109f565b505050505050565b6000610713670de0b6b3a764000060016135c5565b905090565b6001600160a01b0380821660009081526005850160209081526040808320938616835292905220600d81015460ff61010090910416151560011461078c5760405162461bcd60e51b815260206004820152600b60248201526a2727afa827a9a4aa24a7a760a91b6044820152606401610105565b9392505050565b60006107a3858486856000610fde565b91505061061985826114e4565b60006107be8383601261152c565b90505b92915050565b6000806000806107db88878988600061154b565b9194509250905060006107ee8282613648565b9050600060405180608001604052808a6006015481526020018a6005015481526020018a600c01548152602001896001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c919061328b565b905290506108986106fe565b87146108d55780516108aa90886107b0565b815260208101516108bb90886107b0565b602082015260408101516108cf90886107b0565b60408201525b600d89015481516040516320d7b99760e01b815260ff9092161515600483015260248201526000906001600160a01b038a16906320d7b99790604401602060405180830381600087803b15801561092b57600080fd5b505af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061328b565b606083015190915061097f906109798184613648565b9061156e565b9650600087121561099957610996600019886135c5565b96505b600081136109dd5760405162461bcd60e51b815260206004820152601160248201527021a627a9a2a82924a1a2afa12927a5a2a760791b6044820152606401610105565b6109ee8b8a3385600001518561158c565b5050506000831315610a4a578160200151831315610a0e57816020015192505b610a1a8b8a308661161d565b6000838360200151610a2c9190613648565b90506000811315610a4457610a428c33836116a4565b505b50610b1c565b6000831215610b06576000896001600160a01b0316630910a5106040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac6919061328b565b905084811215610aeb576000610adc8287613648565b9050610ae98d8c836116c0565b505b610af78c8b33886116d0565b610a428c3385602001516116a4565b82610b1c57610b1a8b3384602001516116a4565b505b600d8a0154869060ff16610b3957610b36600019826135c5565b90505b6040805160a0810182528451815260028d0154602082015290810182905260006060820152600d8c015460ff1615156080820152610b7a908d908c9061189c565b610b948c8c856000015186602001518d8860400151611b45565b50505050505050949350505050565b80821215610be75760405162461bcd60e51b815260206004820152601160248201527014d31254141051d157d15610d151511151607a1b6044820152606401610105565b5050565b60008083606001518460400151610c0291906135c5565b9050610c12846000015182611b70565b50600084600001516001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a919061328b565b8551608087015160405163036284eb60e41b81529015156004820152602481018590529192506000916001600160a01b03909116906336284eb090604401602060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a919061328b565b9050610d2a826109798184613648565b93506000841215610d4457610d41600019856135c5565b93505b60008113610d875760405162461bcd60e51b815260206004820152601060248201526f04f50454e5f50524943455f4c54455f360841b6044820152606401610105565b8551602087015160808801516040890151610daa938b939092909188878c611c68565b50610dbe878760200151886040015161205c565b50610dd48787600001518860200151868561158c565b50508651602088015160009250610dec918a91610718565b9050610e318888600001516040518060a0016040528088815260200185600301548152602001600081526020016001151581526020018b60800151151581525061189c565b610e43888289600001516101816106fe565b505050509392505050565b600080610e5f8685876106996106fe565b915050610e6d866010015490565b8113610e8857610e7f8685868861109f565b60009150610e97565b610e94868686866107c7565b91505b50949350505050565b60008083606001518460400151610eb791906135c5565b60068401549091506000610ecb8284613648565b90506000811215610eff576000610ee2848461156e565b9050610ef48887896000015184610e4e565b94505050505061078c565b6000811315610f5c576000610f1c888789600001516104806106fe565b9050610f35610f2e8860600151612079565b839061156e565b6040880152610f4688886000610beb565b610f509082613447565b945061078c9350505050565b60405162461bcd60e51b815260206004820152600f60248201526e554e4b4e4f574e5f4e455454494e4760881b6044820152606401610105565b6000610fb184846000015184610faa6106fe565b600161208d565b82600c016000828254610fc49190613447565b90915550610fd6905084846001610beb565b949350505050565b600080610fee87878787876120b0565b9150610ff86106fe565b84141561101e5761101785600601548387600501546109799190613447565b9050611095565b600061103488888861102e6106fe565b886120b0565b905061109161105a866110456106fe565b61104f9190613648565b6006890154906107b0565b848361107d896110686106fe565b6110729190613648565b60058c0154906107b0565b6110879190613447565b6109799190613648565b9150505b9550959350505050565b6000806000806110b08888876120d2565b600d89015460068a01546040516320d7b99760e01b815260ff909216151560048301526024820152939750919550935091506000906001600160a01b038916906320d7b99790604401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b919061328b565b9050600081136111915760405162461bcd60e51b815260206004820152601160248201527021a627a9a2afa82924a1a2afa2a92927a960791b6044820152606401610105565b6000808412156111b7576111a6846000613648565b6111b09082613447565b9050600093505b6000818a6001600160a01b0316630910a5106040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f357600080fd5b505afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b919061328b565b6112359190613447565b90506112418688613447565b8112156112735780866112548985613447565b61125e9190613447565b6112689190613648565b9150600094506112b3565b8461127e8789613447565b6112889190613447565b8112156112b3578561129a8883613648565b6112a49190613648565b9450600085136112b357600094505b60008213156112c7576112c78b30846116c0565b6112d38b8b308a61219f565b60008513156112e7576112e78b3087612293565b6112f28b8a886116a4565b50600d88015460ff1661130e5761130b600019856135c5565b93505b6040805160a08101825260068a0154815260028a0154602082015290810185905260006060820152600d89015460ff1615156080820152611352908c908c9061189c565b896001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c3919061326f565b156114ad5760008a6001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b9190613253565b60018a015460068b0154604051632a236bbd60e11b81526001600160a01b0392831660048201526024810191909152919250821690635446d77a90604401600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b50505050505b6114c48b896000806114bd6106fe565b6000611b45565b505050600d909401805462ff000019166201000017905550505050505050565b6010820154811215610be75760405162461bcd60e51b81526020600482015260116024820152702727aa2fa2a727aaa3a42fa6a0a923a4a760791b6044820152606401610105565b600061153782612409565b61154184866135c5565b610fd691906134a0565b600080600061155d8888888888612419565b919a90995090975095505050505050565b600081600114156115805750816107c1565b6107be838360126126e9565b600080600061159c8886866126ff565b919450925090506000831380156115b35750600082135b6115f05760405162461bcd60e51b815260206004820152600e60248201526d2322a2afa1a0a621afa2a92927a960911b6044820152606401610105565b6115fc8888888661219f565b611607888784612293565b6116128887836127ee565b955095509592505050565b600f8401546000906116309083906107b0565b9050600061163e8284613648565b90506000821380156116505750600081135b61168d5760405162461bcd60e51b815260206004820152600e60248201526d2322a2afa1a0a621afa2a92927a960911b6044820152606401610105565b6116998686868461219f565b6106f6868584612293565b601383015460009061078c906001600160a01b0316848461289f565b6116cb838383612902565b505050565b600081136116f05760405162461bcd60e51b815260040161010590613421565b6116fa8484612a5b565b50604051631f36232360e01b8152600481018290526001600160a01b03841690631f36232390602401600060405180830381600087803b15801561173d57600080fd5b505af1158015611751573d6000803e3d6000fd5b505050506013840154604051635690f64d60e01b81526001600160a01b0391821660048201526024810183905290841690635690f64d90604401600060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b50505060138501546117d791506001600160a01b0316848484612ab7565b826001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561181257600080fd5b505af1158015611826573d6000803e3d6000fd5b50505050826001600160a01b031663e71acffe8260006118469190613648565b6040518263ffffffff1660e01b815260040161186491815260200190565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038216600090815260058401602090815260408083209091529020600d810154610100900460ff166119095760608201516118de5750505050565b60808201518251602084015191159161190291879187918291869160009182611c68565b5050611b3f565b611914848285612aef565b6006810154600d820154608084015184516060860151849360ff1692839290159161194857611945600019826135c5565b90505b81151584151514156119815761195e8186613447565b9450600085121561197c57611975600019866135c5565b9450831592505b6119b3565b600061198d8288613648565b90506000811261199f578095506119b1565b6119aa816000613648565b9550841593505b505b60608801516119da57876040015187600c0160008282546119d49190613447565b90915550505b602088015188516000916119ee91906107b0565b90508860600151151560011515148015611a0a57506080890151155b15611a2257611a1b600019826135c5565b9050611a4e565b6060890151158015611a3a5750608089015115156001145b15611a4e57611a4b600019826135c5565b90505b8515611abc576002880154600090611a6690896107b0565b905087611a785750600f880154611a8c565b85611a8c57611a89600019826135c5565b90505b8685611aa157611a9e600019826135c5565b90505b611aaf816109798585613648565b60028b015550611b1e9050565b8685611ad157611ace600019826135c5565b90505b611af78a60200151610979838c600201548e60200151611af19190613648565b906107b0565b600e8a015560028901548290611b0d90836107b0565b611b179190613648565b600f8a0155505b505050600685019290925550600d8301805460ff1916911515919091179055505b50505050565b611b4d6106fe565b821415611b6357611b5e8686612bd0565b6106f6565b6106f68686858785612c53565b6000808213611bb15760405162461bcd60e51b815260206004820152600d60248201526c04e4f54494f4e414c5f4c545f3609c1b6044820152606401610105565b6000836001600160a01b0316638ec812ee6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bec57600080fd5b505afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c24919061328b565b9050808313156107be5760405162461bcd60e51b815260206004820152600f60248201526e09c9ea8929e9c8298be8ea8be9a82b608b1b6044820152606401610105565b6001600160a01b038616600090815260048901602052604081205460ff16611cda57600389018054600180820183556000928352602080842090920180546001600160a01b0319166001600160a01b038c16908117909155835260048c019091526040909120805460ff191690911790555b6001600160a01b03808816600081815260058c0160209081526040808320948d168084529490915290209114801590611d1d5750600d810154610100900460ff16155b15611e9357600a810154611e725760088a0154611d3c57600160088b01555b896008015481600a01819055508960060181600a015490806001815401808255809150506001900390600052602060002001600090919091909150556040518060800160405280600115158152602001896001600160a01b031681526020018a6001600160a01b0316815260200182600a01548152508a600701600083600a0154815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816002015590505060018a6008016000828254611e679190613488565b90915550611e939050565b600a810154600090815260078b0160205260409020805460ff191660011790555b600a8101546001820180546001600160a01b03808c166001600160a01b03199283161790925543600b850155600d840180548b151562ffffff19909116176101001790558354918c169116811783556040805163e2b99e6b60e01b81529051929450909163e2b99e6b91600480820192602092909190829003018186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f55919061328b565b600882015542600782015543600982015560038101849055600481015484908015611fae576006830154611faa611f8c828a613447565b611f96898b6107b0565b611fa085856107b0565b6109799190613447565b9250505b60048301829055600185151514156120005787836005016000828254611fd49190613447565b9250508190555086836006016000828254611fef9190613447565b90915550506002830182905561204d565b6005830188905560068301879055600283018690556001600160a01b038b8116908b16141561204d57600d8301805463ff0000001916630100000017905560108301879055601183018690555b50505098975050505050505050565b601383015460009061078c906001600160a01b0316843085612ab7565b60006107c1670de0b6b3a7640000836135c5565b6000806000806120a08989898989612419565b50909a9950505050505050505050565b6000806000806120c38989898989612419565b9b9a5050505050505050505050565b60008060008060008060006120f28a8a8a6120eb6106fe565b600061154b565b925092509250829350600081121561211357612110600019826135c5565b90505b60008189600501546121259190613648565b600e8c01549091506121389083906107b0565b600d8c015490985061214b9083906107b0565b600e8c0154600d8d01549198506000916121636106fe565b61216d9190613648565b6121779190613648565b905061218383826107b0565b965061218f8288613447565b9650505050505093509350935093565b600081136121bf5760405162461bcd60e51b815260040161010590613421565b6121c98484612a5b565b506001600160a01b0382163014156121f95760138401546121f4906001600160a01b0316848361289f565b612213565b6013840154612213906001600160a01b0316838584612ab7565b826001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b505060405163738d67ff60e11b8152600481018490526001600160a01b038616925063e71acffe9150602401611864565b60128301546001600160a01b03166122e85760405162461bcd60e51b815260206004820152601860248201527742524f4b454e5f494e535552414e43455f4144445245535360401b6044820152606401610105565b6001600160a01b03821630141561231f576013830154601284015461231a916001600160a01b0390811691168361289f565b612342565b60138301546012840154612342916001600160a01b039081169185911684612ab7565b8260120160009054906101000a90046001600160a01b03166001600160a01b03166378cff5766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561239457600080fd5b505af11580156123a8573d6000803e3d6000fd5b50505050601283015460405163738d67ff60e11b8152600481018390526001600160a01b039091169063e71acffe906024015b600060405180830381600087803b1580156123f557600080fd5b505af1158015610329573d6000803e3d6000fd5b60006107c160ff8316600a61351d565b60008060006124526040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b600d87015460ff16151581526002870154602082015260068701546060820152600c87015460808201526124846106fe565b86146124b357606081015161249990876107b0565b606082015260808101516124ad90876107b0565b60808201525b60006001861515141561253857886001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f957600080fd5b505afa15801561250d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612531919061328b565b90506125d3565b886001600160a01b031663dc028c08836060015160006125589190613648565b845160405160e084901b6001600160e01b031916815260048101929092521515602482015260440160206040518083038186803b15801561259857600080fd5b505afa1580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d0919061328b565b90505b6125f5816109798460200151846125ea9190613648565b6060860151906107b0565b935060008860070154426126099190613687565b905060008113156126985760006126248b8b60080154612cb2565b905060006126416126386301e13380612079565b61097985612079565b905061266861265d8287602001516107b090919063ffffffff16565b6060870151906107b0565b61268961267e61267786612079565b85906107b0565b6060880151906107b0565b6126939190613648565b975050505b60808301516126a79087613447565b8351909650156126c2576126bb8587613447565b93506126db565b856126ce866000613648565b6126d89190613648565b93505b505050955095509592505050565b6000826126f583612409565b61154190866135c5565b601183015460009081908190849081121561271b575060118601545b6000612732612728612da2565b611af1848a6107b0565b600b890154600c8a0154919250906000818361274c6106fe565b6127569190613648565b6127609190613648565b905061276a6106fe565b816127758486613447565b61277f9190613447565b13156127bc5760405162461bcd60e51b815260206004820152600c60248201526b4645455f53554d5f47545f3160a01b6044820152606401610105565b6127c683856107b0565b97506127d282856107b0565b95506127de81856107b0565b9650505050505093509350939050565b6000811361280e5760405162461bcd60e51b815260040161010590613421565b82546001600160a01b03166128505760405162461bcd60e51b81526020600482015260086024820152675a45524f5f44414f60c01b6044820152606401610105565b6001600160a01b03821630141561287f57601383015483546116cb916001600160a01b0390811691168361289f565b601383015483546116cb916001600160a01b039081169185911684612ab7565b6040516001600160a01b0383166024820152604481018290526116cb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612db6565b60128301546001600160a01b03166129575760405162461bcd60e51b815260206004820152601860248201527742524f4b454e5f494e535552414e43455f4144445245535360401b6044820152606401610105565b6012830154604051631f36232360e01b8152600481018390526001600160a01b0390911690631f36232390602401600060405180830381600087803b15801561299f57600080fd5b505af11580156129b3573d6000803e3d6000fd5b505050506012830154604051637da7d3f160e01b81526001600160a01b0384811660048301526024820184905290911690637da7d3f190604401600060405180830381600087803b158015612a0757600080fd5b505af1158015612a1b573d6000803e3d6000fd5b5050505060128301546001600160a01b031663e71acffe612a3d836000613648565b6040518263ffffffff1660e01b81526004016123db91815260200190565b6001600160a01b03811660009081526002830160205260409020805460ff1615156001146107c15760405162461bcd60e51b81526020600482015260096024820152681393d7d3505492d15560ba1b6044820152606401610105565b6040516001600160a01b0380851660248301528316604482015260648101829052611b3f9085906323b872dd60e01b906084016128cb565b4382600901541415612b0057505050565b43600983015560068201546010830155600d82015460128301805460ff191660ff909216151591909117905560028201546011830155612b41838284612e88565b82600c0181905550428260070181905550806001600160a01b031663e2b99e6b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc3919061328b565b8260080181905550505050565b600d810154610100900460ff16612be5575050565b600a8101546000908152600792830160205260408120805460ff1916905543600b830155600d8201805461ff0019169055600382018190556005820181905560068201819055600282018190556008820181905591810182905560098101829055600c810182905560040155565b82846005016000828254612c679190613648565b9250508190555081846006016000828254612c829190613648565b925050819055508084600c016000828254612c9d9190613648565b909155505043600b9094019390935550505050565b6000826001600160a01b0316634dde1fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ced57600080fd5b505afa158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d259190613253565b6001600160a01b031663796ba96c836040518263ffffffff1660e01b8152600401612d5291815260200190565b60206040518083038186803b158015612d6a57600080fd5b505afa158015612d7e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be919061328b565b6000610713662386f26fc1000060016135c5565b6000612e0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ea79092919063ffffffff16565b8051909150156116cb5780806020019051810190612e29919061326f565b6116cb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610105565b600080600080612e99878787612eb6565b509098975050505050505050565b6060610fd684846000856130d7565b600080600080856001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef557600080fd5b505afa158015612f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2d919061328b565b9050612f468161097987600201548461104f9190613648565b9250846006015460001415612f5d5784600e015492505b604080516060810182526010870154815260118701546020820152601287015460ff1615159181019190915260098601544314612fb5576006860154815260028601546020820152600d86015460ff16151560408201525b6000866007015442612fc79190613687565b9050600080821315613066576000612fe38a8a60080154612cb2565b90506000613000612ff76301e13380612079565b61097986612079565b905061302461301c8287602001516107b090919063ffffffff16565b8651906107b0565b61303b61303361267787612079565b8751906107b0565b6130459190613648565b60128b015490935060ff1661306357613060600019846135c5565b92505b50505b600c8801546130759082613447565b96508760060154600014156130955761308e8688613447565b94506130ca565b600d88015460ff161515600114156130b15761308e8688613447565b866130bd876000613648565b6130c79190613447565b94505b5050505093509350939050565b6060824710156131385760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610105565b843b6131865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b600080866001600160a01b031685876040516131a291906133d2565b60006040518083038185875af1925050503d80600081146131df576040519150601f19603f3d011682016040523d82523d6000602084013e6131e4565b606091505b50915091506131f48282866131ff565b979650505050505050565b6060831561320e57508161078c565b82511561321e5782518084602001fd5b8160405162461bcd60e51b815260040161010591906133ee565b8035613243816136e0565b919050565b8035613243816136f8565b600060208284031215613264578081fd5b81516107be816136e0565b600060208284031215613280578081fd5b81516107be816136f8565b60006020828403121561329c578081fd5b5051919050565b6000806000606084860312156132b7578182fd5b8335925060208401356132c9816136e0565b915060408401356132d9816136e0565b809150509250925092565b600080600080608085870312156132f9578081fd5b84359350602085013561330b816136e0565b93969395505050506040820135916060013590565b60008082840360e0811215613333578283fd5b8335925060c0601f1982011215613348578182fd5b5060405160c0810181811067ffffffffffffffff8211171561337857634e487b7160e01b83526041600452602483fd5b60405261338760208501613238565b815261339560408501613238565b602082015260608401356040820152608084013560608201526133ba60a08501613248565b608082015260c0939093013560a08401525092909150565b600082516133e481846020870161369e565b9190910192915050565b602081526000825180602084015261340d81604085016020870161369e565b601f01601f19169190910160400192915050565b6020808252600c908201526b15d493d391d7d05353d5539560a21b604082015260600190565b600080821280156001600160ff1b0384900385131615613469576134696136ca565b600160ff1b8390038412811615613482576134826136ca565b50500190565b6000821982111561349b5761349b6136ca565b500190565b6000826134bb57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156134d5576134d56136ca565b500590565b600181815b808511156135155781600019048211156134fb576134fb6136ca565b8085161561350857918102915b93841c93908002906134df565b509250929050565b60006107be8383600082613533575060016107c1565b81613540575060006107c1565b816001811461355657600281146135605761357c565b60019150506107c1565b60ff841115613571576135716136ca565b50506001821b6107c1565b5060208310610133831016604e8410600b841016171561359f575081810a6107c1565b6135a983836134da565b80600019048211156135bd576135bd6136ca565b029392505050565b60006001600160ff1b03818413828413808216868404861116156135eb576135eb6136ca565b600160ff1b84871282811687830589121615613609576136096136ca565b858712925087820587128484161615613624576136246136ca565b8785058712818416161561363a5761363a6136ca565b505050929093029392505050565b60008083128015600160ff1b850184121615613666576136666136ca565b6001600160ff1b0384018313811615613681576136816136ca565b50500390565b600082821015613699576136996136ca565b500390565b60005b838110156136b95781810151838201526020016136a1565b83811115611b3f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146136f557600080fd5b50565b80151581146136f557600080fdfea264697066735822122005967186e637277a0d63fc1e68ab06393598838c7a6ff6bd0e5ce57b6d0788ca64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}