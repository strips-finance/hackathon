{
  "address": "0x1ab12bcEaB75368122ea90EdA0BbaccFaAb40E26",
  "abi": [],
  "transactionHash": "0x4ab2a620bd9eeb6ee76eafbbacd40f4d4df391cc1d76f759db37600f65cfcba3",
  "receipt": {
    "to": null,
    "from": "0x6FD16eBaf4AA6127cb555D360E2cFfC93c11A41b",
    "contractAddress": "0x1ab12bcEaB75368122ea90EdA0BbaccFaAb40E26",
    "transactionIndex": 0,
    "gasUsed": "82151375",
    "logsBloom": "0x
    "blockHash": "0x9ac5483bc0799b13c0323edf887002bb9c8828ebb851f5e4f16a19e090d0c03a",
    "transactionHash": "0x4ab2a620bd9eeb6ee76eafbbacd40f4d4df391cc1d76f759db37600f65cfcba3",
    "logs": [],
    "blockNumber": 7139074,
    "cumulativeGasUsed": "63437194",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ca517d14ec61818cef65e189431947b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/impl/StripsStateImpl.sol\":\"StripsStateImpl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/external/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x3d356fbacb425916398dc5201049c88df8fa73e1cedbd386a2eeb830818479b6\"},\"contracts/impl/StripsStateImpl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\nimport { IRewardable } from \\\"../interface/IRewardable.sol\\\";\\n\\nimport { SLPToken } from \\\"../token/SLPToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { PnlLib } from \\\"../lib/Pnl.sol\\\";\\nimport { StripsEvents, IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\n\\nlibrary StripsStateImpl {\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n\\n    function dispatcher(\\n        StorageStripsLib.State storage state,\\n        IStrips.StateActionArgs memory args\\n    ) external \\n    {\\n        if (args.actionType == IStrips.StateActionType.ClaimRewards){\\n            claimRewards(state, args.data);\\n        }\\n    }\\n\\n    function claimRewards(\\n        StorageStripsLib.State storage state,\\n        bytes memory data\\n    ) public {\\n        IStrips.ClaimRewardsParams memory params = abi.decode(data, (IStrips.ClaimRewardsParams));\\n        require(params.account != address(0), \\\"BROKEN_ACCOUNT\\\");\\n\\n        IMarket[] memory _markets = state.allMarkets;\\n        require(_markets.length > 0, \\\"NO_MARKETS\\\");\\n        \\n        /*\\n            Claim rewards for Insurance\\n         */\\n        if (IStakeble(address(state.insuranceFund)).isRewardable()){\\n            address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\\n            IRewarder(rewarder).claimStakingReward(params.account);\\n        }\\n\\n        /*\\n            Calc rewards for Markets\\n        */\\n        for (uint i=0; i<_markets.length; i++) {\\n            if (IStakeble(address(_markets[i])).isRewardable() == false){\\n                continue;\\n            }\\n            address rewarder = IRewardable(address(_markets[i])).getRewarder();\\n            \\n            IRewarder(rewarder).claimStakingReward(params.account);\\n            IRewarder(rewarder).claimTradingReward(params.account);\\n        }\\n    }\\n\\n    function _payKeeperReward(StorageStripsLib.State storage state,\\n                                address keeper) external \\n    {\\n        //TODO: implement\\n    }\\n\\n\\n    /*\\n        Info for testing models\\n     */\\n\\n    function _check_trader(\\n        StorageStripsLib.State storage state,\\n        address _trader,\\n        IMarket _market) external \\n    {\\n        IStripsEvents.CheckParams memory _checkParams;\\n\\n        /*Calc market info first */\\n        (_checkParams.marketPrice,\\n            _checkParams.oraclePrice) = _market.getPrices();\\n\\n        _checkParams.uniLpPrice = IUniswapLpOracle(_market.getPairOracle()).getPrice();\\n\\n\\n        /*Market params */\\n        StorageStripsLib.Position storage _ammPosition = state.checkPosition(_market, address(_market));\\n\\n        if (_ammPosition.isActive){\\n            _checkParams.ammIsLong = _ammPosition.isLong;\\n            _checkParams.ammNotional = _ammPosition.notional;\\n            _checkParams.ammInitialPrice = _ammPosition.initialPrice;\\n            _checkParams.ammEntryPrice = _ammPosition.entryPrice;\\n\\n            _checkParams.ammTotalLiquidity = _market.getLiquidity();\\n            (_checkParams.ammTradingLiquidity,\\n                _checkParams.ammStakingLiquidity) = _market.getPartedLiquidity();\\n\\n            (_checkParams.ammFundingPnl,\\n                _checkParams.ammTradingPnl,\\n                _checkParams.ammTotalPnl) = PnlLib.getAmmAllPnl(state, _market, _ammPosition);\\n        }\\n\\n        /* Is trader a staker also? */\\n        address slpToken = IStakeble(address(_market)).getSlpToken();\\n        if (IStripsLpToken(slpToken).balanceOf(_trader) > 0){\\n          (,\\n            _checkParams.stakerInitialStakingPnl,\\n            _checkParams.stakerInitialTradingPnl,\\n            _checkParams.stakerInitialBlockNum,\\n            ,\\n            _checkParams.stakerUnrealizedStakingProfit,\\n            _checkParams.stakerUnrealizedTradingProfit)  = SLPToken(slpToken).stakers(_trader);\\n        }\\n\\n        _checkParams.slpTotalSupply = int256(IStripsLpToken(slpToken).totalSupply());\\n\\n        _checkParams.slpTradingCummulativePnl = SLPToken(slpToken).cummulativeTradingPnl();\\n        _checkParams.slpStakingCummulativePnl = SLPToken(slpToken).cummulativeStakingPnl();\\n\\n        _checkParams.slpTradingPnl = SLPToken(slpToken).cumTradingPNL();\\n        _checkParams.slpStakingPnl = SLPToken(slpToken).cumStakingPNL();\\n\\n        (int256 accumulatedTradingPnl,) = SLPToken(slpToken).tradingPnl();\\n        (int256 accumulatedStakingPnl,) = SLPToken(slpToken).stakingPnl();\\n\\n        _checkParams.slpTradingPnlGrowth = accumulatedTradingPnl - SLPToken(slpToken).prevTradingPnl();\\n        _checkParams.slpStakingPnlGrowth = accumulatedStakingPnl - SLPToken(slpToken).prevStakingPnl();\\n\\n        /*\\n            if it's market - just add additional integrity check\\n        */\\n        if (address(_market) == _trader){\\n\\n            address[] memory allAccounts = state.allAccounts;\\n            for (uint i = 0; i < allAccounts.length; i++){\\n                if (allAccounts[i] == address(_market)){\\n                    continue;\\n                }\\n\\n                StorageStripsLib.Position storage _position = state.checkPosition(_market, allAccounts[i]);\\n                if (_position.isActive == true){\\n                    int256 totalPnl;\\n                    (,,totalPnl) = PnlLib.getAllUnrealizedPnl(state, \\n                                                        _market, \\n                                                        _position, \\n                                                        SignedBaseMath.oneDecimal(), \\n                                                        true); // BUT pnl based on MARKET_PRICE\\n\\n                    _checkParams.tradersTotalPnl += totalPnl;\\n                }\\n            }\\n        }else{\\n\\n            StorageStripsLib.Position storage _traderPosition = state.checkPosition(_market, _trader);\\n            if (_traderPosition.isActive){\\n\\n                _checkParams.isLong = _traderPosition.isLong;\\n                _checkParams.collateral = _traderPosition.collateral;\\n                _checkParams.notional = _traderPosition.notional;\\n                _checkParams.initialPrice = _traderPosition.initialPrice;\\n                _checkParams.entryPrice = _traderPosition.entryPrice;\\n\\n                (,_checkParams.marginRatio) = PnlLib.getMarginRatio(state,\\n                                                                    _market, \\n                                                                    _traderPosition,\\n                                                                    SignedBaseMath.oneDecimal(),\\n                                                                    false); // based on EXIT_PRICE\\n                (_checkParams.fundingPnl,\\n                    _checkParams.tradingPnl,\\n                    _checkParams.totalPnl) = PnlLib.getAllUnrealizedPnl(state, \\n                                                            _market, \\n                                                            _traderPosition, \\n                                                            SignedBaseMath.oneDecimal(), \\n                                                        true); // BUT pnl based on MARKET_PRICE\\n            }\\n\\n                /*Add insurance staking rewards first */\\n                if (IStakeble(address(state.insuranceFund)).isRewardable()){\\n                    address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\\n                }\\n\\n                /*Calc rewards separately trading + staking for all markets */\\n\\n                if (IStakeble(address(_market)).isRewardable()){\\n                    address rewarder = IRewardable(address(_market)).getRewarder();\\n\\n                    _checkParams.tradingRewardsTotal += IRewarder(rewarder).totalTradeReward(_trader);\\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\\n\\n                }\\n                \\n        }\\n\\n\\n\\n        StripsEvents.logCheckData(_trader, address(_market), _checkParams);\\n    } \\n\\n    function _check_insurance(\\n        StorageStripsLib.State storage state) external \\n    {\\n        IStripsEvents.CheckInsuranceParams memory _checkParams;\\n\\n        address _insurance = address(state.insuranceFund);\\n        address sipToken = IStakeble(_insurance).getSlpToken();\\n        _checkParams.sipTotalSupply = IStripsLpToken(sipToken).totalSupply();\\n\\n        (_checkParams.usdcLiquidity,\\n            _checkParams.lpLiquidity) = IInsuranceFund(_insurance).getPartedLiquidity();\\n\\n\\n        StripsEvents.logCheckInsuranceData(_insurance, _checkParams);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3f5b6674f5b9038113b8279dae2efc6bf1b7cffc963c6a75554921cb98ab63ff\"},\"contracts/interface/IAssetOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IAssetOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x8713d9180b6d063710ffce2ce8b31efa563bf3c79618181149e5d5dbf3b957da\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IInsuranceFund {\\n    function withdraw(address _to, int256 _amount) external;\\n\\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\\n}\\n\",\"keccak256\":\"0xf7ebbd572bbeaffa3a4af99bb6da8f0b2495302baf8e6c4829230c0f953717b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IMarket {\\n    function getLongs() external view returns (int256);\\n    function getShorts() external view returns (int256);\\n\\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\\n    function currentPrice() external view returns (int256);\\n    function oraclePrice() external view returns (int256);\\n    \\n    function getAssetOracle() external view returns (address);\\n    function getPairOracle() external view returns (address);\\n    function currentOracleIndex() external view returns (uint256);\\n\\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \\n    function getLiquidity() external view returns (int256);\\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\\n\\n    function openPosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256 openPrice);\\n\\n    function closePosition(\\n        bool isLong,\\n        int256 notional\\n    ) external returns (int256);\\n\\n    function maxNotional() external view returns (int256);\\n}\\n\\n\\n\",\"keccak256\":\"0x4636b84a8e433ef550f2b689df9fc9173197979a8b97b09453c8259639889ad4\"},\"contracts/interface/IRewardable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\nimport { IRewarder } from \\\"./IRewarder.sol\\\";\\n\\ninterface IRewardable {\\n    function createRewarder(IRewarder.InitParams memory _params) external;\\n    function getRewarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x41b21e1eb0519392072e64c1443706859afd275eda09e3b8ae400aa1efc7c6ba\"},\"contracts/interface/IRewarder.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IRewarder {\\n    event TradingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    event StakingRewardClaimed(\\n        address indexed user, \\n        int256 amount\\n    );\\n\\n    struct InitParams {\\n        uint256 periodLength;\\n        uint256 washTime;\\n\\n        IERC20 slpToken;\\n        IERC20 strpToken;\\n\\n        address stripsProxy;\\n        address dao;\\n        address admin;\\n\\n        int256 rewardTotalPerSecTrader;\\n        int256 rewardTotalPerSecStaker;\\n    }\\n\\n    function claimStakingReward(address _staker) external;\\n    function claimTradingReward(address _trader) external;\\n\\n    function totalStakerReward(address _staker) external view returns (int256 reward);\\n    function totalTradeReward(address _trader) external view returns (int256 reward);\\n\\n    function rewardStaker(address _staker) external;\\n    function rewardTrader(address _trader, int256 _notional) external;\\n\\n    function currentTradingReward() external view returns(int256);\\n    function currentStakingReward() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x59a0f998049a20b3cdf3b9acee6a2b377153a0dd6edacf70ea2dbea4d1ac1d74\"},\"contracts/interface/IStakeble.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\nimport { IStakebleEvents } from \\\"../lib/events/Stakeble.sol\\\";\\n\\ninterface IStakeble is IStakebleEvents {\\n    event LiquidityChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        string indexed action,\\n        \\n        int256 totalLiquidity,\\n        int256 currentStakedPnl,\\n        int256 stakerInitialStakedPnl,\\n        int256 stakerTotalCollateral\\n    );\\n\\n    event TokenAdded(\\n        address indexed asset,\\n        address indexed token\\n    );\\n\\n    event LogStakeChanged(\\n        address indexed asset,\\n        address indexed changer,\\n        bool isStake,\\n        \\n        int256 burnedSlp,\\n        int256 unstakeLp,\\n        int256 unstakeUsdc,\\n\\n        int256 lp_fee,\\n        int256 usdc_fee\\n    );\\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\\n    function totalStaked() external view returns (int256);\\n    function isInsurance() external view returns (bool);\\n    function liveTime() external view returns (uint);\\n\\n    function getSlpToken() external view returns (address);\\n    function getStakingToken() external view returns (address);\\n    function getTradingToken() external view returns (address);\\n    function getStrips() external view returns (address);\\n\\n    function ensureFunds(int256 amount) external;\\n    function stake(int256 amount) external;\\n    function unstake(int256 amount) external;\\n\\n    function approveStrips(IERC20 _token, int256 _amount) external;\\n    function externalLiquidityChanged() external;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n    function isRewardable() external view returns (bool);\\n\\n    function changeSushiRouter(address _router) external;\\n    function getSushiRouter() external view returns (address);\\n\\n    function getStrp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c2c5ee93fc64bdbe729dea2b96e7cf8ba9187909929458302773defb2e400c3\"},\"contracts/interface/IStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IInsuranceFund } from \\\"./IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"./IStripsLpToken.sol\\\";\\n\\nimport { StorageStripsLib } from \\\"../lib/StorageStrips.sol\\\";\\nimport { IStripsEvents } from \\\"../lib/events/Strips.sol\\\";\\n\\ninterface IStrips is IStripsEvents \\n{\\n\\n    /*\\n        State actions\\n     */\\n    enum StateActionType {\\n        ClaimRewards\\n    }\\n\\n    /*request */\\n    struct ClaimRewardsParams {\\n        address account;\\n    }\\n\\n    struct StateActionArgs {\\n        StateActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        View actions\\n     */\\n    enum ViewActionType {\\n        GetOracles,\\n        GetMarkets,\\n        CalcFeeAndSlippage,\\n        GetPosition,\\n        CalcClose,\\n        CalcRewards\\n    }\\n\\n    /*request */\\n    struct CalcRewardsParams {\\n        address account;\\n    }\\n    /*response */\\n    struct CalcRewardsData {\\n        address account;\\n        int256 rewardsTotal;\\n    }\\n\\n\\n    /*request */\\n    struct CalcCloseParams {\\n        address market;\\n        address account;\\n        int256 closeRatio;\\n    }\\n    /*response */\\n    struct CalcCloseData {\\n        address market;\\n        int256 minimumMargin;\\n        int256 pnl;\\n        int256 marginLeft;\\n        int256 fee;\\n        int256 slippage;\\n        int256 whatIfPrice;\\n    }\\n\\n    /*\\n        request \\n        response: PositionParams or revert\\n    */\\n    struct GetPositionParams {\\n        address market;\\n        address account;\\n    }\\n\\n\\n    /*request */\\n    struct FeeAndSlippageParams {\\n        address market;\\n        int256 notional;\\n        int256 collateral;\\n        bool isLong;\\n    }\\n\\n    /* response */\\n    struct FeeAndSlippageData{\\n        address market;\\n        int256 marketRate;\\n        int256 oracleRate;\\n        \\n        int256 fee;\\n        int256 whatIfPrice;\\n        int256 slippage;\\n\\n        int256 minimumMargin;\\n        int256 estimatedMargin;\\n    }\\n\\n\\n    struct ViewActionArgs {\\n        ViewActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n    /*\\n        Admin actions\\n     */\\n\\n    enum AdminActionType {\\n        AddMarket,   \\n        AddOracle,  \\n        RemoveOracle,  \\n        ChangeOracle,\\n        SetInsurance,\\n        ChangeRisk\\n    }\\n\\n    struct AddMarketParams{\\n        address market;\\n    }\\n\\n    struct AddOracleParams{\\n        address oracle;\\n        int256 keeperReward;\\n    }\\n\\n    struct RemoveOracleParams{\\n        address oracle;\\n    }\\n\\n    struct ChangeOracleParams{\\n        address oracle;\\n        int256 newReward;\\n    }\\n\\n    struct SetInsuranceParams{\\n        address insurance;\\n    }\\n\\n    struct ChangeRiskParams{\\n        StorageStripsLib.RiskParams riskParams;\\n    }\\n\\n\\n    struct AdminActionArgs {\\n        AdminActionType actionType;\\n        bytes data;\\n    }\\n\\n\\n\\n    /*\\n        Events\\n     */\\n    event LogNewMarket(\\n        address indexed market\\n    );\\n\\n    event LogPositionUpdate(\\n        address indexed account,\\n        IMarket indexed market,\\n        PositionParams params\\n    );\\n\\n    struct PositionParams {\\n        // true - for long, false - for short\\n        bool isLong;\\n        // is this position closed or not\\n        bool isActive;\\n        // is this position liquidated or not\\n        bool isLiquidated;\\n\\n        //position size in USDC\\n        int256 notional;\\n        //collateral size in USDC\\n        int256 collateral;\\n        //initial price for position\\n        int256 initialPrice;\\n    }\\n\\n    struct PositionData {\\n        //address of the market\\n        IMarket market;\\n        // total pnl - real-time profit or loss for this position\\n        int256 pnl;\\n\\n        // this pnl is calculated based on whatIfPrice\\n        int256 pnlWhatIf;\\n        \\n        // current margin ratio of the position\\n        int256 marginRatio;\\n        PositionParams positionParams;\\n    }\\n\\n    struct AssetData {\\n        bool isInsurance;\\n        \\n        address asset;\\n         // Address of SLP/SIP token\\n        address slpToken;\\n\\n        int256 marketPrice;\\n        int256 oraclePrice;\\n\\n        int256 maxNotional;\\n        int256 tvl;\\n        int256 apy;\\n\\n        int256 minimumMargin;\\n    }\\n\\n    struct StakingData {\\n         //Market or Insurance address\\n        address asset; \\n\\n        // collateral = slp amount\\n        uint256 totalStaked;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time trading data\\n     */\\n    struct TradingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        PositionData[] positionData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep real-time staking data\\n     */\\n    struct StakingInfo {\\n        //Includes also info about the current market prices, to show on dashboard\\n        AssetData[] assetData;\\n        StakingData[] stakingData;\\n    }\\n\\n    /**\\n     * @notice Struct that keep staking and trading data\\n     */\\n    struct AllInfo {\\n        TradingInfo tradingInfo;\\n        StakingInfo stakingInfo;\\n    }\\n\\n    function open(\\n        IMarket _market,\\n        bool isLong,\\n        int256 collateral,\\n        int256 leverage,\\n        int256 slippage\\n    ) external;\\n\\n    function close(\\n        IMarket _market,\\n        int256 _closeRatio,\\n        int256 _slippage\\n    ) external;\\n\\n    function changeCollateral(\\n        IMarket _market,\\n        int256 collateral,\\n        bool isAdd\\n    ) external;\\n\\n    function ping() external;\\n    function getPositionsCount() external view returns (uint);\\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\\n    function liquidatePosition(IMarket _market, address account) external;\\n    function payKeeperReward(address keeper) external;\\n\\n    /*\\n        Strips getters functions for Trader\\n     */\\n    function assetPnl(address _asset) external view returns (int256);\\n    function getLpOracle() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xa45dfec659d9f61c252fd5a4b69a0591729f48105b4a9457e95741a839893993\"},\"contracts/interface/IStripsLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\ninterface IStripsLpToken is IERC20 {\\n    struct TokenParams {\\n        address stripsProxy;\\n        address pairOracle;\\n\\n        address tradingToken;\\n        address stakingToken; \\n\\n        int256 penaltyPeriod;\\n        int256 penaltyFee;\\n    }\\n\\n    struct ProfitParams{\\n        int256 unstakeAmountLP;\\n        int256 unstakeAmountERC20;\\n\\n        int256 stakingProfit;   \\n        int256 stakingFee;\\n\\n        int256 penaltyLeft;\\n        uint256 totalStaked;\\n\\n        int256 lpPrice;\\n\\n        int256 lpProfit;\\n        int256 usdcLoss;\\n    }\\n\\n    function getParams() external view returns (TokenParams memory);\\n    function getBurnableToken() external view returns (address);\\n    function getPairPrice() external view returns (int256);\\n    function checkOwnership() external view returns (address);\\n\\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\\n\\n    function accumulatePnl() external;\\n    function saveProfit(address staker) external;\\n    function mint(address staker, uint256 amount) external;\\n    function burn(address staker, uint256 amount) external;\\n\\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\\n\\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\\n    function setPenaltyFee(int256 _fee) external;\\n    function setParams(TokenParams memory _params) external;\\n    function canUnstake(address staker, uint256 amount) external view;\\n\\n    function changeTradingPnl(int256 amount) external;\\n    function changeStakingPnl(int256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x9bd5961495b3b7fadc6d7131290cea95430e53750eb46214d89d298f9c834251\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IUniswapLpOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\\n    function getPrice() external view returns (int256);\\n    function strpPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xebf7c6afcbe8bfd7d320173dcdfbb8092b8c0aa1ceffd4fb596647c23d77842b\"},\"contracts/lib/Pnl.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\n\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageStripsLib } from \\\"./StorageStrips.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary PnlLib {\\n    int256 constant ANN_PERIOD_SEC = 31536000;\\n\\n    using SignedBaseMath for int256;\\n    using StorageStripsLib for StorageStripsLib.State;\\n    using StorageMarketLib for StorageMarketLib.State;\\n\\n    // To not have stack too deep error\\n    struct PosInfo {\\n        bool isLong;\\n        int256 initialPrice;\\n        uint256 cummulativeIndex;\\n        int256 notional;\\n        int256 unrealizedPnl;\\n    }\\n\\n    struct AmmPosInfo {\\n        int256 notional;        \\n        int256 initialPrice;\\n        bool lastIsLong;\\n    }\\n\\n\\n    function getMarginRatio(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage _position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 total_pnl, int256 marginRatio) {\\n         total_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        \\n        //traderPnl already calculated for right ratio\\n        if (_notionalRatio == SignedBaseMath.oneDecimal()){\\n            marginRatio = (_position.collateral + total_pnl).divd(_position.notional);\\n        }else{\\n            int256 full_pnl = calcUnrealizedPnl(state,\\n                                        _market,\\n                                        _position,\\n                                        SignedBaseMath.oneDecimal(),\\n                                        is_market_price);\\n                                        \\n            // Margin ratio after partly close\\n            marginRatio = (_position.collateral.muld(SignedBaseMath.oneDecimal() - _notionalRatio) + full_pnl - total_pnl).divd(_position.notional.muld(SignedBaseMath.oneDecimal() - _notionalRatio));\\n        }\\n    }\\n\\n    function getFundingUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return funding_pnl;\\n    }\\n\\n    \\n    function calcUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n        return total_pnl;\\n    }\\n\\n    function getAmmTotalPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return total_pnl;\\n    }\\n\\n\\n    function getAmmFundingPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256) {\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n        return funding_pnl;\\n    }\\n\\n\\n    function getAmmAllPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcAmmPnlParts(state, \\n                                        _market, \\n                                        position);\\n    }\\n\\n    function getAllUnrealizedPnl(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl) {\\n        (funding_pnl,\\n            trading_pnl,\\n            total_pnl) = calcPnlParts(state, \\n                                        _market, \\n                                        position,\\n                                        _notionalRatio,\\n                                        is_market_price);\\n    }\\n\\n\\n    //It can calc partlyPnl \\n    function calcPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position,\\n        int256 _notionalRatio,\\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n        \\n        PosInfo memory pos_info;\\n\\n        //Save gas on reading\\n        pos_info.isLong = position.isLong;\\n        pos_info.initialPrice = position.initialPrice;\\n        pos_info.notional = position.notional;\\n        pos_info.unrealizedPnl = position.unrealizedPnl;\\n        if (_notionalRatio != SignedBaseMath.oneDecimal()){\\n            pos_info.notional = pos_info.notional.muld(_notionalRatio);\\n            pos_info.unrealizedPnl = pos_info.unrealizedPnl.muld(_notionalRatio);\\n        }\\n\\n        \\n\\n        int256 _price;\\n\\n        if (is_market_price == true){\\n            _price = _market.currentPrice();\\n        }else{\\n            _price = _market.priceChange(0 - pos_info.notional, \\n                                            pos_info.isLong);\\n        }\\n        \\n        //DONE: after 24-June discussion\\n        trading_pnl = pos_info.notional.muld(_price - pos_info.initialPrice).divd(_price);\\n\\n\\n                //scalar - in seconds since epoch\\n        int256 time_elapsed = int256(block.timestamp - position.initialTimestamp);\\n\\n        //we have funding_pnl ONLY for next block\\n        if (time_elapsed > 0){\\n            int256 oracle_avg = calcOracleAverage(_market, position.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());      \\n\\n            //DONE: after 24-June discussion\\n            funding_pnl = pos_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - pos_info.notional.muld(pos_info.initialPrice.muld(proportion));\\n        }\\n\\n        funding_pnl += pos_info.unrealizedPnl;\\n\\n        if (pos_info.isLong){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl - funding_pnl;\\n        }\\n    }\\n\\n    function calcAmmPnlParts(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage ammPosition\\n    ) internal view returns (int256 funding_pnl,\\n                            int256 trading_pnl,\\n                            int256 total_pnl)\\n    {\\n\\n        int256 _price = _market.currentPrice();\\n\\n\\n        //trading calcs always based on current notional\\n        trading_pnl = ammPosition.notional.muld(_price - ammPosition.initialPrice).divd(_price);\\n        if (ammPosition.notional == 0){\\n            trading_pnl = ammPosition.savedTradingPnl;\\n        }\\n\\n        AmmPosInfo memory amm_info = AmmPosInfo({\\n            notional:ammPosition.lastNotional,      \\n            initialPrice:ammPosition.lastInitialPrice,\\n            lastIsLong:ammPosition.lastIsLong\\n        });\\n\\n\\n        if (ammPosition.initialBlockNumber != block.number){\\n            amm_info.notional = ammPosition.notional;\\n            amm_info.initialPrice = ammPosition.initialPrice;\\n            amm_info.lastIsLong = ammPosition.isLong;\\n        }\\n\\n        int256 time_elapsed = int256(block.timestamp - ammPosition.initialTimestamp);\\n\\n        int256 instantFunding;\\n        if (time_elapsed > 0){\\n            int256 oracle_avg;\\n\\n            oracle_avg = calcOracleAverage(_market, ammPosition.cummulativeIndex);\\n\\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());     \\n\\n            instantFunding = amm_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - amm_info.notional.muld(amm_info.initialPrice.muld(proportion));\\n            \\n            //SUPER carefull here - we need to know the PREVIOUS sign if we calc based on historical value\\n            if (ammPosition.lastIsLong == false){\\n                instantFunding *= -1;\\n            }\\n\\n            \\n            \\n        }\\n\\n\\n        funding_pnl = instantFunding + ammPosition.unrealizedPnl;\\n\\n\\n        //BUT here we are using current isLong of amm\\n        if (ammPosition.notional == 0){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }\\n        else if (ammPosition.isLong == true){\\n            total_pnl = funding_pnl + trading_pnl;\\n        }else{\\n            total_pnl = 0 - trading_pnl + funding_pnl;\\n        }\\n\\n    }\\n\\n\\n\\n    function calcOracleAverage(\\n        IMarket _market,\\n        uint256 fromIndex\\n    ) internal view returns (int256) {        \\n        return IAssetOracle(_market.getAssetOracle()).calcOracleAverage(fromIndex);\\n    }\\n\\n    function calcPositionParams(\\n        StorageStripsLib.State storage state,\\n        IMarket _market, \\n        address _account, \\n        bool is_market_price\\n    ) internal view returns (int256 funding_pnl, \\n                            int256 trading_pnl,\\n                            int256 total_pnl,\\n                            int256 margin_ratio)\\n    {\\n        StorageStripsLib.Position storage _position = state.getPosition(_market, _account);\\n\\n        (funding_pnl,\\n          trading_pnl,\\n          total_pnl) = calcPnlParts(state, \\n                                    _market, \\n                                    _position,\\n                                    SignedBaseMath.oneDecimal(),\\n                                    is_market_price);\\n        \\n        margin_ratio = (_position.collateral + total_pnl).divd(_position.notional);\\n    }\\n\\n    /*\\n    *\\n    *   FEE CALCULATIOSN\\n    *\\n    */\\n\\n    function calcLiquidationFee(\\n        StorageStripsLib.State storage state,\\n        IMarket _market,\\n        StorageStripsLib.Position storage position\\n    ) internal view returns (int256 ammFee,\\n                            int256 liquidatorFee,\\n                            int256 insuranceFee,\\n                            int256 funding_pnl_liquidated)\\n    {\\n\\n        //we calc PNL based on price after the position is closed\\n        (int256 funding_pnl,\\n            int256 trading_pnl,\\n            int256 unrealizedPnl) = getAllUnrealizedPnl(state,\\n                                                _market, \\n                                                position,\\n                                                SignedBaseMath.oneDecimal(),\\n                                                false);\\n\\n\\n        funding_pnl_liquidated = funding_pnl;\\n\\n        if (unrealizedPnl < 0){\\n            unrealizedPnl *= -1;\\n        }\\n\\n        int256 netEquity = position.collateral - unrealizedPnl;\\n\\n        //Market and liquidator Fee are always the same\\n        ammFee = unrealizedPnl.muld(state.riskParams.marketFeeRatio);\\n        liquidatorFee = unrealizedPnl.muld(state.riskParams.liquidatorFeeRatio);\\n\\n        //easy to read is more important than optimization now\\n        int256 insuranceFeeRatio = SignedBaseMath.oneDecimal() - state.riskParams.liquidatorFeeRatio - state.riskParams.marketFeeRatio;\\n\\n        insuranceFee = unrealizedPnl.muld(insuranceFeeRatio);\\n\\n        insuranceFee += netEquity;\\n    }\\n\\n    function calcPositionFee(\\n        StorageStripsLib.State storage state,\\n        int256 _notional,\\n        int256 _price\\n    ) internal view returns (int256 fee, int256 iFee, int256 daoFee) {\\n        int256 calcPrice = _price;\\n        if (calcPrice < state.riskParams.minimumPricePossible){\\n            calcPrice = state.riskParams.minimumPricePossible;\\n        }\\n\\n        int256 baseFee = calcPrice.muld(_notional).muld(SignedBaseMath.onePercent());\\n\\n        int256 ammFeeRatio = state.riskParams.fundFeeRatio;\\n        int256 daoFeeRatio = state.riskParams.daoFeeRatio;\\n        int256 iFeeRatio = SignedBaseMath.oneDecimal() - ammFeeRatio - daoFeeRatio;\\n\\n        require((ammFeeRatio + daoFeeRatio + iFeeRatio) <= SignedBaseMath.oneDecimal(), \\\"FEE_SUM_GT_1\\\");\\n\\n        fee = ammFeeRatio.muld(baseFee);\\n        daoFee = daoFeeRatio.muld(baseFee);\\n        iFee = iFeeRatio.muld(baseFee);\\n    }\\n}\",\"keccak256\":\"0xb983322e9c32791a626b3ddeb66fbfc6b96c068e112999abb8d57f198b682d44\"},\"contracts/lib/SignedBaseMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// We are using 0.8.0 with safemath inbuilt\\n// Need to implement mul and div operations only\\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\\n// so the maximum is 10**58.10**18 (should be enough :) )\\n\\nlibrary SignedBaseMath {\\n    uint8 constant DECIMALS = 18;\\n    int256 constant BASE = 10**18;\\n    int256 constant BASE_PERCENT = 10**16;\\n\\n    /*Use this to convert USDC 6 decimals to 18 decimals */\\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x * int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\\n        require(tokenDecimals < DECIMALS);\\n        return x / int256(10**(DECIMALS - tokenDecimals));\\n    }\\n\\n\\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\\n        return x * int256(10**decimals);\\n    }\\n\\n    function toDecimal(int256 x) internal pure returns (int256) {\\n        return x * BASE;\\n    }\\n\\n    function oneDecimal() internal pure returns (int256) {\\n        return 1 * BASE;\\n    }\\n\\n    function tenPercent() internal pure returns (int256) {\\n        return 10 * BASE_PERCENT;\\n    }\\n\\n    function ninetyPercent() internal pure returns (int256) {\\n        return 90 * BASE_PERCENT;\\n    }\\n\\n    function onpointOne() internal pure returns (int256) {\\n        return 110 * BASE_PERCENT;\\n    }\\n\\n\\n    function onePercent() internal pure returns (int256) {\\n        return 1 * BASE_PERCENT;\\n    }\\n\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return _muld(x, y, DECIMALS);\\n    }\\n\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        if (y == 1){\\n            return x;\\n        }\\n        return _divd(x, y, DECIMALS);\\n    }\\n\\n    function _muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * y) / unit(decimals);\\n    }\\n\\n    function _divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return (x * unit(decimals)) / y;\\n    }\\n\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n}\\n\",\"keccak256\":\"0xe5a1457db849a23fc35ef30e9085aecb000f9036b312e28c1f404c8cd8a6cec0\"},\"contracts/lib/StorageMarket.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../external/interfaces/IUniswapV2Pair.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IRewarder } from \\\"../interface/IRewarder.sol\\\";\\n\\nlibrary StorageMarketLib {\\n    using SignedBaseMath for int256;\\n\\n    /* Params that are set on contract creation */\\n    struct InitParams {\\n        IStrips stripsProxy;\\n        IAssetOracle assetOracle;\\n        IUniswapLpOracle pairOracle;\\n\\n        int256 initialPrice;\\n        int256 burningCoef;\\n\\n        IUniswapV2Pair stakingToken;\\n        IERC20 tradingToken;\\n        IERC20 strpToken;       \\n    }\\n\\n    //Need to care about align here \\n    struct State {\\n        address dao;\\n\\n        InitParams params;\\n        IStripsLpToken slpToken;\\n        IRewarder rewarder;\\n\\n        int256 totalLongs; //Real notional \\n        int256 totalShorts; //Real notional\\n        \\n        int256 demand; //included proportion\\n        int256 supply; //included proportion\\n        \\n        int256 ratio;\\n        int256 _prevLiquidity;\\n        bool isSuspended;\\n\\n        address sushiRouter;\\n        uint createdAt;\\n    }\\n\\n    function pairPrice(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.params.pairOracle.getPrice();\\n    }\\n\\n    //If required LP price conversions should be made here\\n    function calcStakingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.stakingToken.balanceOf(address(this)));\\n    }\\n\\n    function calcTradingLiqudity(\\n        State storage state\\n    ) internal view returns (int256){\\n        return int256(state.params.tradingToken.balanceOf(address(this)));\\n    }\\n\\n    function getLiquidity(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 stakingLiquidity = calcStakingLiqudity(state);\\n        \\n        if (stakingLiquidity != 0){\\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\\n        }\\n\\n        return stakingLiquidity + calcTradingLiqudity(state);\\n    }\\n\\n    //Should return the scalar\\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\\n    function maxNotional(\\n        State storage state\\n    ) internal view returns (int256) {\\n        int256 _liquidity = getLiquidity(state);\\n\\n        if (_liquidity <= 0){\\n            return 0;\\n        }\\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\\n        int256 exposure = state.totalLongs - state.totalShorts;\\n        if (exposure < 0){\\n            exposure *= -1;\\n        }\\n\\n        //10% now. TODO: allow setup via Params\\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\\n    }\\n\\n\\n    function getPrices(\\n        State storage state\\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\\n        marketPrice = currentPrice(state);\\n\\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function currentPrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return state.params.initialPrice.muld(state.ratio);\\n    }\\n\\n\\n    function oraclePrice(\\n        State storage state\\n    ) internal view returns (int256) {\\n        return IAssetOracle(state.params.assetOracle).getPrice();\\n    }\\n\\n    function approveStrips(\\n        State storage state,\\n        IERC20 _token,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"BAD_AMOUNT\\\");\\n\\n        SafeERC20.safeApprove(_token, \\n                                address(state.params.stripsProxy), \\n                                uint(_amount));\\n    }\\n    \\n    function _updateRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal\\n    {\\n        int256 _liquidity = getLiquidity(state); \\n        if (state._prevLiquidity == 0){\\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\\n            state.demand = state.supply.muld(state.ratio);\\n            state._prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - state._prevLiquidity;\\n\\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\\n        if (state.demand <= 0 || state.supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        state.ratio = state.demand.divd(state.supply);\\n        state._prevLiquidity = _liquidity;\\n    }\\n\\n\\n    // we need this to be VIEW to use for priceChange calculations\\n    function _whatIfRatio(\\n        State storage state,\\n        int256 _longAmount,\\n        int256 _shortAmount\\n    ) internal view returns (int256){\\n        int256 ratio = state.ratio;\\n        int256 supply = state.supply;\\n        int256 demand = state.demand;\\n        int256 prevLiquidity = state._prevLiquidity;\\n\\n        int256 _liquidity = getLiquidity(state);\\n        \\n        if (prevLiquidity == 0){\\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\\n            demand = supply.muld(ratio);\\n            prevLiquidity = _liquidity;\\n        }\\n\\n        int256 diff = _liquidity - prevLiquidity;\\n\\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\\n        if (demand <= 0 || supply <= 0){\\n            require(0 == 1, \\\"SUSPENDED\\\");\\n        }\\n\\n        return demand.divd(supply);\\n    }\\n}\\n\",\"keccak256\":\"0xb5002c068f330d45a666d024ac68cd57c8c48e25e0774ad83938678bacc2d305\"},\"contracts/lib/StorageStrips.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\nimport { IAssetOracle } from \\\"../interface/IAssetOracle.sol\\\";\\nimport { IInsuranceFund } from \\\"../interface/IInsuranceFund.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"./SignedBaseMath.sol\\\";\\nimport { StorageMarketLib } from \\\"./StorageMarket.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nlibrary StorageStripsLib {\\n    using SignedBaseMath for int256;\\n    \\n    struct MarketData {\\n        bool created;\\n\\n        //TODO: any data about the\\n    }\\n\\n    struct Position {\\n        IMarket market; //can be removed\\n        address trader;\\n\\n        int256 initialPrice; //will become avg on _aggregation\\n        int256 entryPrice;   // always the \\\"new market price\\\"\\n        int256 prevAvgPrice; \\n\\n        int256 collateral; \\n        int256 notional; \\n\\n        uint256 initialTimestamp;\\n        uint256 cummulativeIndex; \\n        uint256 initialBlockNumber;\\n        uint256 posIndex;           // use this to find position by index\\n        uint256 lastChangeBlock;\\n\\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\\n        \\n        //TODO: refactor this\\n        bool isLong;\\n        bool isActive;\\n        bool isLiquidated;  \\n        \\n        //used only for AMM\\n        bool isAmm;\\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\\n        int256 zeroParameter;\\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\\n        int256 lastInitialPrice;  // for amm\\n        bool lastIsLong;\\n\\n        int256 oraclePriceUsed;\\n    }\\n\\n    struct RiskParams {\\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \\n        int256 daoFeeRatio;\\n\\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\\n        int256 insuranceProfitOnPositionClosed;\\n\\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\\n        int256 minimumPricePossible; //use this when calculate fee\\n    }\\n\\n    struct OracleData {\\n        bool isActive;\\n        int256 keeperReward; \\n    }\\n\\n    /*Use this struct for fast access to position */\\n    struct PositionMeta {\\n        bool isActive; // is Position active\\n\\n        address _account; \\n        IMarket _market;\\n        uint _posIndex;\\n    }\\n\\n\\n    //GENERAL STATE - keep aligned on update\\n    struct State {\\n        address dao;\\n        bool isSuspended;\\n\\n        /*Markets data */\\n        IMarket[] allMarkets;\\n        mapping (IMarket => MarketData) markets;\\n\\n        /*Traders data */\\n        address[] allAccounts; // never pop\\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\\n\\n        mapping (address => mapping(IMarket => Position)) accounts; \\n        \\n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\\n        mapping (uint => PositionMeta) indexToPositionMeta;\\n        uint256 currentPositionIndex; //index of the latest created position\\n\\n        /*Oracles */\\n        address[] allOracles;\\n        mapping(address => OracleData) oracles;\\n\\n        /*Strips params */\\n        RiskParams riskParams;\\n        IInsuranceFund insuranceFund;\\n        IERC20 tradingToken;\\n\\n        // last ping timestamp\\n        uint256 lastAlive;\\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\\n        uint256 keepAliveInterval;\\n\\n        address lpOracle;\\n    }\\n\\n    /*\\n        Oracles routines\\n    */\\n    function addOracle(\\n        State storage state,\\n        address _oracle,\\n        int256 _keeperReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == false, \\\"ORACLE_EXIST\\\");\\n        \\n        state.oracles[_oracle].keeperReward = _keeperReward;\\n        state.oracles[_oracle].isActive = true;\\n\\n        state.allOracles.push(_oracle);\\n    }\\n\\n    function removeOracle(\\n        State storage state,\\n        address _oracle\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].isActive = false;\\n    }\\n\\n\\n    function changeOracleReward(\\n        State storage state,\\n        address _oracle,\\n        int256 _newReward\\n    ) internal {\\n        require(state.oracles[_oracle].isActive == true, \\\"NO_SUCH_ORACLE\\\");\\n        state.oracles[_oracle].keeperReward = _newReward;\\n    }\\n\\n\\n    /*\\n    *******************************************************\\n    *   getters/setters for adding/removing data to state\\n    *******************************************************\\n    */\\n\\n    function setInsurance(\\n        State storage state,\\n        IInsuranceFund _insurance\\n    ) internal\\n    {\\n        require(address(_insurance) != address(0), \\\"ZERO_INSURANCE\\\");\\n        require(address(state.insuranceFund) == address(0), \\\"INSURANCE_EXIST\\\");\\n\\n        state.insuranceFund = _insurance;\\n    }\\n\\n    function getMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal view returns (MarketData storage market) {\\n        market = state.markets[_market];\\n        require(market.created == true, \\\"NO_MARKET\\\");\\n    }\\n\\n    function addMarket(\\n        State storage state,\\n        IMarket _market\\n    ) internal {\\n        MarketData storage market = state.markets[_market];\\n        require(market.created == false, \\\"MARKET_EXIST\\\");\\n\\n        state.markets[_market].created = true;\\n        state.allMarkets.push(_market);\\n    }\\n\\n    function setRiskParams(\\n        State storage state,\\n        RiskParams memory _riskParams\\n    ) internal{\\n        state.riskParams = _riskParams;\\n    }\\n\\n\\n\\n    // Not optimal \\n    function checkPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account\\n    ) internal view returns (Position storage){\\n        return state.accounts[account][_market];\\n    }\\n\\n    // Not optimal \\n    function getPosition(\\n        State storage state,\\n        IMarket _market,\\n        address _account\\n    ) internal view returns (Position storage position){\\n        position = state.accounts[_account][_market];\\n        require(position.isActive == true, \\\"NO_POSITION\\\");\\n    }\\n\\n    function setPosition(\\n        State storage state,\\n        IMarket _market,\\n        address account,\\n        bool isLong,\\n        int256 collateral,\\n        int256 notional,\\n        int256 initialPrice,\\n        bool merge\\n    ) internal returns (uint256 index) {\\n        \\n        /*TODO: remove this */\\n        if (state.existingAccounts[account] == false){\\n            state.allAccounts.push(account); \\n            state.existingAccounts[account] = true;\\n        }\\n        Position storage _position = state.accounts[account][_market];\\n\\n        /*\\n            Update PositionMeta for faster itterate over positions.\\n            - it MUST be trader position\\n            - it should be closed or liquidated. \\n\\n            We DON'T update PositionMeta if it's merge of the position\\n         */\\n        if (address(_market) != account && _position.isActive == false)\\n        {            \\n            /*First ever position for this account-_market setup index */\\n            if (_position.posIndex == 0){\\n                if (state.currentPositionIndex == 0){\\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\\n                }\\n\\n                _position.posIndex = state.currentPositionIndex;\\n\\n                state.allIndexes.push(_position.posIndex);\\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\\n                    isActive: true,\\n                    _account: account,\\n                    _market: _market,\\n                    _posIndex: _position.posIndex\\n                });\\n\\n                /*INCREMENT index only if unique position was created */\\n                state.currentPositionIndex += 1;                \\n            }else{\\n                /*We don't change index if it's old position, just need to activate it */\\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\\n            }\\n        }\\n\\n        index = _position.posIndex;\\n\\n        _position.trader = account;\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = true;\\n        _position.isLiquidated = false;\\n\\n        _position.isLong = isLong;\\n        _position.market = _market;\\n        _position.cummulativeIndex = _market.currentOracleIndex();\\n        _position.initialTimestamp = block.timestamp;\\n        _position.initialBlockNumber = block.number;\\n        _position.entryPrice = initialPrice;\\n\\n        int256 avgPrice = initialPrice;\\n        int256 prevAverage = _position.prevAvgPrice;\\n        if (prevAverage != 0){\\n            int256 prevNotional = _position.notional; //save 1 read\\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\\n        }\\n        \\n        \\n        _position.prevAvgPrice = avgPrice;\\n\\n        \\n        if (merge == true){\\n            _position.collateral +=  collateral; \\n            _position.notional += notional;\\n            _position.initialPrice = avgPrice;\\n        }else{\\n            _position.collateral = collateral;\\n            _position.notional = notional;\\n            _position.initialPrice = initialPrice;\\n            \\n            //It's AMM need to deal with that in other places        \\n            if (address(_market) == account){\\n                _position.isAmm = true;\\n                _position.lastNotional = notional;\\n                _position.lastInitialPrice = initialPrice;\\n            }\\n        }\\n    }\\n\\n    function unsetPosition(\\n        State storage state,\\n        Position storage _position\\n    ) internal {\\n        if (_position.isActive == false){\\n            return;\\n        } \\n\\n        /*\\n            Position is fully closed or liquidated, NEED to update PositionMeta \\n            BUT\\n            we never reset the posIndex\\n        */\\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\\n\\n        _position.lastChangeBlock = block.number;\\n        _position.isActive = false;\\n\\n        _position.entryPrice = 0;\\n        _position.collateral = 0; \\n        _position.notional = 0; \\n        _position.initialPrice = 0;\\n        _position.cummulativeIndex = 0;\\n        _position.initialTimestamp = 0;\\n        _position.initialBlockNumber = 0;\\n        _position.unrealizedPnl = 0;\\n        _position.prevAvgPrice = 0;\\n    }\\n\\n    function partlyClose(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral,\\n        int256 notional,\\n        int256 unrealizedPaid\\n    ) internal {\\n        _position.collateral -= collateral; \\n        _position.notional -= notional;\\n        _position.unrealizedPnl -= unrealizedPaid;\\n        _position.lastChangeBlock = block.number;\\n    }\\n\\n    /*\\n    *******************************************************\\n    *******************************************************\\n    *   Liquidation related functions\\n    *******************************************************\\n    *******************************************************\\n    */\\n    function getLiquidationRatio(\\n        State storage state\\n    ) internal view returns (int256){\\n        return state.riskParams.liquidationMarginRatio;\\n    }\\n\\n\\n    //Integrity check outside\\n    function addCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral += collateral;\\n    }\\n\\n    function removeCollateral(\\n        State storage state,\\n        Position storage _position,\\n        int256 collateral\\n    ) internal {\\n        _position.collateral -= collateral;\\n        \\n        require(_position.collateral >= 0, \\\"COLLATERAL_TOO_BIG\\\");\\n    }\\n\\n\\n\\n    /*\\n    *******************************************************\\n    *   Funds view/transfer utils\\n    *******************************************************\\n    */\\n    function depositToDao(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n        require(state.dao != address(0), \\\"ZERO_DAO\\\");\\n        \\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken,\\n                                        state.dao, \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        state.dao, \\n                                        uint(_amount));\\n        }\\n\\n    }\\n\\n    function depositToMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(_market), \\n                                        uint(_amount));\\n\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(_market), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(_amount);\\n    }\\n    \\n    function withdrawFromMarket(\\n        State storage state,\\n        IMarket _market,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"WRONG_AMOUNT\\\");\\n\\n        getMarket(state, _market);\\n\\n        IStakeble(address(_market)).ensureFunds(_amount);\\n\\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\\n        SafeERC20.safeTransferFrom(state.tradingToken, \\n                                    address(_market), \\n                                    _to, \\n                                    uint(_amount));\\n\\n        IStakeble(address(_market)).externalLiquidityChanged();\\n\\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\\n    }\\n\\n    function depositToInsurance(\\n        State storage state,\\n        address _from,\\n        int256 _amount\\n    ) internal {\\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        if (_from == address(this)){\\n            SafeERC20.safeTransfer(state.tradingToken, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }else{\\n            SafeERC20.safeTransferFrom(state.tradingToken, \\n                                        _from, \\n                                        address(state.insuranceFund), \\n                                        uint(_amount));\\n        }\\n\\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\\n\\n    }\\n    \\n    function withdrawFromInsurance(\\n        State storage state,\\n        address _to,\\n        int256 _amount\\n    ) internal {\\n        \\n        require(address(state.insuranceFund) != address(0), \\\"BROKEN_INSURANCE_ADDRESS\\\");\\n\\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\\n\\n        state.insuranceFund.withdraw(_to, _amount);\\n\\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x7dcb1bea49c60cc77513a30336c640b2180c776b086c10f4fc6aa4003fce2102\"},\"contracts/lib/events/Stakeble.sol\":{\"content\":\"interface IStakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n}\\n\\nlibrary StakebleEvents {\\n    event LogUnstake(\\n        address indexed asset,\\n        address indexed staker,\\n\\n        int256 slpAmount,\\n        int256 stakingProfit,\\n        int256 tradingProfit\\n    );\\n\\n    function logUnstakeData(address _asset,\\n                            address _staker,\\n                            int256 _slpAmount,\\n                            int256 _stakingProfit,\\n                            int256 _tradingProfit) internal {\\n        \\n        emit LogUnstake(_asset,\\n                        _staker,\\n\\n                        _slpAmount,\\n                        _stakingProfit,\\n                        _tradingProfit);\\n    }\\n}\",\"keccak256\":\"0xda945ffee7cc42f25a0f2fe14a3ba653cd50501caa5d87f192a5b79b26dbf867\"},\"contracts/lib/events/Strips.sol\":{\"content\":\"interface IStripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        CheckInsuranceParams params\\n    );\\n\\n    struct CheckInsuranceParams{\\n        int256 lpLiquidity;\\n        int256 usdcLiquidity;\\n        uint256 sipTotalSupply;\\n    }\\n\\n    // ============ Structs ============\\n\\n    struct CheckParams{\\n        /*Integrity Checks */        \\n        int256 marketPrice;\\n        int256 oraclePrice;\\n        int256 tradersTotalPnl;\\n        int256 uniLpPrice;\\n        \\n        /*Market params */\\n        bool ammIsLong;\\n        int256 ammTradingPnl;\\n        int256 ammFundingPnl;\\n        int256 ammTotalPnl;\\n        int256 ammNotional;\\n        int256 ammInitialPrice;\\n        int256 ammEntryPrice;\\n        int256 ammTradingLiquidity;\\n        int256 ammStakingLiquidity;\\n        int256 ammTotalLiquidity;\\n\\n        /*Trading params */\\n        bool isLong;\\n        int256 tradingPnl;\\n        int256 fundingPnl;\\n        int256 totalPnl;\\n        int256 marginRatio;\\n        int256 collateral;\\n        int256 notional;\\n        int256 initialPrice;\\n        int256 entryPrice;\\n\\n        /*Staking params */\\n        int256 slpTradingPnl;\\n        int256 slpStakingPnl;\\n        int256 slpTradingCummulativePnl;\\n        int256 slpStakingCummulativePnl;\\n        int256 slpTradingPnlGrowth;\\n        int256 slpStakingPnlGrowth;\\n        int256 slpTotalSupply;\\n\\n        int256 stakerInitialStakingPnl;\\n        int256 stakerInitialTradingPnl;\\n        uint256 stakerInitialBlockNum;\\n        int256 stakerUnrealizedStakingProfit;\\n        int256 stakerUnrealizedTradingProfit;\\n\\n        /*Rewards params */\\n        int256 tradingRewardsTotal; \\n        int256 stakingRewardsTotal;\\n    }\\n}\\n\\nlibrary StripsEvents {\\n    event LogCheckData(\\n        address indexed account,\\n        address indexed market,\\n        IStripsEvents.CheckParams params\\n    );\\n\\n    event LogCheckInsuranceData(\\n        address indexed insurance,\\n        IStripsEvents.CheckInsuranceParams params\\n    );\\n\\n\\n    function logCheckData(address _account,\\n                            address _market, \\n                            IStripsEvents.CheckParams memory _params) internal {\\n        \\n        emit LogCheckData(_account,\\n                        _market,\\n                        _params);\\n    }\\n\\n    function logCheckInsuranceData(address insurance,\\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\\n        \\n        emit LogCheckInsuranceData(insurance,\\n                                    _params);\\n    }\\n\\n}\",\"keccak256\":\"0x9048be262b6f457cc71e34181ad08f1b93bb421a9defb4c69ebb33d7a850032a\"},\"contracts/token/SLPToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IMarket } from \\\"../interface/IMarket.sol\\\";\\nimport { IStrips } from \\\"../interface/IStrips.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IStakeble } from \\\"../interface/IStakeble.sol\\\";\\n\\nimport { SignedBaseMath } from \\\"../lib/SignedBaseMath.sol\\\";\\nimport { IStripsLpToken } from \\\"../interface/IStripsLpToken.sol\\\";\\nimport { IUniswapLpOracle } from \\\"../interface/IUniswapLpOracle.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title SLP token using for adding \\\"stakebility\\\" to any asset\\n * @dev created by the asset. All calls for changing PNL are ownable:\\n * Have 2 tokens by default:\\n *  staking - the token that is using for staking to Asset (UNIV2 pair by default for the current version)\\n *  trading - the token that is using for accumulating profit. By default it's USDC\\n * @author Strips Finance\\n **/\\ncontract SLPToken is \\n    IStripsLpToken,\\n    ERC20, \\n    ReentrancyGuard,\\n    Ownable\\n{ \\n    using SignedBaseMath for int256;\\n\\n    // Developed to be able to track 2-tokens asset\\n    struct StakerData {\\n        bool exist;\\n\\n        //save initial staking/trading cummulative PNL on staker's stake event.\\n        int256 initialStakingPnl;\\n        int256 initialTradingPnl;\\n        \\n        uint256 initialBlockNum;\\n        uint256 initialTimeStamp;\\n\\n        //Save the current staking/trading unrealized profit when the staker stake 2+ time.\\n        int256 unrealizedStakingProfit;\\n        int256 unrealizedTradingProfit;\\n    }\\n\\n    int256 public prevStakingPnl;\\n    int256 public prevTradingPnl;\\n\\n    int256 public cummulativeStakingPnl;\\n    int256 public cummulativeTradingPnl;\\n    \\n    //For tracking trading/staking \\\"growth\\\", should be changed by the OWNER only \\n    int256 public cumTradingPNL;\\n    int256 public cumStakingPNL;\\n        \\n    \\n    //All data setup on init\\n    TokenParams private params;\\n    mapping (address => StakerData) public stakers;\\n\\n    /*To not have stack too deep error */\\n    struct InternalCalcs {\\n        int256 amount;\\n        int256 assetPnl;\\n        int256 currentTradingPnl;\\n        int256 currentStakingPnl;\\n\\n        int256 instantCummulativeStakingPnl;\\n        int256 isntantCummulativeTradingPnl;\\n\\n        int256 unstakeShare;\\n        int256 feeShare;\\n    }\\n\\n\\n    constructor(TokenParams memory _params,\\n                string memory _name,\\n                string memory _symbol) \\n                ERC20(_name, _symbol) \\n    {\\n        params = _params;\\n    }\\n\\n    function changeTradingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumTradingPNL += amount;\\n    }\\n    \\n    function changeStakingPnl(int256 amount) public override onlyOwner\\n    {\\n        cumStakingPNL += amount;\\n    }\\n\\n    function claimProfit(address staker, uint256 amount) public override onlyOwner returns (int256 stakingProfit, int256 tradingProfit)\\n    {\\n        ProfitParams memory profit = calcProfit(staker, amount);\\n        if (profit.stakingFee > 0){\\n            changeStakingPnl(profit.stakingFee);\\n        }\\n\\n        if (profit.lpProfit > 0){\\n            changeStakingPnl(profit.lpProfit);\\n        }\\n\\n        if (profit.usdcLoss < 0){\\n            changeTradingPnl(profit.usdcLoss);\\n        }\\n\\n\\n        burn(staker, amount);\\n\\n        stakingProfit = profit.unstakeAmountLP;\\n        tradingProfit = profit.unstakeAmountERC20;\\n    }\\n\\n\\n    function getPairPrice() external view override returns (int256)\\n    {\\n        return IUniswapLpOracle(params.pairOracle).getPrice();\\n    }\\n\\n    function getBurnableToken() external view override returns (address)\\n    {\\n        return params.stakingToken;\\n    }\\n\\n    function getParams() external view override returns (TokenParams memory)\\n    {   \\n        return params;\\n    }\\n\\n    function checkOwnership() external view override onlyOwner returns (address) {\\n        //DO nothing, just revert if call is not from owner\\n\\n        return owner();\\n    }\\n\\n    function totalPnl() external view override returns (int256 usdcTotal, int256 lpTotal)\\n    {\\n        int256 unrealizedPnl = IStrips(params.stripsProxy).assetPnl(owner());\\n\\n        usdcTotal = unrealizedPnl + cumTradingPNL;\\n        lpTotal = cumStakingPNL;\\n    }\\n\\n    function stakingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        current = cumStakingPNL;\\n\\n        if (_totalSupply == 0){\\n            cummulative = cummulativeStakingPnl + current;\\n        } else {\\n            cummulative = cummulativeStakingPnl + (current - prevStakingPnl).divd(_totalSupply);\\n        }\\n\\n    }\\n\\n    function tradingPnl() public view returns (int256 current, int256 cummulative)\\n    {\\n        address _owner = owner();\\n        int256 _totalSupply = int256(totalSupply());\\n\\n        int256 assetPnl = IStrips(params.stripsProxy).assetPnl(_owner);\\n\\n        current = assetPnl + cumTradingPNL;\\n        \\n        if (_totalSupply == 0){\\n            cummulative = cummulativeTradingPnl + current;\\n        } else {\\n            cummulative = cummulativeTradingPnl + (current - prevTradingPnl).divd(_totalSupply);\\n        }\\n    }\\n\\n\\n    function accumulatePnl() public override onlyOwner {\\n        int256 currentStakingPnl = 0;\\n        int256 currentTradingPnl = 0;\\n\\n        (currentStakingPnl, cummulativeStakingPnl) = stakingPnl();\\n        prevStakingPnl = currentStakingPnl;\\n\\n\\n        (currentTradingPnl, cummulativeTradingPnl) = tradingPnl();\\n        prevTradingPnl = currentTradingPnl;\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function saveProfit(address staker) public override onlyOwner {\\n        int256 tokenBalance = int256(balanceOf(staker));\\n        \\n        stakers[staker].unrealizedStakingProfit += (cummulativeStakingPnl - stakers[staker].initialStakingPnl).muld(tokenBalance);\\n        stakers[staker].unrealizedTradingProfit += (cummulativeTradingPnl - stakers[staker].initialTradingPnl).muld(tokenBalance);\\n    }\\n\\n\\n    /*All checks should be made inside caller */\\n    function mint(address staker, uint256 amount) public override onlyOwner \\n    {        \\n        stakers[staker] = StakerData({\\n            exist: true,\\n\\n            initialStakingPnl:cummulativeStakingPnl,\\n            initialTradingPnl:cummulativeTradingPnl,\\n    \\n            initialBlockNum:block.number,\\n            initialTimeStamp:block.timestamp,\\n\\n            unrealizedStakingProfit: stakers[staker].unrealizedStakingProfit,\\n            unrealizedTradingProfit: stakers[staker].unrealizedTradingProfit\\n        });\\n\\n        _mint(staker, amount);\\n    }\\n\\n    /*All checks should be made inside caller */\\n    function burn(address staker, uint256 amount) public override onlyOwner \\n    {\\n        int256 burnShare = int256(amount).divd(int256(balanceOf(staker)));\\n\\n        stakers[staker].unrealizedStakingProfit -= (stakers[staker].unrealizedStakingProfit.muld(burnShare));\\n        stakers[staker].unrealizedTradingProfit -= (stakers[staker].unrealizedTradingProfit.muld(burnShare));\\n\\n        _burn(staker, amount);\\n\\n        if (balanceOf(staker) == 0){\\n            delete stakers[staker];\\n        }\\n    }\\n\\n    function canUnstake(address staker, uint256 amount) external view override\\n    {\\n        require(stakers[staker].exist, \\\"NO_SUCH_STAKER\\\");\\n        require(block.number > stakers[staker].initialBlockNum, \\\"UNSTAKE_SAME_BLOCK\\\");\\n        require(amount > 0 && balanceOf(staker) >= amount, \\\"WRONG_UNSTAKE_AMOUNT\\\");\\n    }\\n\\n        \\n\\n\\n    /**\\n     * @dev Major view method that is using by frontend to view the current profit\\n     *  Here is how we show data on frontend (check ProfitParams below):\\n     *  1 - On major screen with the list of all stakes:\\n     *       totalStaked = 100 Lp tokens  (shows in LP amount of LP tokens user staked)\\n     *       stakingProfit (LP) = 10 LP ($10)  (shows the profit or loss that staker earned or lost in LP. Need to convert to USDC using profit.lpPrice)\\n     *       unstakeAmountERC20 (USDC) = -$100  (shows the profit or loss that staker earned in USDC)\\n     *       stakingFee = 1 LP (days left to 0 = penaltyLeft)\\n     *\\n     *  2 - on popup when staker select THE EXACT amount of SLP to unstake:\\n     *       profit.unstakeAmountLP (LP) = 100 LP ($100)   The amount that the staker will receive in LP, including collateral\\n     *       profit.unstakeAmountERC20 (USDC) = $10 | 0.   The amount that the staker will receive in USDC. Will be 0 if pnl is negative.\\n     *       _ hide the penalty\\n     *\\n     * @param staker staker address\\n     * @param amount amount of SLP tokens for unstake\\n     * @return profit ProfitParams all data that is required to show the profit, check IStripsLpToken interface\\n     *       struct ProfitParams\\n     *           // LP unstaked amount \\n     *           int256 unstakeAmountLP;\\n     *\\n     *           //USDC unstaked amount  \\n     *           int256 unstakeAmountERC20;\\n     *\\n     *          //LP profit or loss not including collateral\\n     *           int256 stakingProfit;   \\n     *           \\n     *           //Fee that is paid if unstake in less than 7 days (paid in LP tokens)\\n     *           int256 stakingFee;\\n     *\\n     *          //Time in seconds left untill penalty will become 0\\n     *           int256 penaltyLeft;\\n     *\\n     *           //Collateral in LP that staker staked\\n     *           uint256 totalStaked;\\n     *\\n     *           //The current LP price (in USDC), using for conversion\\n     *           int256 lpPrice;\\n     **/\\n    function calcProfit(address staker, uint256 amount) public view override returns (ProfitParams memory profit)\\n    {\\n        profit.totalStaked = balanceOf(staker);\\n        require(amount > 0 && amount <= profit.totalStaked, \\\"WRONG_AMOUNT\\\");\\n        \\n        InternalCalcs memory internalCalcs;\\n        internalCalcs.amount = int256(amount);\\n\\n        (internalCalcs.currentStakingPnl, \\n            internalCalcs.instantCummulativeStakingPnl) = stakingPnl();\\n        \\n        (internalCalcs.currentTradingPnl, \\n            internalCalcs.isntantCummulativeTradingPnl) = tradingPnl();\\n\\n        internalCalcs.unstakeShare = internalCalcs.amount.divd(int256(profit.totalStaked));\\n        profit.stakingProfit = internalCalcs.amount.muld(internalCalcs.instantCummulativeStakingPnl - stakers[staker].initialStakingPnl) +  internalCalcs.unstakeShare.muld(stakers[staker].unrealizedStakingProfit);\\n        profit.unstakeAmountERC20 = internalCalcs.amount.muld(internalCalcs.isntantCummulativeTradingPnl - stakers[staker].initialTradingPnl) + internalCalcs.unstakeShare.muld(stakers[staker].unrealizedTradingProfit);\\n\\n        (internalCalcs.feeShare, \\n            profit.penaltyLeft) = calcFeeLeft(staker);\\n\\n        profit.stakingFee = internalCalcs.amount.muld(internalCalcs.feeShare);\\n        profit.unstakeAmountLP = internalCalcs.amount + profit.stakingProfit - profit.stakingFee;\\n\\n        profit.lpPrice = IUniswapLpOracle(params.pairOracle).getPrice();\\n        if (profit.unstakeAmountERC20 < 0){\\n            profit.usdcLoss = profit.unstakeAmountERC20;\\n            profit.lpProfit = -1 * profit.usdcLoss.divd(profit.lpPrice);\\n            profit.unstakeAmountLP = profit.unstakeAmountLP  - profit.lpProfit;\\n\\n            profit.unstakeAmountERC20 = 0;\\n            \\n        }\\n\\n    }\\n    \\n\\n    /*\\n        2% fee during 7 days now.\\n    */\\n    function calcFeeLeft(\\n        address staker\\n    ) public view override returns (int256 feeShare, \\n                                int256 periodLeft)\\n    {\\n        feeShare = 0;\\n        periodLeft = 0;\\n\\n        int256 time_elapsed = int256(block.timestamp - stakers[staker].initialTimeStamp);\\n\\n        if (time_elapsed >= params.penaltyPeriod){\\n            return (0, 0);\\n        }\\n        \\n        feeShare = params.penaltyFee - params.penaltyFee.divd(params.penaltyPeriod.toDecimal()).muld(time_elapsed.toDecimal());\\n        periodLeft = params.penaltyPeriod - time_elapsed;\\n    }\\n\\n    function setPenaltyFee(int256 _fee) external override onlyOwner{\\n        require(_fee >= 0, \\\"WRONG_FEE\\\");\\n\\n        params.penaltyFee = _fee;\\n    }\\n\\n    function setParams(TokenParams memory _params) external override onlyOwner{\\n        params = _params;\\n    }\\n\\n\\n    function transfer(address recipient, uint256 amount) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(msg.sender, recipient, amount);\\n\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override(ERC20, IERC20) returns (bool) {\\n        _transferStake(sender, recipient, amount);\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferStake(address sender, address recipient, uint256 amount) private {\\n        require(stakers[sender].exist, \\\"STAKER_NOT_FOUND\\\");\\n        require(stakers[recipient].exist == false, \\\"MERGE_NOT_POSSIBLE\\\");\\n\\n        int256 transferShare = int256(amount / balanceOf(sender));\\n\\n        stakers[recipient] = stakers[sender];\\n\\n        int256 stakingProfit = transferShare * stakers[sender].unrealizedStakingProfit;\\n        int256 tradingProfit = transferShare * stakers[sender].unrealizedTradingProfit;\\n\\n        if (stakingProfit != 0){\\n            stakers[sender].unrealizedStakingProfit -= stakingProfit;\\n            stakers[recipient].unrealizedStakingProfit = stakingProfit;\\n        }\\n\\n        if (tradingProfit != 0){\\n            stakers[sender].unrealizedTradingProfit -= tradingProfit;\\n            stakers[recipient].unrealizedTradingProfit = tradingProfit;\\n        }\\n\\n        if (amount == balanceOf(sender)){\\n            delete stakers[sender];\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1578fe2e4327eebd21ad4dc9d774d8719a147144de2dbde25fd1a6d10b31baef\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61274161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806310db51c71461006657806334ff7f611461008857806372bea827146100a8578063ae73baba146100c7578063fdd8e4a0146100e7575b600080fd5b81801561007257600080fd5b50610086610081366004612227565b610107565b005b81801561009457600080fd5b506100866100a33660046121e2565b610137565b8180156100b457600080fd5b506100866100c3366004612172565b5050565b8180156100d357600080fd5b506100866100e23660046121a1565b6105ca565b8180156100f357600080fd5b5061008661010236600461215a565b611566565b60008151801561012757634e487b7160e01b600052602160045260246000fd5b14156100c3576100c38282602001515b60008180602001905181019061014d919061210f565b80519091506001600160a01b031661019d5760405162461bcd60e51b815260206004820152600e60248201526d109493d2d15397d050d0d3d5539560921b60448201526064015b60405180910390fd5b6000836001018054806020026020016040519081016040528092919081815260200182805480156101f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d9575b50505050509050600081511161023c5760405162461bcd60e51b815260206004820152600a6024820152694e4f5f4d41524b45545360b01b6044820152606401610194565b8360120160009054906101000a90046001600160a01b03166001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190612060565b156103aa57601284015460408051639015dcc960e01b815290516000926001600160a01b031691639015dcc9916004808301926020929190829003018186803b15801561031057600080fd5b505afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610348919061203d565b83516040516350aee08d60e01b81526001600160a01b0391821660048201529192508216906350aee08d90602401600060405180830381600087803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b50505050505b60005b81518110156105c3578181815181106103d657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190612060565b610457576105b1565b600082828151811061047957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f1919061203d565b84516040516350aee08d60e01b81526001600160a01b0391821660048201529192508216906350aee08d90602401600060405180830381600087803b15801561053957600080fd5b505af115801561054d573d6000803e3d6000fd5b505085516040516347ff314760e01b81526001600160a01b03918216600482015290841692506347ff31479150602401600060405180830381600087803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b50505050505b806105bb816126ac565b9150506103ad565b5050505050565b6106e1604051806104ab816001600160a01b031663bd9a548b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561071957600080fd5b505afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075191906120ec565b60208084019190915290825260408051630f3bee3d60e01b815290516001600160a01b03851692630f3bee3d9260048082019391829003018186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d1919061203d565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084191906120d4565b60608201526000610853858480611711565b600d810154909150610100900460ff16156109b057600d81015460ff16151560808301526006810154610100830152600281015461012083015260038101546101408301526040805162910a5160e41b815290516001600160a01b03851691630910a510916004808301926020929190829003018186803b1580156108d757600080fd5b505afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f91906120d4565b6101a08301526040805163ca4fa49560e01b815281516001600160a01b0386169263ca4fa4959260048082019391829003018186803b15801561095157600080fd5b505afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906120ec565b6101808401526101608301526109a085848361173f565b60e085015260a084015260c08301525b6000836001600160a01b031663807354ce6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109eb57600080fd5b505afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a23919061203d565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918316906370a082319060240160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906120d4565b1115610b42576040516348b4573960e11b81526001600160a01b038681166004830152821690639168ae729060240160e06040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b21919061207a565b6104408a0152610420890152506104008701526103e08601526103c0850152505b806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906120d4565b836103a0018181525050806001600160a01b0316638e8ed3416040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf657600080fd5b505afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906120d4565b83610320018181525050806001600160a01b031663018e15c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7157600080fd5b505afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca991906120d4565b83610340018181525050806001600160a01b0316632583a7876040518163ffffffff1660e01b815260040160206040518083038186803b158015610cec57600080fd5b505afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906120d4565b836102e0018181525050806001600160a01b031663ce44ec706040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f91906120d4565b836103000181815250506000816001600160a01b0316636e94857d6040518163ffffffff1660e01b8152600401604080518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b91906120ec565b5090506000826001600160a01b031663f23ae9966040518163ffffffff1660e01b8152600401604080518083038186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9091906120ec565b509050826001600160a01b031663c89a8c546040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906120d4565b610f0e9083612656565b85610360018181525050826001600160a01b0316630d5243566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8991906120d4565b610f939082612656565b6103808601526001600160a01b0386811690881614156111095760008860030180548060200260200160405190810160405280929190818152602001828054801561100757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe9575b5050505050905060005b815181101561110257876001600160a01b031682828151811061104457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611060576110f0565b600061109e8984848151811061108657634e487b7160e01b600052603260045260246000fd5b60200260200101518d6117119092919063ffffffff16565b600d81015490915060ff610100909104161515600114156110ee5760006110d08c8b846110c961175e565b6001611778565b60408c01805191945084935091506110e990839061246d565b905250505b505b806110fa816126ac565b915050611011565b5050611551565b600061111689888a611711565b600d810154909150610100900460ff16156111a457600d81015460ff1615156101c08701526005810154610260870152600681015461028087015260028101546102a087015260038101546102c087015261117c89888361117561175e565b600061179b565b610240880152506111918988836110c961175e565b6102208901526101e08801526102008701525b8860120160009054906101000a90046001600160a01b03166001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190612060565b1561134457601289015460408051639015dcc960e01b815290516000926001600160a01b031691639015dcc9916004808301926020929190829003018186803b15801561127857600080fd5b505afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b0919061203d565b6040516319beeebf60e31b81526001600160a01b038b811660048301529192509082169063cdf775f89060240160206040518083038186803b1580156112f557600080fd5b505afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d91906120d4565b876104800181815161133f919061246d565b905250505b866001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612060565b1561154f576000876001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d919061203d565b6040516304d608d360e11b81526001600160a01b038b81166004830152919250908216906309ac11a69060240160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906120d4565b87610460018181516114bc919061246d565b9052506040516319beeebf60e31b81526001600160a01b038a8116600483015282169063cdf775f89060240160206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153891906120d4565b876104800181815161154a919061246d565b905250505b505b61155c878787611862565b5050505050505050565b61158a60405180606001604052806000815260200160008152602001600081525090565b601282015460408051634039aa6760e11b815290516001600160a01b0390921691600091839163807354ce91600480820192602092909190829003018186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e919061203d565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164957600080fd5b505afa15801561165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168191906120d4565b836040018181525050816001600160a01b031663ca4fa4956040518163ffffffff1660e01b8152600401604080518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa91906120ec565b8452602084015261170b82846118b2565b50505050565b6001600160a01b03808216600090815260058501602090815260408083209386168352929052209392505050565b600080600061174f868686611908565b91989097509095509350505050565b6000611773670de0b6b3a764000060016125d3565b905090565b600080600061178a8888888888611b30565b919a90995090975095505050505050565b6000806117ab8787878787611df9565b91506117b561175e565b8414156117e1576117da85600601548387600501546117d4919061246d565b90611e1b565b9050611858565b60006117f78888886117f161175e565b88611df9565b905061185461181d8661180861175e565b6118129190612656565b600689015490611e42565b84836118408961182b61175e565b6118359190612656565b60058c015490611e42565b61184a919061246d565b6117d49190612656565b9150505b9550959350505050565b816001600160a01b0316836001600160a01b03167f1f9f51e6f23d89f9b0b206304d42efbdcf3b79b6d16913f16b8e787e322b0dec836040516118a591906122c8565b60405180910390a3505050565b604080518251815260208084015190820152828201518183015290516001600160a01b038416917ff7f2722b48695825371ad75b4f4a8ed8e4fcf9018b09f53226c1445f0e6a9cb9919081900360600190a25050565b600080600080856001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561194757600080fd5b505afa15801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f91906120d4565b9050611998816117d48760020154846118129190612656565b92508460060154600014156119af5784600e015492505b604080516060810182526010870154815260118701546020820152601287015460ff1615159181019190915260098601544314611a07576006860154815260028601546020820152600d86015460ff16151560408201525b6000866007015442611a199190612695565b9050600080821315611abf576000611a358a8a60080154611e50565b90506000611a52611a496301e13380611f40565b6117d486611f40565b9050611a76611a6e828760200151611e4290919063ffffffff16565b865190611e42565b611a94611a8c611a8587611f40565b8590611e42565b875190611e42565b611a9e9190612656565b60128b015490935060ff16611abc57611ab9600019846125d3565b92505b50505b600c880154611ace908261246d565b9650876006015460001415611aee57611ae7868861246d565b9450611b23565b600d88015460ff16151560011415611b0a57611ae7868861246d565b86611b16876000612656565b611b20919061246d565b94505b5050505093509350939050565b6000806000611b696040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b600d87015460ff16151581526002870154602082015260068701546060820152600c8701546080820152611b9b61175e565b8614611bca576060810151611bb09087611e42565b60608201526080810151611bc49087611e42565b60808201525b600060018615151415611c4f57886001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4891906120d4565b9050611cea565b886001600160a01b031663dc028c0883606001516000611c6f9190612656565b845160405160e084901b6001600160e01b031916815260048101929092521515602482015260440160206040518083038186803b158015611caf57600080fd5b505afa158015611cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce791906120d4565b90505b611d0c816117d4846020015184611d019190612656565b606086015190611e42565b93506000886007015442611d209190612695565b90506000811315611da8576000611d3b8b8b60080154611e50565b90506000611d58611d4f6301e13380611f40565b6117d485611f40565b9050611d7f611d74828760200151611e4290919063ffffffff16565b606087015190611e42565b611d99611d8e611a8586611f40565b606088015190611e42565b611da39190612656565b975050505b6080830151611db7908761246d565b835190965015611dd257611dcb858761246d565b9350611deb565b85611dde866000612656565b611de89190612656565b93505b505050955095509592505050565b600080600080611e0c8989898989611b30565b9b9a5050505050505050505050565b60008160011415611e2d575081611e3c565b611e3983836012611f54565b90505b92915050565b6000611e3983836012611f7c565b6000826001600160a01b0316634dde1fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8b57600080fd5b505afa158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec3919061203d565b6001600160a01b031663796ba96c836040518263ffffffff1660e01b8152600401611ef091815260200190565b60206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906120d4565b6000611e3c670de0b6b3a7640000836125d3565b600082611f6083611f91565b611f6a90866125d3565b611f7491906124ae565b949350505050565b6000611f8782611f91565b611f6a84866125d3565b6000611e3c60ff8316600a61252b565b80518015158114611fb157600080fd5b919050565b600082601f830112611fc6578081fd5b813567ffffffffffffffff80821115611fe157611fe16126dd565b604051601f8301601f19908116603f01168101908282118183101715612009576120096126dd565b81604052838152866020858801011115612021578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561204e578081fd5b8151612059816126f3565b9392505050565b600060208284031215612071578081fd5b611e3982611fa1565b600080600080600080600060e0888a031215612094578283fd5b61209d88611fa1565b602089015160408a015160608b015160808c015160a08d015160c0909d0151949e939d50919b909a50909850965090945092505050565b6000602082840312156120e5578081fd5b5051919050565b600080604083850312156120fe578182fd5b505080516020909101519092909150565b600060208284031215612120578081fd5b6040516020810181811067ffffffffffffffff82111715612143576121436126dd565b6040528251612151816126f3565b81529392505050565b60006020828403121561216b578081fd5b5035919050565b60008060408385031215612184578182fd5b823591506020830135612196816126f3565b809150509250929050565b6000806000606084860312156121b5578283fd5b8335925060208401356121c7816126f3565b915060408401356121d7816126f3565b809150509250925092565b600080604083850312156121f4578182fd5b82359150602083013567ffffffffffffffff811115612211578182fd5b61221d85828601611fb6565b9150509250929050565b60008060408385031215612239578182fd5b82359150602083013567ffffffffffffffff80821115612257578283fd5b908401906040828703121561226a578283fd5b604051604081018181108382111715612285576122856126dd565b604052823560018110612296578485fd5b81526020830135828111156122a9578485fd5b6122b588828601611fb6565b6020830152508093505050509250929050565b60006104a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151612306608084018215159052565b5060a0838101519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c0808401511515908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048092830151929091019190915290565b600080821280156001600160ff1b038490038513161561248f5761248f6126c7565b600160ff1b83900384128116156124a8576124a86126c7565b50500190565b6000826124c957634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156124e3576124e36126c7565b500590565b600181815b80851115612523578160001904821115612509576125096126c7565b8085161561251657918102915b93841c93908002906124ed565b509250929050565b6000611e39838360008261254157506001611e3c565b8161254e57506000611e3c565b8160018114612564576002811461256e5761258a565b6001915050611e3c565b60ff84111561257f5761257f6126c7565b50506001821b611e3c565b5060208310610133831016604e8410600b84101617156125ad575081810a611e3c565b6125b783836124e8565b80600019048211156125cb576125cb6126c7565b029392505050565b60006001600160ff1b03818413828413808216868404861116156125f9576125f96126c7565b600160ff1b84871282811687830589121615612617576126176126c7565b858712925087820587128484161615612632576126326126c7565b87850587128184161615612648576126486126c7565b505050929093029392505050565b60008083128015600160ff1b850184121615612674576126746126c7565b6001600160ff1b038401831381161561268f5761268f6126c7565b50500390565b6000828210156126a7576126a76126c7565b500390565b60006000198214156126c0576126c06126c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461270857600080fd5b5056fea2646970667358221220975635ed80429f2adaef1e758022d8c804f41e58cf03f55fb0cb8fb0969adbf364736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806310db51c71461006657806334ff7f611461008857806372bea827146100a8578063ae73baba146100c7578063fdd8e4a0146100e7575b600080fd5b81801561007257600080fd5b50610086610081366004612227565b610107565b005b81801561009457600080fd5b506100866100a33660046121e2565b610137565b8180156100b457600080fd5b506100866100c3366004612172565b5050565b8180156100d357600080fd5b506100866100e23660046121a1565b6105ca565b8180156100f357600080fd5b5061008661010236600461215a565b611566565b60008151801561012757634e487b7160e01b600052602160045260246000fd5b14156100c3576100c38282602001515b60008180602001905181019061014d919061210f565b80519091506001600160a01b031661019d5760405162461bcd60e51b815260206004820152600e60248201526d109493d2d15397d050d0d3d5539560921b60448201526064015b60405180910390fd5b6000836001018054806020026020016040519081016040528092919081815260200182805480156101f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d9575b50505050509050600081511161023c5760405162461bcd60e51b815260206004820152600a6024820152694e4f5f4d41524b45545360b01b6044820152606401610194565b8360120160009054906101000a90046001600160a01b03166001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190612060565b156103aa57601284015460408051639015dcc960e01b815290516000926001600160a01b031691639015dcc9916004808301926020929190829003018186803b15801561031057600080fd5b505afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610348919061203d565b83516040516350aee08d60e01b81526001600160a01b0391821660048201529192508216906350aee08d90602401600060405180830381600087803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b50505050505b60005b81518110156105c3578181815181106103d657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190612060565b610457576105b1565b600082828151811061047957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f1919061203d565b84516040516350aee08d60e01b81526001600160a01b0391821660048201529192508216906350aee08d90602401600060405180830381600087803b15801561053957600080fd5b505af115801561054d573d6000803e3d6000fd5b505085516040516347ff314760e01b81526001600160a01b03918216600482015290841692506347ff31479150602401600060405180830381600087803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b50505050505b806105bb816126ac565b9150506103ad565b5050505050565b6106e1604051806104ab816001600160a01b031663bd9a548b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561071957600080fd5b505afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075191906120ec565b60208084019190915290825260408051630f3bee3d60e01b815290516001600160a01b03851692630f3bee3d9260048082019391829003018186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d1919061203d565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084191906120d4565b60608201526000610853858480611711565b600d810154909150610100900460ff16156109b057600d81015460ff16151560808301526006810154610100830152600281015461012083015260038101546101408301526040805162910a5160e41b815290516001600160a01b03851691630910a510916004808301926020929190829003018186803b1580156108d757600080fd5b505afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f91906120d4565b6101a08301526040805163ca4fa49560e01b815281516001600160a01b0386169263ca4fa4959260048082019391829003018186803b15801561095157600080fd5b505afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906120ec565b6101808401526101608301526109a085848361173f565b60e085015260a084015260c08301525b6000836001600160a01b031663807354ce6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109eb57600080fd5b505afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a23919061203d565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918316906370a082319060240160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906120d4565b1115610b42576040516348b4573960e11b81526001600160a01b038681166004830152821690639168ae729060240160e06040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b21919061207a565b6104408a0152610420890152506104008701526103e08601526103c0850152505b806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906120d4565b836103a0018181525050806001600160a01b0316638e8ed3416040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf657600080fd5b505afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906120d4565b83610320018181525050806001600160a01b031663018e15c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7157600080fd5b505afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca991906120d4565b83610340018181525050806001600160a01b0316632583a7876040518163ffffffff1660e01b815260040160206040518083038186803b158015610cec57600080fd5b505afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906120d4565b836102e0018181525050806001600160a01b031663ce44ec706040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f91906120d4565b836103000181815250506000816001600160a01b0316636e94857d6040518163ffffffff1660e01b8152600401604080518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b91906120ec565b5090506000826001600160a01b031663f23ae9966040518163ffffffff1660e01b8152600401604080518083038186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9091906120ec565b509050826001600160a01b031663c89a8c546040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906120d4565b610f0e9083612656565b85610360018181525050826001600160a01b0316630d5243566040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8991906120d4565b610f939082612656565b6103808601526001600160a01b0386811690881614156111095760008860030180548060200260200160405190810160405280929190818152602001828054801561100757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fe9575b5050505050905060005b815181101561110257876001600160a01b031682828151811061104457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611060576110f0565b600061109e8984848151811061108657634e487b7160e01b600052603260045260246000fd5b60200260200101518d6117119092919063ffffffff16565b600d81015490915060ff610100909104161515600114156110ee5760006110d08c8b846110c961175e565b6001611778565b60408c01805191945084935091506110e990839061246d565b905250505b505b806110fa816126ac565b915050611011565b5050611551565b600061111689888a611711565b600d810154909150610100900460ff16156111a457600d81015460ff1615156101c08701526005810154610260870152600681015461028087015260028101546102a087015260038101546102c087015261117c89888361117561175e565b600061179b565b610240880152506111918988836110c961175e565b6102208901526101e08801526102008701525b8860120160009054906101000a90046001600160a01b03166001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190612060565b1561134457601289015460408051639015dcc960e01b815290516000926001600160a01b031691639015dcc9916004808301926020929190829003018186803b15801561127857600080fd5b505afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b0919061203d565b6040516319beeebf60e31b81526001600160a01b038b811660048301529192509082169063cdf775f89060240160206040518083038186803b1580156112f557600080fd5b505afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d91906120d4565b876104800181815161133f919061246d565b905250505b866001600160a01b031663c52aa2cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612060565b1561154f576000876001600160a01b0316639015dcc96040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d919061203d565b6040516304d608d360e11b81526001600160a01b038b81166004830152919250908216906309ac11a69060240160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906120d4565b87610460018181516114bc919061246d565b9052506040516319beeebf60e31b81526001600160a01b038a8116600483015282169063cdf775f89060240160206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153891906120d4565b876104800181815161154a919061246d565b905250505b505b61155c878787611862565b5050505050505050565b61158a60405180606001604052806000815260200160008152602001600081525090565b601282015460408051634039aa6760e11b815290516001600160a01b0390921691600091839163807354ce91600480820192602092909190829003018186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e919061203d565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164957600080fd5b505afa15801561165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168191906120d4565b836040018181525050816001600160a01b031663ca4fa4956040518163ffffffff1660e01b8152600401604080518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa91906120ec565b8452602084015261170b82846118b2565b50505050565b6001600160a01b03808216600090815260058501602090815260408083209386168352929052209392505050565b600080600061174f868686611908565b91989097509095509350505050565b6000611773670de0b6b3a764000060016125d3565b905090565b600080600061178a8888888888611b30565b919a90995090975095505050505050565b6000806117ab8787878787611df9565b91506117b561175e565b8414156117e1576117da85600601548387600501546117d4919061246d565b90611e1b565b9050611858565b60006117f78888886117f161175e565b88611df9565b905061185461181d8661180861175e565b6118129190612656565b600689015490611e42565b84836118408961182b61175e565b6118359190612656565b60058c015490611e42565b61184a919061246d565b6117d49190612656565b9150505b9550959350505050565b816001600160a01b0316836001600160a01b03167f1f9f51e6f23d89f9b0b206304d42efbdcf3b79b6d16913f16b8e787e322b0dec836040516118a591906122c8565b60405180910390a3505050565b604080518251815260208084015190820152828201518183015290516001600160a01b038416917ff7f2722b48695825371ad75b4f4a8ed8e4fcf9018b09f53226c1445f0e6a9cb9919081900360600190a25050565b600080600080856001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561194757600080fd5b505afa15801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f91906120d4565b9050611998816117d48760020154846118129190612656565b92508460060154600014156119af5784600e015492505b604080516060810182526010870154815260118701546020820152601287015460ff1615159181019190915260098601544314611a07576006860154815260028601546020820152600d86015460ff16151560408201525b6000866007015442611a199190612695565b9050600080821315611abf576000611a358a8a60080154611e50565b90506000611a52611a496301e13380611f40565b6117d486611f40565b9050611a76611a6e828760200151611e4290919063ffffffff16565b865190611e42565b611a94611a8c611a8587611f40565b8590611e42565b875190611e42565b611a9e9190612656565b60128b015490935060ff16611abc57611ab9600019846125d3565b92505b50505b600c880154611ace908261246d565b9650876006015460001415611aee57611ae7868861246d565b9450611b23565b600d88015460ff16151560011415611b0a57611ae7868861246d565b86611b16876000612656565b611b20919061246d565b94505b5050505093509350939050565b6000806000611b696040518060a00160405280600015158152602001600081526020016000815260200160008152602001600081525090565b600d87015460ff16151581526002870154602082015260068701546060820152600c8701546080820152611b9b61175e565b8614611bca576060810151611bb09087611e42565b60608201526080810151611bc49087611e42565b60808201525b600060018615151415611c4f57886001600160a01b0316639d1b464a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4891906120d4565b9050611cea565b886001600160a01b031663dc028c0883606001516000611c6f9190612656565b845160405160e084901b6001600160e01b031916815260048101929092521515602482015260440160206040518083038186803b158015611caf57600080fd5b505afa158015611cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce791906120d4565b90505b611d0c816117d4846020015184611d019190612656565b606086015190611e42565b93506000886007015442611d209190612695565b90506000811315611da8576000611d3b8b8b60080154611e50565b90506000611d58611d4f6301e13380611f40565b6117d485611f40565b9050611d7f611d74828760200151611e4290919063ffffffff16565b606087015190611e42565b611d99611d8e611a8586611f40565b606088015190611e42565b611da39190612656565b975050505b6080830151611db7908761246d565b835190965015611dd257611dcb858761246d565b9350611deb565b85611dde866000612656565b611de89190612656565b93505b505050955095509592505050565b600080600080611e0c8989898989611b30565b9b9a5050505050505050505050565b60008160011415611e2d575081611e3c565b611e3983836012611f54565b90505b92915050565b6000611e3983836012611f7c565b6000826001600160a01b0316634dde1fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8b57600080fd5b505afa158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec3919061203d565b6001600160a01b031663796ba96c836040518263ffffffff1660e01b8152600401611ef091815260200190565b60206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906120d4565b6000611e3c670de0b6b3a7640000836125d3565b600082611f6083611f91565b611f6a90866125d3565b611f7491906124ae565b949350505050565b6000611f8782611f91565b611f6a84866125d3565b6000611e3c60ff8316600a61252b565b80518015158114611fb157600080fd5b919050565b600082601f830112611fc6578081fd5b813567ffffffffffffffff80821115611fe157611fe16126dd565b604051601f8301601f19908116603f01168101908282118183101715612009576120096126dd565b81604052838152866020858801011115612021578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561204e578081fd5b8151612059816126f3565b9392505050565b600060208284031215612071578081fd5b611e3982611fa1565b600080600080600080600060e0888a031215612094578283fd5b61209d88611fa1565b602089015160408a015160608b015160808c015160a08d015160c0909d0151949e939d50919b909a50909850965090945092505050565b6000602082840312156120e5578081fd5b5051919050565b600080604083850312156120fe578182fd5b505080516020909101519092909150565b600060208284031215612120578081fd5b6040516020810181811067ffffffffffffffff82111715612143576121436126dd565b6040528251612151816126f3565b81529392505050565b60006020828403121561216b578081fd5b5035919050565b60008060408385031215612184578182fd5b823591506020830135612196816126f3565b809150509250929050565b6000806000606084860312156121b5578283fd5b8335925060208401356121c7816126f3565b915060408401356121d7816126f3565b809150509250925092565b600080604083850312156121f4578182fd5b82359150602083013567ffffffffffffffff811115612211578182fd5b61221d85828601611fb6565b9150509250929050565b60008060408385031215612239578182fd5b82359150602083013567ffffffffffffffff80821115612257578283fd5b908401906040828703121561226a578283fd5b604051604081018181108382111715612285576122856126dd565b604052823560018110612296578485fd5b81526020830135828111156122a9578485fd5b6122b588828601611fb6565b6020830152508093505050509250929050565b60006104a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151612306608084018215159052565b5060a0838101519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c0808401511515908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048092830151929091019190915290565b600080821280156001600160ff1b038490038513161561248f5761248f6126c7565b600160ff1b83900384128116156124a8576124a86126c7565b50500190565b6000826124c957634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156124e3576124e36126c7565b500590565b600181815b80851115612523578160001904821115612509576125096126c7565b8085161561251657918102915b93841c93908002906124ed565b509250929050565b6000611e39838360008261254157506001611e3c565b8161254e57506000611e3c565b8160018114612564576002811461256e5761258a565b6001915050611e3c565b60ff84111561257f5761257f6126c7565b50506001821b611e3c565b5060208310610133831016604e8410600b84101617156125ad575081810a611e3c565b6125b783836124e8565b80600019048211156125cb576125cb6126c7565b029392505050565b60006001600160ff1b03818413828413808216868404861116156125f9576125f96126c7565b600160ff1b84871282811687830589121615612617576126176126c7565b858712925087820587128484161615612632576126326126c7565b87850587128184161615612648576126486126c7565b505050929093029392505050565b60008083128015600160ff1b850184121615612674576126746126c7565b6001600160ff1b038401831381161561268f5761268f6126c7565b50500390565b6000828210156126a7576126a76126c7565b500390565b60006000198214156126c0576126c06126c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461270857600080fd5b5056fea2646970667358221220975635ed80429f2adaef1e758022d8c804f41e58cf03f55fb0cb8fb0969adbf364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}