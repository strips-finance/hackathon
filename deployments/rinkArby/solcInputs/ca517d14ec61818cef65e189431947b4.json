{
  "language": "Solidity",
  "sources": {
    "contracts/external/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "contracts/oracle/UniswapLpOracle.sol": {
      "content": "pragma solidity ^0.8.0;\nimport { IUniswapLpOracle } from \"../interface/IUniswapLpOracle.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IUniswapV2Router02 } from \"../external/interfaces/IUniswapV2Router02.sol\";\nimport { IUniswapV2Factory } from \"../external/interfaces/IUniswapV2Factory.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\n\ncontract UniswapLpOracle is IUniswapLpOracle {\n    \n    using SignedBaseMath for int256;\n    struct CalcParams{\n        int256 strpReserve;\n        int256 usdcReserve;\n\n        int256 totalSupply;\n\n        int256 usdcForLp;\n        int256 strpForLp;\n        int256 usdcForStrp;\n    }\n\n    address public owner;\n\n    bool public isActive;\n    address public strp;\n    address public sushiRouter;\n    address public pair;\n    \n    uint public lastTimeStamp;\n\n    uint public interval;\n    int256 public periodsPassed;\n    int256 public periods;\n    int256 public avgPairPrice;\n    int256 public accumulated;\n\n    bool public instant;\n\n    int256[24] prices;\n    uint head;\n    uint tail;\n\n    modifier activeOnly() {\n        require(isActive, \"NOT_ACTIVE\");\n         _;\n    }\n\n    modifier onlyOwner(){\n        require(msg.sender == owner, \"NOT_AN_OWNER\");\n        _;\n    }\n\n    constructor(address _router,\n                address _strp,\n                address _pair,\n                bool _instant){\n\n        sushiRouter = _router;\n        \n        strp = _strp;\n        pair = _pair;\n\n        avgPairPrice = 0;\n        lastTimeStamp = 0;\n\n        instant = _instant;\n        if (instant){\n            periods = 1;\n            interval = 0; //1 hour\n        }else{\n            periods = 24;\n            interval = 3600; //1 hour\n        }\n\n        owner = msg.sender;\n    }\n\n    function changeOwner(address _newOwner) external onlyOwner\n    {\n        require(_newOwner != address(0), \"ZERO_OWNER\");\n        owner = _newOwner;\n    }\n\n    function getPrice() external view override activeOnly returns (int256){\n        return avgPairPrice;\n    }\n\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\n        if (block.timestamp > lastTimeStamp + interval){\n            upkeepNeeded = true;\n        }else{\n            upkeepNeeded = false;\n        }\n    }\n\n    function performUpkeep(bytes calldata _data) external virtual override {\n        require(block.timestamp > lastTimeStamp + interval, \"NO_NEED_UPDATE\");\n        lastTimeStamp = block.timestamp;\n\n        if (instant){\n            /*This mode is used for testnet only */\n            accumulateInstantOracle();\n\n            isActive = true;\n        }else{\n            accumulateOracle();\n\n            periodsPassed += 1;\n\n            /*Activate oralce once enough periods passed */\n            if (isActive == false && periodsPassed >= periods){\n                isActive = true;\n            }\n        }\n    }\n\n    /*Use this mode for testnet only */\n    function accumulateInstantOracle() internal {\n        avgPairPrice = instantLpPrice();\n    }\n\n\n    function accumulateOracle() internal {\n        int256 lpPrice = instantLpPrice();\n\n        if (isActive){\n            avgPairPrice = accumulated / periods;\n\n            accumulated -= prices[tail];\n            \n            tail += 1;\n            if (tail > 23) {\n                tail = 0;\n            }\n        }\n        \n        accumulated += lpPrice;\n        prices[head] = lpPrice;\n        head += 1;\n        if (head > 23){\n            head = 0;\n        }\n    }\n\n    function instantLpPrice() public view returns (int256)\n    {\n        CalcParams memory params;\n\n        (uint112 reserve0,\n            uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\n\n        if (strp == IUniswapV2Pair(pair).token0()){\n            params.strpReserve = int256(uint(reserve0));\n            params.usdcReserve = int256(uint(reserve1));\n        }else{\n            params.strpReserve = int256(uint(reserve1));\n            params.usdcReserve = int256(uint(reserve0));\n        }\n\n        /*How much liquidity we need to burn? */\n        params.totalSupply = int256(IUniswapV2Pair(pair).totalSupply());\n        params.usdcForLp = SignedBaseMath.oneDecimal().muld(params.usdcReserve).divd(params.totalSupply);\n        params.strpForLp = SignedBaseMath.oneDecimal().muld(params.strpReserve).divd(params.totalSupply);\n        params.usdcForStrp = int256(IUniswapV2Router02(sushiRouter).quote(uint(params.strpForLp), uint(params.strpReserve), uint(params.usdcReserve)));\n\n        return params.usdcForLp + params.usdcForStrp; \n    }\n\n    function strpPrice() external view override returns (int256){\n        CalcParams memory params;\n\n        (uint112 reserve0,\n            uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\n\n        if (strp == IUniswapV2Pair(pair).token0()){\n            params.strpReserve = int256(uint(reserve0));\n            params.usdcReserve = int256(uint(reserve1));\n        }else{\n            params.strpReserve = int256(uint(reserve1));\n            params.usdcReserve = int256(uint(reserve0));\n        }\n\n        int256 strpAmount = 1;\n\n        return int256(IUniswapV2Router02(sushiRouter).quote(uint(strpAmount.toDecimal()), uint(params.strpReserve), uint(params.usdcReserve)));\n    }\n}"
    },
    "contracts/interface/IUniswapLpOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\ninterface IUniswapLpOracle is KeeperCompatibleInterface {\n    function getPrice() external view returns (int256);\n    function strpPrice() external view returns (int256);\n}\n"
    },
    "contracts/external/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/external/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "contracts/lib/SignedBaseMath.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// We are using 0.8.0 with safemath inbuilt\n// Need to implement mul and div operations only\n// We have 18 for decimal part and  58 for integer part. 58+18 = 76 + 1 bit for sign\n// so the maximum is 10**58.10**18 (should be enough :) )\n\nlibrary SignedBaseMath {\n    uint8 constant DECIMALS = 18;\n    int256 constant BASE = 10**18;\n    int256 constant BASE_PERCENT = 10**16;\n\n    /*Use this to convert USDC 6 decimals to 18 decimals */\n    function to18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\n        require(tokenDecimals < DECIMALS);\n        return x * int256(10**(DECIMALS - tokenDecimals));\n    }\n\n    /*Use this to convert USDC 18 decimals back to original 6 decimal and send it */\n    function from18Decimal(int256 x, uint8 tokenDecimals) internal pure returns (int256) {\n        require(tokenDecimals < DECIMALS);\n        return x / int256(10**(DECIMALS - tokenDecimals));\n    }\n\n\n    function toDecimal(int256 x, uint8 decimals) internal pure returns (int256) {\n        return x * int256(10**decimals);\n    }\n\n    function toDecimal(int256 x) internal pure returns (int256) {\n        return x * BASE;\n    }\n\n    function oneDecimal() internal pure returns (int256) {\n        return 1 * BASE;\n    }\n\n    function tenPercent() internal pure returns (int256) {\n        return 10 * BASE_PERCENT;\n    }\n\n    function ninetyPercent() internal pure returns (int256) {\n        return 90 * BASE_PERCENT;\n    }\n\n    function onpointOne() internal pure returns (int256) {\n        return 110 * BASE_PERCENT;\n    }\n\n\n    function onePercent() internal pure returns (int256) {\n        return 1 * BASE_PERCENT;\n    }\n\n    function muld(int256 x, int256 y) internal pure returns (int256) {\n        return _muld(x, y, DECIMALS);\n    }\n\n    function divd(int256 x, int256 y) internal pure returns (int256) {\n        if (y == 1){\n            return x;\n        }\n        return _divd(x, y, DECIMALS);\n    }\n\n    function _muld(\n        int256 x,\n        int256 y,\n        uint8 decimals\n    ) internal pure returns (int256) {\n        return (x * y) / unit(decimals);\n    }\n\n    function _divd(\n        int256 x,\n        int256 y,\n        uint8 decimals\n    ) internal pure returns (int256) {\n        return (x * unit(decimals)) / y;\n    }\n\n    function unit(uint8 decimals) internal pure returns (int256) {\n        return int256(10**uint256(decimals));\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n\n  /**\n   * @notice checks if the contract requires work to be done.\n   * @param checkData data passed to the contract when checking for upkeep.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with,\n   * if upkeep is needed.\n   */\n  function checkUpkeep(\n    bytes calldata checkData\n  )\n    external\n    returns (\n      bool upkeepNeeded,\n      bytes memory performData\n    );\n\n  /**\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\n   * @param performData is the data which was passed back from the checkData\n   * simulation.\n   */\n  function performUpkeep(\n    bytes calldata performData\n  ) external;\n}\n"
    },
    "contracts/strips/pools/InsuranceFund.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStakeble } from \"../../interface/IStakeble.sol\";\nimport { IRewardable } from \"../../interface/IRewardable.sol\";\nimport { IRewarder } from \"../../interface/IRewarder.sol\";\n\nimport { IStrips } from \"../../interface/IStrips.sol\";\nimport { IInsuranceFund } from \"../../interface/IInsuranceFund.sol\";\nimport { IStripsLpToken } from \"../../interface/IStripsLpToken.sol\";\nimport { IUniswapLpOracle } from \"../../interface/IUniswapLpOracle.sol\";\nimport { StakingImpl } from \"../../impl/StakingImpl.sol\";\nimport { IUniswapV2Pair } from \"../../external/interfaces/IUniswapV2Pair.sol\";\nimport { SignedBaseMath } from \"../../lib/SignedBaseMath.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { SLPToken } from \"../../token/SLPToken.sol\";\nimport { SlpFactoryImpl } from \"../../impl/SlpFactoryImpl.sol\";\n\n\n// Keep only stacked liquidity\ncontract InsuranceFund is \n    IInsuranceFund,\n    IStakeble,\n    IRewardable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SignedBaseMath for int256;\n\n    uint public createdAt;\n    address public dao;\n    address public sushiRouter;\n\n    bool public isSuspended;\n\n    bytes32 public constant STRIPS_ROLE = keccak256(\"STRIPS_ROLE\");\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n\n\n    modifier notSuspended () {\n        require(isSuspended == false, \"SUSPENDED\");\n         _;\n    }\n\n    IRewarder public rewarder;\n\n    IStrips public stripsProxy;\n    IUniswapLpOracle public pairOracle;\n\n    IUniswapV2Pair public stakingToken;\n    IERC20 public tradingToken;\n\n    IStripsLpToken public slpToken;\n    IERC20 public strpToken;\n\n    function initialize (\n        IStrips _stripsProxy,\n        IUniswapV2Pair _stakingToken,\n        IERC20 _tradingToken,\n        IERC20 _strpToken,\n        IUniswapLpOracle _pairOracle,\n        address _sushiRouter,\n        address _dao\n    ) public initializer\n    {\n        require(Address.isContract(_sushiRouter), \"SUSHI_ROUTER_NOT_A_CONTRACT\");\n        require (_dao != address(0), \"ZERO_DAO\");\n        require (address(_stripsProxy) != address(0), \"NO_STRIPS_ERROR\");\n\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n        \n        stakingToken = _stakingToken;\n        tradingToken = _tradingToken;\n        strpToken = _strpToken;\n        pairOracle = _pairOracle;\n        stripsProxy = _stripsProxy;\n        sushiRouter = _sushiRouter;\n        createdAt = block.timestamp;\n\n        _setupRole(OWNER_ROLE, _msgSender());\n        _setupRole(STRIPS_ROLE, address(stripsProxy));\n\n        dao = _dao;\n    }\n\n    function isRewardable() external view override returns (bool)\n    {\n        return true;        \n    }\n\n\n    function suspendChange(bool _suspend) external onlyRole(OWNER_ROLE)\n    {\n        isSuspended = _suspend;\n    }\n\n    function changeDao(address _newDao) external onlyRole(OWNER_ROLE)\n    {\n        require(_newDao != address(0), \"ZERO_DAO\");\n        dao = _newDao;\n    }\n\n    function getStrips() external view override returns (address) {\n        return address(stripsProxy);\n    }\n\n    //It's up to Strips call ensureFunds before that\n    function withdraw(address _to, int256 _amount) external override nonReentrant onlyRole(STRIPS_ROLE) {\n\n        SafeERC20.safeTransfer(tradingToken, \n                                _to, \n                                uint(_amount));\n    }\n\n    function createRewarder(IRewarder.InitParams memory _params) external override onlyRole(OWNER_ROLE)\n    {\n        require(address(rewarder) == address(0), \"REWARDER_EXIST\");\n\n        rewarder = SlpFactoryImpl._rewarderFactory(_params);\n    }\n\n    function getRewarder() external view override returns (address)\n    {\n        return address(rewarder);\n    }\n\n\n    function createSLP(IStripsLpToken.TokenParams memory _params) external override onlyRole(OWNER_ROLE) {\n        require(address(slpToken) == address(0), \"LP_TOKEN_EXIST\");\n\n        slpToken = SlpFactoryImpl._slpFactory(_params,\n                                            \"SIP Token\",\n                                            \"SIP\");\n    }\n\n    function approveStrips(IERC20 _token, int256 _amount) external override onlyRole(STRIPS_ROLE) {\n        require(_amount > 0, \"BAD_AMOUNT\");\n\n        SafeERC20.safeApprove(_token, \n                                address(stripsProxy), \n                                uint(_amount));\n    }\n\n    function calcStakingLiqudity() private view returns (int256){\n        return int256(stakingToken.balanceOf(address(this)));\n    }\n\n    function calcTradingLiqudity() private view returns (int256){\n        return int256(tradingToken.balanceOf(address(this)));\n    }\n\n\n    function getLiquidity() public view override returns (int256) {\n        int256 stakingLiquidity = int256(stakingToken.balanceOf(address(this)));\n        int256 tradingLiquidity = int256(tradingToken.balanceOf(address(this)));\n        \n        //convert LP to USDC\n        stakingLiquidity = stakingLiquidity.muld(pairOracle.getPrice());\n\n        return stakingLiquidity + tradingLiquidity;\n    }\n    \n    function getPartedLiquidity() external view override returns (int256 usdcLiquidity, int256 lpLiquidity) {\n        usdcLiquidity = calcTradingLiqudity();\n        lpLiquidity = calcStakingLiqudity();\n    }\n\n\n    /*\n    ********************************************************************\n    * Stake/Unstake related functions\n    ********************************************************************\n    */\n    function liveTime() external view override returns (uint){\n        return block.timestamp - createdAt;\n    }\n\n    function isInsurance() external view override returns (bool){\n        return true;\n    }\n\n    function totalStaked() external view override returns (int256)\n    {\n        return calcStakingLiqudity();\n    }\n\n    function getSlpToken() external view override returns (address) {\n        return address(slpToken);\n    }\n\n    function getStakingToken() external view override returns (address)\n    {\n        return address(stakingToken);\n    }\n\n    function getTradingToken() external view override returns (address)\n    {\n        return address(tradingToken);\n    }\n\n    function ensureFunds(int256 amount) external override nonReentrant onlyRole(STRIPS_ROLE) {\n        int256 diff = calcTradingLiqudity() - amount;\n        if (diff >= 0){\n            return;\n        }\n        \n        //diff *= -1;\n        StakingImpl._burnPair(slpToken,\n                                amount);\n    }\n\n    function stake(int256 amount) external override nonReentrant notSuspended {\n        StakingImpl._stake(slpToken,\n                            msg.sender,\n                            amount);\n    }\n\n    function unstake(int256 amount) external override nonReentrant notSuspended {\n        StakingImpl._unstake(slpToken,\n                            msg.sender,\n                            amount);\n    }\n\n    function externalLiquidityChanged() external override nonReentrant onlyRole(STRIPS_ROLE){\n\n    }\n\n    function changeTradingPnl(int256 amount) external override nonReentrant onlyRole(STRIPS_ROLE){\n        slpToken.changeTradingPnl(amount);\n    }\n    \n    function changeStakingPnl(int256 amount) external override nonReentrant onlyRole(STRIPS_ROLE){\n        slpToken.changeStakingPnl(amount);\n    }\n\n    /* UTILS */\n    function changeSushiRouter(address _router) external override onlyRole(OWNER_ROLE)\n    {\n        require(Address.isContract(_router), \"SUSHI_ROUTER_NOT_A_CONTRACT\");\n\n        sushiRouter = _router;\n\n    }\n\n    function getSushiRouter() external view override returns (address)\n    {\n        return sushiRouter;\n    }\n\n    function getStrp() external view override returns (address)\n    {\n        return address(strpToken);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interface/IStakeble.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\nimport { IStakebleEvents } from \"../lib/events/Stakeble.sol\";\n\ninterface IStakeble is IStakebleEvents {\n    event LiquidityChanged(\n        address indexed asset,\n        address indexed changer,\n        string indexed action,\n        \n        int256 totalLiquidity,\n        int256 currentStakedPnl,\n        int256 stakerInitialStakedPnl,\n        int256 stakerTotalCollateral\n    );\n\n    event TokenAdded(\n        address indexed asset,\n        address indexed token\n    );\n\n    event LogStakeChanged(\n        address indexed asset,\n        address indexed changer,\n        bool isStake,\n        \n        int256 burnedSlp,\n        int256 unstakeLp,\n        int256 unstakeUsdc,\n\n        int256 lp_fee,\n        int256 usdc_fee\n    );\n    function createSLP(IStripsLpToken.TokenParams memory _params) external;\n    function totalStaked() external view returns (int256);\n    function isInsurance() external view returns (bool);\n    function liveTime() external view returns (uint);\n\n    function getSlpToken() external view returns (address);\n    function getStakingToken() external view returns (address);\n    function getTradingToken() external view returns (address);\n    function getStrips() external view returns (address);\n\n    function ensureFunds(int256 amount) external;\n    function stake(int256 amount) external;\n    function unstake(int256 amount) external;\n\n    function approveStrips(IERC20 _token, int256 _amount) external;\n    function externalLiquidityChanged() external;\n\n    function changeTradingPnl(int256 amount) external;\n    function changeStakingPnl(int256 amount) external;\n\n    function isRewardable() external view returns (bool);\n\n    function changeSushiRouter(address _router) external;\n    function getSushiRouter() external view returns (address);\n\n    function getStrp() external view returns (address);\n}\n"
    },
    "contracts/interface/IRewardable.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\nimport { IStakebleEvents } from \"../lib/events/Stakeble.sol\";\nimport { IRewarder } from \"./IRewarder.sol\";\n\ninterface IRewardable {\n    function createRewarder(IRewarder.InitParams memory _params) external;\n    function getRewarder() external view returns (address);\n}\n"
    },
    "contracts/interface/IRewarder.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\nimport { IStakebleEvents } from \"../lib/events/Stakeble.sol\";\n\ninterface IRewarder {\n    event TradingRewardClaimed(\n        address indexed user, \n        int256 amount\n    );\n\n    event StakingRewardClaimed(\n        address indexed user, \n        int256 amount\n    );\n\n    struct InitParams {\n        uint256 periodLength;\n        uint256 washTime;\n\n        IERC20 slpToken;\n        IERC20 strpToken;\n\n        address stripsProxy;\n        address dao;\n        address admin;\n\n        int256 rewardTotalPerSecTrader;\n        int256 rewardTotalPerSecStaker;\n    }\n\n    function claimStakingReward(address _staker) external;\n    function claimTradingReward(address _trader) external;\n\n    function totalStakerReward(address _staker) external view returns (int256 reward);\n    function totalTradeReward(address _trader) external view returns (int256 reward);\n\n    function rewardStaker(address _staker) external;\n    function rewardTrader(address _trader, int256 _notional) external;\n\n    function currentTradingReward() external view returns(int256);\n    function currentStakingReward() external view returns (int256);\n}\n"
    },
    "contracts/interface/IStrips.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IMarket } from \"./IMarket.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IInsuranceFund } from \"./IInsuranceFund.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\n\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { IStripsEvents } from \"../lib/events/Strips.sol\";\n\ninterface IStrips is IStripsEvents \n{\n\n    /*\n        State actions\n     */\n    enum StateActionType {\n        ClaimRewards\n    }\n\n    /*request */\n    struct ClaimRewardsParams {\n        address account;\n    }\n\n    struct StateActionArgs {\n        StateActionType actionType;\n        bytes data;\n    }\n\n\n    /*\n        View actions\n     */\n    enum ViewActionType {\n        GetOracles,\n        GetMarkets,\n        CalcFeeAndSlippage,\n        GetPosition,\n        CalcClose,\n        CalcRewards\n    }\n\n    /*request */\n    struct CalcRewardsParams {\n        address account;\n    }\n    /*response */\n    struct CalcRewardsData {\n        address account;\n        int256 rewardsTotal;\n    }\n\n\n    /*request */\n    struct CalcCloseParams {\n        address market;\n        address account;\n        int256 closeRatio;\n    }\n    /*response */\n    struct CalcCloseData {\n        address market;\n        int256 minimumMargin;\n        int256 pnl;\n        int256 marginLeft;\n        int256 fee;\n        int256 slippage;\n        int256 whatIfPrice;\n    }\n\n    /*\n        request \n        response: PositionParams or revert\n    */\n    struct GetPositionParams {\n        address market;\n        address account;\n    }\n\n\n    /*request */\n    struct FeeAndSlippageParams {\n        address market;\n        int256 notional;\n        int256 collateral;\n        bool isLong;\n    }\n\n    /* response */\n    struct FeeAndSlippageData{\n        address market;\n        int256 marketRate;\n        int256 oracleRate;\n        \n        int256 fee;\n        int256 whatIfPrice;\n        int256 slippage;\n\n        int256 minimumMargin;\n        int256 estimatedMargin;\n    }\n\n\n    struct ViewActionArgs {\n        ViewActionType actionType;\n        bytes data;\n    }\n\n\n    /*\n        Admin actions\n     */\n\n    enum AdminActionType {\n        AddMarket,   \n        AddOracle,  \n        RemoveOracle,  \n        ChangeOracle,\n        SetInsurance,\n        ChangeRisk\n    }\n\n    struct AddMarketParams{\n        address market;\n    }\n\n    struct AddOracleParams{\n        address oracle;\n        int256 keeperReward;\n    }\n\n    struct RemoveOracleParams{\n        address oracle;\n    }\n\n    struct ChangeOracleParams{\n        address oracle;\n        int256 newReward;\n    }\n\n    struct SetInsuranceParams{\n        address insurance;\n    }\n\n    struct ChangeRiskParams{\n        StorageStripsLib.RiskParams riskParams;\n    }\n\n\n    struct AdminActionArgs {\n        AdminActionType actionType;\n        bytes data;\n    }\n\n\n\n    /*\n        Events\n     */\n    event LogNewMarket(\n        address indexed market\n    );\n\n    event LogPositionUpdate(\n        address indexed account,\n        IMarket indexed market,\n        PositionParams params\n    );\n\n    struct PositionParams {\n        // true - for long, false - for short\n        bool isLong;\n        // is this position closed or not\n        bool isActive;\n        // is this position liquidated or not\n        bool isLiquidated;\n\n        //position size in USDC\n        int256 notional;\n        //collateral size in USDC\n        int256 collateral;\n        //initial price for position\n        int256 initialPrice;\n    }\n\n    struct PositionData {\n        //address of the market\n        IMarket market;\n        // total pnl - real-time profit or loss for this position\n        int256 pnl;\n\n        // this pnl is calculated based on whatIfPrice\n        int256 pnlWhatIf;\n        \n        // current margin ratio of the position\n        int256 marginRatio;\n        PositionParams positionParams;\n    }\n\n    struct AssetData {\n        bool isInsurance;\n        \n        address asset;\n         // Address of SLP/SIP token\n        address slpToken;\n\n        int256 marketPrice;\n        int256 oraclePrice;\n\n        int256 maxNotional;\n        int256 tvl;\n        int256 apy;\n\n        int256 minimumMargin;\n    }\n\n    struct StakingData {\n         //Market or Insurance address\n        address asset; \n\n        // collateral = slp amount\n        uint256 totalStaked;\n    }\n\n    /**\n     * @notice Struct that keep real-time trading data\n     */\n    struct TradingInfo {\n        //Includes also info about the current market prices, to show on dashboard\n        AssetData[] assetData;\n        PositionData[] positionData;\n    }\n\n    /**\n     * @notice Struct that keep real-time staking data\n     */\n    struct StakingInfo {\n        //Includes also info about the current market prices, to show on dashboard\n        AssetData[] assetData;\n        StakingData[] stakingData;\n    }\n\n    /**\n     * @notice Struct that keep staking and trading data\n     */\n    struct AllInfo {\n        TradingInfo tradingInfo;\n        StakingInfo stakingInfo;\n    }\n\n    function open(\n        IMarket _market,\n        bool isLong,\n        int256 collateral,\n        int256 leverage,\n        int256 slippage\n    ) external;\n\n    function close(\n        IMarket _market,\n        int256 _closeRatio,\n        int256 _slippage\n    ) external;\n\n    function changeCollateral(\n        IMarket _market,\n        int256 collateral,\n        bool isAdd\n    ) external;\n\n    function ping() external;\n    function getPositionsCount() external view returns (uint);\n    function getPositionsForLiquidation(uint _start, uint _length) external view returns (StorageStripsLib.PositionMeta[] memory);\n    function liquidatePosition(IMarket _market, address account) external;\n    function payKeeperReward(address keeper) external;\n\n    /*\n        Strips getters functions for Trader\n     */\n    function assetPnl(address _asset) external view returns (int256);\n    function getLpOracle() external view returns (address);\n\n}\n"
    },
    "contracts/interface/IInsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IInsuranceFund {\n    function withdraw(address _to, int256 _amount) external;\n\n    function getLiquidity() external view returns (int256);\n    function getPartedLiquidity() external view returns (int256 usdcLiquidity, int256 lpLiquidity);\n}\n"
    },
    "contracts/interface/IStripsLpToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\n\ninterface IStripsLpToken is IERC20 {\n    struct TokenParams {\n        address stripsProxy;\n        address pairOracle;\n\n        address tradingToken;\n        address stakingToken; \n\n        int256 penaltyPeriod;\n        int256 penaltyFee;\n    }\n\n    struct ProfitParams{\n        int256 unstakeAmountLP;\n        int256 unstakeAmountERC20;\n\n        int256 stakingProfit;   \n        int256 stakingFee;\n\n        int256 penaltyLeft;\n        uint256 totalStaked;\n\n        int256 lpPrice;\n\n        int256 lpProfit;\n        int256 usdcLoss;\n    }\n\n    function getParams() external view returns (TokenParams memory);\n    function getBurnableToken() external view returns (address);\n    function getPairPrice() external view returns (int256);\n    function checkOwnership() external view returns (address);\n\n    function totalPnl() external view returns (int256 usdcTotal, int256 lpTotal);\n\n    function accumulatePnl() external;\n    function saveProfit(address staker) external;\n    function mint(address staker, uint256 amount) external;\n    function burn(address staker, uint256 amount) external;\n\n    function calcFeeLeft(address staker) external view returns (int256 feeShare, int256 periodLeft);\n    function calcProfit(address staker, uint256 amount) external view returns (ProfitParams memory);\n\n    function claimProfit(address staker, uint256 amount) external returns (int256 stakingProfit, int256 tradingProfit);\n    function setPenaltyFee(int256 _fee) external;\n    function setParams(TokenParams memory _params) external;\n    function canUnstake(address staker, uint256 amount) external view;\n\n    function changeTradingPnl(int256 amount) external;\n    function changeStakingPnl(int256 amount) external;\n\n}\n"
    },
    "contracts/impl/StakingImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { SLPToken } from \"../token/SLPToken.sol\";\nimport { StakebleEvents, IStakebleEvents } from \"../lib/events/Stakeble.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\nimport { IRewardable } from \"../interface/IRewardable.sol\";\n\nimport { IUniswapV2Router02 } from \"../external/interfaces/IUniswapV2Router02.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IUniswapV2Factory } from \"../external/interfaces/IUniswapV2Factory.sol\";\n\n\nlibrary StakingImpl {\n    using SignedBaseMath for int256;\n\n    struct BurnParams{\n        IUniswapV2Router02 router;\n        IUniswapV2Factory factory;\n        IUniswapV2Pair pair;\n\n        address strp;\n        address usdc;\n\n        int256 strpReserve;\n        int256 usdcReserve;\n\n        int256 liquidity;\n\n        int256 amountIn;  //strp to swap\n        int256 amountOutMin; //minimum usdc to receive on swap\n    }\n\n    modifier onlyStaker (address staker) {\n        require(msg.sender == staker, \"STAKER_ONLY\");\n         _;\n    }\n\n    function _stake(\n        IStripsLpToken slpToken,\n        address staker,\n        int256 amount\n    ) external onlyStaker(staker) {\n        require(amount > 0, \"WRONG_AMOUNT\");\n        slpToken.accumulatePnl();\n\n        //The staker already has stake, need to store current Profit\n        if (slpToken.balanceOf(staker) > 0){\n            slpToken.saveProfit(staker);\n        }\n\n        SafeERC20.safeTransferFrom(IERC20(slpToken.getParams().stakingToken), \n                                    staker, \n                                    address(this), \n                                    uint(amount));\n\n        slpToken.mint(staker, uint(amount));\n\n        if (IStakeble(address(this)).isRewardable()){\n            address rewarder = IRewardable(address(this)).getRewarder();\n            IRewarder(rewarder).rewardStaker(staker);\n        }\n    }\n\n  \n    function _unstake(\n        IStripsLpToken slpToken,\n        address staker,\n        int256 amount\n    ) external onlyStaker(staker) {\n        slpToken.canUnstake(staker, uint(amount));\n\n        slpToken.accumulatePnl();\n\n        (int256 stakingProfit,\n            int256 tradingProfit) = slpToken.claimProfit(staker, uint(amount));\n\n        require(stakingProfit > 0 && tradingProfit >= 0, \"NO_PROFIT\");\n\n        if (stakingProfit > 0){\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().stakingToken), \n                                    staker, \n                                    uint(stakingProfit));\n        }\n\n        if (tradingProfit > 0){\n            int256 diff = int256(IERC20(slpToken.getParams().tradingToken).balanceOf(address(this))) - tradingProfit;\n            if (diff < 0){\n                /*Burn LP to get USDC*/\n                diff *= -1;\n\n                _burnPair(slpToken, diff);\n            }\n            SafeERC20.safeTransfer(IERC20(slpToken.getParams().tradingToken), \n                                    staker, \n                                    uint(tradingProfit));\n\n        }\n\n        StakebleEvents.logUnstakeData(SLPToken(address(slpToken)).owner(), \n                                                staker, \n                                                amount,\n                                                stakingProfit,\n                                                tradingProfit);\n\n        if (IStakeble(address(this)).isRewardable()){\n            address rewarder = IRewardable(address(this)).getRewarder();\n            IRewarder(rewarder).rewardStaker(staker);\n        }\n    }\n\n    function _burnPair(\n        IStripsLpToken slpToken,\n        int256 requiredAmount\n    ) public {\n        //ONLY if we are in Owner context (address(this) == owner), otherwise revert\n        slpToken.checkOwnership();\n\n        require(requiredAmount > 0, \"WRONG_AMOUNT\");\n    /*\n            Steps for burning LP:\n            1. Find reserves\n            2. Calc liquidity amount to burn\n            3. Burn\n            4. Swap STRP to USDC with slippage\n            5. Reflect lp and usdc growth\n         */\n\n        BurnParams memory params;\n\n        params.strp = IStakeble(address(this)).getStrp();\n        params.usdc = slpToken.getParams().tradingToken;\n        \n        params.router = IUniswapV2Router02(IStakeble(address(this)).getSushiRouter());\n        params.factory = IUniswapV2Factory(params.router.factory());\n        params.pair = IUniswapV2Pair(params.factory.getPair(\n            params.strp,\n            params.usdc));\n        require(address(params.pair) != address(0), \"ZERO_PAIR_CONTRACT\");\n\n        (uint112 reserve0,\n            uint112 reserve1,) = params.pair.getReserves();\n\n        if (address(params.strp) == params.pair.token0()){\n            params.strpReserve = int256(uint(reserve0));\n            params.usdcReserve = int256(uint(reserve1));\n        }else{\n            params.strpReserve = int256(uint(reserve1));\n            params.usdcReserve = int256(uint(reserve0));\n        }\n\n        /*How much liquidity we need to burn? */\n        int256 supply = int256(params.pair.totalSupply());\n\n        /*Just 10% maximum for don't care about the fee */\n        params.liquidity = (requiredAmount.muld(supply).divd(params.usdcReserve)).muld(SignedBaseMath.onpointOne());\n\n\n        /*\n            Need to calc balance before burn - as we need to change PNL to differ\n         */\n        int256 lp_balance = int256(params.pair.balanceOf(address(this)));\n        int256 usdc_balance = int256(IERC20(params.usdc).balanceOf(address(this)));\n\n        /*BURN:\n            address tokenA,\n            address tokenB,\n            uint liquidity,\n            uint amountAMin,\n            uint amountBMin,\n            address to,\n            uint deadline\n         */\n        params.pair.approve(address(params.router), uint(params.liquidity));\n        params.router.removeLiquidity(\n            address(params.usdc), \n            address(params.strp), \n            uint(params.liquidity), \n            uint(requiredAmount),\n            0, \n            address(this), \n            block.timestamp + 200);\n\n        /*\n            Change reserves\n         */\n        (reserve0,\n            reserve1,) = params.pair.getReserves();\n\n        if (address(params.strp) == params.pair.token0()){\n            params.strpReserve = int256(uint(reserve0));\n            params.usdcReserve = int256(uint(reserve1));\n        }else{\n            params.strpReserve = int256(uint(reserve1));\n            params.usdcReserve = int256(uint(reserve0));\n        }\n\n\n        /*NOW SWAP */\n        params.amountIn = int256(IERC20(params.strp).balanceOf(address(this)));\n        require(params.amountIn > 0, \"BURN_FAILED_ZERO_STRP\");\n\n        IERC20(params.strp).approve(address(params.router), uint(params.amountIn));\n        params.amountOutMin = int256(params.router.quote(uint(params.amountIn), uint(params.strpReserve), uint(params.usdcReserve)));\n\n        /*10% slippage */\n        params.amountOutMin = params.amountOutMin.muld(SignedBaseMath.ninetyPercent());\n        address[] memory path = new address[](2);\n        path[0] = params.strp;\n        path[1] = params.usdc;\n\n        params.router.swapExactTokensForTokens(\n            uint(params.amountIn),\n            uint(params.amountOutMin),\n            path,\n            address(this),\n            block.timestamp + 200\n        );\n        \n        /*Calc change in balance */\n        int256 lp_diff = int256(params.pair.balanceOf(address(this))) - lp_balance;\n        require (lp_diff < 0, \"LP_BURN_ERROR\");\n\n        int256 usdc_diff = int256(IERC20(params.usdc).balanceOf(address(this))) - usdc_balance;\n        require (usdc_diff > 0, \"USDC_BURN_ERROR\");\n\n        /*Reflect change*/\n        slpToken.changeStakingPnl(lp_diff);\n        slpToken.changeTradingPnl(usdc_diff);\n    }\n}\n\n\n\n/*\n********** The staking PNL distribution explained ****************************\n\n|.........(pnl0)(ts0)|staker1(+sa1).............(pnl1)(ts1)|staker2 (+sa2)...........(pnl2)(ts2)|staker3 (+sa3)........(pnl3)(ts3)|staker2 (-sa21)\n\n\npnl(i) - pnl of the market at moment(i)\nts(i) - SLP total Supply at moment (i)\n+-sa(i) - staked amount of staker (i) \n\nWhen staker2 unstake (-sa21) the formula to calculate the profit:\n\nprofit = (pnl2 - pnl1) * sa21/ts2 + (pnl3 - pnl2) * sa21/ts3 = sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3] \n\nMOMENT 0:\n1. totalCummulativePnl = 0\n\nWHEN STAKER1 STAKE (corner case):\n1. if ts0 == 0, ts0 =1\n2. totalCummulativePnl += pnl0 / ts0  \n3. staker1.initialStakedPnl = totalCummulativePnl\n4. prevPnl = pnl0\n\nWHEN STAKER2 STAKE:\n1. currentPnl = pnl1\n2. currentStakedPnl = (currentPnl - prevPnl) / ts1\n3. totalCummulativePnl += currentStakedPnl\n4. staker2.initialStakedPnl = totalCummulativePnl\n5. prevPnl = currentPnl(pnl1)\n\nWHEN STAKER3 STAKE:\n0. currentPnl = pnl2\n1. currentStakedPnl = (currentPnl - prevPnl) / ts2\n2. totalCummulativePnl += currentStakedPnl\n3. staker3.initialStakedPnl = totalCummulativePnl\n4. prevPnl = currentPnl(pnl2)\n\nWHEN STAKER2 UNSTAKE:\n1. currentPnl = pnl3\n2. currentStakedPnl = (currentPnl - prevPnl) / ts3\n3. totalCummulativePnl += currentStakedPnl\n4. cummulativeGrowth = totalCummulativePnl - staker2.initialStakedPnl\n5. profit = sa21 * cummulativeGrowth\n6. PAY profit - send real money  (this profit will be excluded from total on the next step when we will calc pnl again)\n7. prevPnl = currentPnl\n\n\nLet's unwind the formula\n\nWHEN STAKER2 UNSTAKE:\n\nprofit = sa21 * cummulativeGrowth = sa21 * [totalCummulativePnl - staker2.initialStakedPnl] =\n= sa21 * [pnl0/ts0 + (pnl1 - pnl0)/ts1 + (pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3 - pnl0/ts0 - (pnl1 - pnl0) / ts1] =\n= sa21 * [(pnl2 - pnl1)/ts2 + (pnl3 - pnl2)/ts3]\n\n\n******************************************************************************\n*/"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/token/SLPToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\n\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapLpOracle } from \"../interface/IUniswapLpOracle.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/**\n * @title SLP token using for adding \"stakebility\" to any asset\n * @dev created by the asset. All calls for changing PNL are ownable:\n * Have 2 tokens by default:\n *  staking - the token that is using for staking to Asset (UNIV2 pair by default for the current version)\n *  trading - the token that is using for accumulating profit. By default it's USDC\n * @author Strips Finance\n **/\ncontract SLPToken is \n    IStripsLpToken,\n    ERC20, \n    ReentrancyGuard,\n    Ownable\n{ \n    using SignedBaseMath for int256;\n\n    // Developed to be able to track 2-tokens asset\n    struct StakerData {\n        bool exist;\n\n        //save initial staking/trading cummulative PNL on staker's stake event.\n        int256 initialStakingPnl;\n        int256 initialTradingPnl;\n        \n        uint256 initialBlockNum;\n        uint256 initialTimeStamp;\n\n        //Save the current staking/trading unrealized profit when the staker stake 2+ time.\n        int256 unrealizedStakingProfit;\n        int256 unrealizedTradingProfit;\n    }\n\n    int256 public prevStakingPnl;\n    int256 public prevTradingPnl;\n\n    int256 public cummulativeStakingPnl;\n    int256 public cummulativeTradingPnl;\n    \n    //For tracking trading/staking \"growth\", should be changed by the OWNER only \n    int256 public cumTradingPNL;\n    int256 public cumStakingPNL;\n        \n    \n    //All data setup on init\n    TokenParams private params;\n    mapping (address => StakerData) public stakers;\n\n    /*To not have stack too deep error */\n    struct InternalCalcs {\n        int256 amount;\n        int256 assetPnl;\n        int256 currentTradingPnl;\n        int256 currentStakingPnl;\n\n        int256 instantCummulativeStakingPnl;\n        int256 isntantCummulativeTradingPnl;\n\n        int256 unstakeShare;\n        int256 feeShare;\n    }\n\n\n    constructor(TokenParams memory _params,\n                string memory _name,\n                string memory _symbol) \n                ERC20(_name, _symbol) \n    {\n        params = _params;\n    }\n\n    function changeTradingPnl(int256 amount) public override onlyOwner\n    {\n        cumTradingPNL += amount;\n    }\n    \n    function changeStakingPnl(int256 amount) public override onlyOwner\n    {\n        cumStakingPNL += amount;\n    }\n\n    function claimProfit(address staker, uint256 amount) public override onlyOwner returns (int256 stakingProfit, int256 tradingProfit)\n    {\n        ProfitParams memory profit = calcProfit(staker, amount);\n        if (profit.stakingFee > 0){\n            changeStakingPnl(profit.stakingFee);\n        }\n\n        if (profit.lpProfit > 0){\n            changeStakingPnl(profit.lpProfit);\n        }\n\n        if (profit.usdcLoss < 0){\n            changeTradingPnl(profit.usdcLoss);\n        }\n\n\n        burn(staker, amount);\n\n        stakingProfit = profit.unstakeAmountLP;\n        tradingProfit = profit.unstakeAmountERC20;\n    }\n\n\n    function getPairPrice() external view override returns (int256)\n    {\n        return IUniswapLpOracle(params.pairOracle).getPrice();\n    }\n\n    function getBurnableToken() external view override returns (address)\n    {\n        return params.stakingToken;\n    }\n\n    function getParams() external view override returns (TokenParams memory)\n    {   \n        return params;\n    }\n\n    function checkOwnership() external view override onlyOwner returns (address) {\n        //DO nothing, just revert if call is not from owner\n\n        return owner();\n    }\n\n    function totalPnl() external view override returns (int256 usdcTotal, int256 lpTotal)\n    {\n        int256 unrealizedPnl = IStrips(params.stripsProxy).assetPnl(owner());\n\n        usdcTotal = unrealizedPnl + cumTradingPNL;\n        lpTotal = cumStakingPNL;\n    }\n\n    function stakingPnl() public view returns (int256 current, int256 cummulative)\n    {\n        address _owner = owner();\n        int256 _totalSupply = int256(totalSupply());\n\n        current = cumStakingPNL;\n\n        if (_totalSupply == 0){\n            cummulative = cummulativeStakingPnl + current;\n        } else {\n            cummulative = cummulativeStakingPnl + (current - prevStakingPnl).divd(_totalSupply);\n        }\n\n    }\n\n    function tradingPnl() public view returns (int256 current, int256 cummulative)\n    {\n        address _owner = owner();\n        int256 _totalSupply = int256(totalSupply());\n\n        int256 assetPnl = IStrips(params.stripsProxy).assetPnl(_owner);\n\n        current = assetPnl + cumTradingPNL;\n        \n        if (_totalSupply == 0){\n            cummulative = cummulativeTradingPnl + current;\n        } else {\n            cummulative = cummulativeTradingPnl + (current - prevTradingPnl).divd(_totalSupply);\n        }\n    }\n\n\n    function accumulatePnl() public override onlyOwner {\n        int256 currentStakingPnl = 0;\n        int256 currentTradingPnl = 0;\n\n        (currentStakingPnl, cummulativeStakingPnl) = stakingPnl();\n        prevStakingPnl = currentStakingPnl;\n\n\n        (currentTradingPnl, cummulativeTradingPnl) = tradingPnl();\n        prevTradingPnl = currentTradingPnl;\n    }\n\n    /*All checks should be made inside caller */\n    function saveProfit(address staker) public override onlyOwner {\n        int256 tokenBalance = int256(balanceOf(staker));\n        \n        stakers[staker].unrealizedStakingProfit += (cummulativeStakingPnl - stakers[staker].initialStakingPnl).muld(tokenBalance);\n        stakers[staker].unrealizedTradingProfit += (cummulativeTradingPnl - stakers[staker].initialTradingPnl).muld(tokenBalance);\n    }\n\n\n    /*All checks should be made inside caller */\n    function mint(address staker, uint256 amount) public override onlyOwner \n    {        \n        stakers[staker] = StakerData({\n            exist: true,\n\n            initialStakingPnl:cummulativeStakingPnl,\n            initialTradingPnl:cummulativeTradingPnl,\n    \n            initialBlockNum:block.number,\n            initialTimeStamp:block.timestamp,\n\n            unrealizedStakingProfit: stakers[staker].unrealizedStakingProfit,\n            unrealizedTradingProfit: stakers[staker].unrealizedTradingProfit\n        });\n\n        _mint(staker, amount);\n    }\n\n    /*All checks should be made inside caller */\n    function burn(address staker, uint256 amount) public override onlyOwner \n    {\n        int256 burnShare = int256(amount).divd(int256(balanceOf(staker)));\n\n        stakers[staker].unrealizedStakingProfit -= (stakers[staker].unrealizedStakingProfit.muld(burnShare));\n        stakers[staker].unrealizedTradingProfit -= (stakers[staker].unrealizedTradingProfit.muld(burnShare));\n\n        _burn(staker, amount);\n\n        if (balanceOf(staker) == 0){\n            delete stakers[staker];\n        }\n    }\n\n    function canUnstake(address staker, uint256 amount) external view override\n    {\n        require(stakers[staker].exist, \"NO_SUCH_STAKER\");\n        require(block.number > stakers[staker].initialBlockNum, \"UNSTAKE_SAME_BLOCK\");\n        require(amount > 0 && balanceOf(staker) >= amount, \"WRONG_UNSTAKE_AMOUNT\");\n    }\n\n        \n\n\n    /**\n     * @dev Major view method that is using by frontend to view the current profit\n     *  Here is how we show data on frontend (check ProfitParams below):\n     *  1 - On major screen with the list of all stakes:\n     *       totalStaked = 100 Lp tokens  (shows in LP amount of LP tokens user staked)\n     *       stakingProfit (LP) = 10 LP ($10)  (shows the profit or loss that staker earned or lost in LP. Need to convert to USDC using profit.lpPrice)\n     *       unstakeAmountERC20 (USDC) = -$100  (shows the profit or loss that staker earned in USDC)\n     *       stakingFee = 1 LP (days left to 0 = penaltyLeft)\n     *\n     *  2 - on popup when staker select THE EXACT amount of SLP to unstake:\n     *       profit.unstakeAmountLP (LP) = 100 LP ($100)   The amount that the staker will receive in LP, including collateral\n     *       profit.unstakeAmountERC20 (USDC) = $10 | 0.   The amount that the staker will receive in USDC. Will be 0 if pnl is negative.\n     *       _ hide the penalty\n     *\n     * @param staker staker address\n     * @param amount amount of SLP tokens for unstake\n     * @return profit ProfitParams all data that is required to show the profit, check IStripsLpToken interface\n     *       struct ProfitParams\n     *           // LP unstaked amount \n     *           int256 unstakeAmountLP;\n     *\n     *           //USDC unstaked amount  \n     *           int256 unstakeAmountERC20;\n     *\n     *          //LP profit or loss not including collateral\n     *           int256 stakingProfit;   \n     *           \n     *           //Fee that is paid if unstake in less than 7 days (paid in LP tokens)\n     *           int256 stakingFee;\n     *\n     *          //Time in seconds left untill penalty will become 0\n     *           int256 penaltyLeft;\n     *\n     *           //Collateral in LP that staker staked\n     *           uint256 totalStaked;\n     *\n     *           //The current LP price (in USDC), using for conversion\n     *           int256 lpPrice;\n     **/\n    function calcProfit(address staker, uint256 amount) public view override returns (ProfitParams memory profit)\n    {\n        profit.totalStaked = balanceOf(staker);\n        require(amount > 0 && amount <= profit.totalStaked, \"WRONG_AMOUNT\");\n        \n        InternalCalcs memory internalCalcs;\n        internalCalcs.amount = int256(amount);\n\n        (internalCalcs.currentStakingPnl, \n            internalCalcs.instantCummulativeStakingPnl) = stakingPnl();\n        \n        (internalCalcs.currentTradingPnl, \n            internalCalcs.isntantCummulativeTradingPnl) = tradingPnl();\n\n        internalCalcs.unstakeShare = internalCalcs.amount.divd(int256(profit.totalStaked));\n        profit.stakingProfit = internalCalcs.amount.muld(internalCalcs.instantCummulativeStakingPnl - stakers[staker].initialStakingPnl) +  internalCalcs.unstakeShare.muld(stakers[staker].unrealizedStakingProfit);\n        profit.unstakeAmountERC20 = internalCalcs.amount.muld(internalCalcs.isntantCummulativeTradingPnl - stakers[staker].initialTradingPnl) + internalCalcs.unstakeShare.muld(stakers[staker].unrealizedTradingProfit);\n\n        (internalCalcs.feeShare, \n            profit.penaltyLeft) = calcFeeLeft(staker);\n\n        profit.stakingFee = internalCalcs.amount.muld(internalCalcs.feeShare);\n        profit.unstakeAmountLP = internalCalcs.amount + profit.stakingProfit - profit.stakingFee;\n\n        profit.lpPrice = IUniswapLpOracle(params.pairOracle).getPrice();\n        if (profit.unstakeAmountERC20 < 0){\n            profit.usdcLoss = profit.unstakeAmountERC20;\n            profit.lpProfit = -1 * profit.usdcLoss.divd(profit.lpPrice);\n            profit.unstakeAmountLP = profit.unstakeAmountLP  - profit.lpProfit;\n\n            profit.unstakeAmountERC20 = 0;\n            \n        }\n\n    }\n    \n\n    /*\n        2% fee during 7 days now.\n    */\n    function calcFeeLeft(\n        address staker\n    ) public view override returns (int256 feeShare, \n                                int256 periodLeft)\n    {\n        feeShare = 0;\n        periodLeft = 0;\n\n        int256 time_elapsed = int256(block.timestamp - stakers[staker].initialTimeStamp);\n\n        if (time_elapsed >= params.penaltyPeriod){\n            return (0, 0);\n        }\n        \n        feeShare = params.penaltyFee - params.penaltyFee.divd(params.penaltyPeriod.toDecimal()).muld(time_elapsed.toDecimal());\n        periodLeft = params.penaltyPeriod - time_elapsed;\n    }\n\n    function setPenaltyFee(int256 _fee) external override onlyOwner{\n        require(_fee >= 0, \"WRONG_FEE\");\n\n        params.penaltyFee = _fee;\n    }\n\n    function setParams(TokenParams memory _params) external override onlyOwner{\n        params = _params;\n    }\n\n\n    function transfer(address recipient, uint256 amount) public override(ERC20, IERC20) returns (bool) {\n        _transferStake(msg.sender, recipient, amount);\n\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override(ERC20, IERC20) returns (bool) {\n        _transferStake(sender, recipient, amount);\n\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function _transferStake(address sender, address recipient, uint256 amount) private {\n        require(stakers[sender].exist, \"STAKER_NOT_FOUND\");\n        require(stakers[recipient].exist == false, \"MERGE_NOT_POSSIBLE\");\n\n        int256 transferShare = int256(amount / balanceOf(sender));\n\n        stakers[recipient] = stakers[sender];\n\n        int256 stakingProfit = transferShare * stakers[sender].unrealizedStakingProfit;\n        int256 tradingProfit = transferShare * stakers[sender].unrealizedTradingProfit;\n\n        if (stakingProfit != 0){\n            stakers[sender].unrealizedStakingProfit -= stakingProfit;\n            stakers[recipient].unrealizedStakingProfit = stakingProfit;\n        }\n\n        if (tradingProfit != 0){\n            stakers[sender].unrealizedTradingProfit -= tradingProfit;\n            stakers[recipient].unrealizedTradingProfit = tradingProfit;\n        }\n\n        if (amount == balanceOf(sender)){\n            delete stakers[sender];\n        }\n    }\n\n}\n"
    },
    "contracts/impl/SlpFactoryImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\n\nimport { SLPToken } from \"../token/SLPToken.sol\";\nimport { Rewarder } from \"../reward/Rewarder.sol\";\n\nlibrary SlpFactoryImpl {\n    using SignedBaseMath for int256;\n    /*\n        Factory method, to reduce contract size\n        Creating code is huge\n     */\n    function _slpFactory(\n        IStripsLpToken.TokenParams memory _params,\n        string memory _name,\n        string memory _symbol \n    ) external returns (IStripsLpToken) \n    {\n        return new SLPToken(_params,\n                            _name,\n                            _symbol);\n    }\n\n    function _rewarderFactory(\n        IRewarder.InitParams memory _params\n    ) external returns (IRewarder)\n    {\n        return new Rewarder(_params);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/lib/events/Stakeble.sol": {
      "content": "interface IStakebleEvents {\n    event LogUnstake(\n        address indexed asset,\n        address indexed staker,\n\n        int256 slpAmount,\n        int256 stakingProfit,\n        int256 tradingProfit\n    );\n}\n\nlibrary StakebleEvents {\n    event LogUnstake(\n        address indexed asset,\n        address indexed staker,\n\n        int256 slpAmount,\n        int256 stakingProfit,\n        int256 tradingProfit\n    );\n\n    function logUnstakeData(address _asset,\n                            address _staker,\n                            int256 _slpAmount,\n                            int256 _stakingProfit,\n                            int256 _tradingProfit) internal {\n        \n        emit LogUnstake(_asset,\n                        _staker,\n\n                        _slpAmount,\n                        _stakingProfit,\n                        _tradingProfit);\n    }\n}"
    },
    "contracts/interface/IMarket.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\n\ninterface IMarket {\n    function getLongs() external view returns (int256);\n    function getShorts() external view returns (int256);\n\n    function priceChange(int256 notional, bool isLong) external view returns (int256);\n    function currentPrice() external view returns (int256);\n    function oraclePrice() external view returns (int256);\n    \n    function getAssetOracle() external view returns (address);\n    function getPairOracle() external view returns (address);\n    function currentOracleIndex() external view returns (uint256);\n\n    function getPrices() external view returns (int256 marketPrice, int256 oraclePrice);    \n    function getLiquidity() external view returns (int256);\n    function getPartedLiquidity() external view returns (int256 tradingLiquidity, int256 stakingLiquidity);\n\n    function openPosition(\n        bool isLong,\n        int256 notional\n    ) external returns (int256 openPrice);\n\n    function closePosition(\n        bool isLong,\n        int256 notional\n    ) external returns (int256);\n\n    function maxNotional() external view returns (int256);\n}\n\n\n"
    },
    "contracts/lib/StorageStrips.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { IAssetOracle } from \"../interface/IAssetOracle.sol\";\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\n\nimport { SignedBaseMath } from \"./SignedBaseMath.sol\";\nimport { StorageMarketLib } from \"./StorageMarket.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n\nlibrary StorageStripsLib {\n    using SignedBaseMath for int256;\n    \n    struct MarketData {\n        bool created;\n\n        //TODO: any data about the\n    }\n\n    struct Position {\n        IMarket market; //can be removed\n        address trader;\n\n        int256 initialPrice; //will become avg on _aggregation\n        int256 entryPrice;   // always the \"new market price\"\n        int256 prevAvgPrice; \n\n        int256 collateral; \n        int256 notional; \n\n        uint256 initialTimestamp;\n        uint256 cummulativeIndex; \n        uint256 initialBlockNumber;\n        uint256 posIndex;           // use this to find position by index\n        uint256 lastChangeBlock;\n\n        int256 unrealizedPnl;   //used to save funding_pnl for aggregation\n        \n        //TODO: refactor this\n        bool isLong;\n        bool isActive;\n        bool isLiquidated;  \n        \n        //used only for AMM\n        bool isAmm;\n        int256 savedTradingPnl;    // use this to deal with div to zero when ammUpdatedNotional == 0\n        int256 zeroParameter;\n        int256 lastNotional;      // for amm we calculate funding based on notional from prev block always\n        int256 lastInitialPrice;  // for amm\n        bool lastIsLong;\n\n        int256 oraclePriceUsed;\n    }\n\n    struct RiskParams {\n        int256 fundFeeRatio; //the part of fee that goes to Fee Fund. insuranceFeeRatio = 1 - fundFeeRatio \n        int256 daoFeeRatio;\n\n        int256 liquidatorFeeRatio; // used to calc the liquidator reward insuranceLiquidationFeeRatio = 1 - liquidatorFeeRatio\n        int256 marketFeeRatio; // used to calc market ratio on Liquidation\n        int256 insuranceProfitOnPositionClosed;\n\n        int256 liquidationMarginRatio; // the minimum possible margin ratio.\n        int256 minimumPricePossible; //use this when calculate fee\n    }\n\n    struct OracleData {\n        bool isActive;\n        int256 keeperReward; \n    }\n\n    /*Use this struct for fast access to position */\n    struct PositionMeta {\n        bool isActive; // is Position active\n\n        address _account; \n        IMarket _market;\n        uint _posIndex;\n    }\n\n\n    //GENERAL STATE - keep aligned on update\n    struct State {\n        address dao;\n        bool isSuspended;\n\n        /*Markets data */\n        IMarket[] allMarkets;\n        mapping (IMarket => MarketData) markets;\n\n        /*Traders data */\n        address[] allAccounts; // never pop\n        mapping (address => bool) existingAccounts; // so to not add twice, and have o(1) check for addin\n\n        mapping (address => mapping(IMarket => Position)) accounts; \n        \n        uint[] allIndexes;  // if we need to loop through all positions we use this array. Reorder it to imporove effectivenes\n        mapping (uint => PositionMeta) indexToPositionMeta;\n        uint256 currentPositionIndex; //index of the latest created position\n\n        /*Oracles */\n        address[] allOracles;\n        mapping(address => OracleData) oracles;\n\n        /*Strips params */\n        RiskParams riskParams;\n        IInsuranceFund insuranceFund;\n        IERC20 tradingToken;\n\n        // last ping timestamp\n        uint256 lastAlive;\n        // the time interval during which contract methods are available that are marked with a modifier ifAlive\n        uint256 keepAliveInterval;\n\n        address lpOracle;\n    }\n\n    /*\n        Oracles routines\n    */\n    function addOracle(\n        State storage state,\n        address _oracle,\n        int256 _keeperReward\n    ) internal {\n        require(state.oracles[_oracle].isActive == false, \"ORACLE_EXIST\");\n        \n        state.oracles[_oracle].keeperReward = _keeperReward;\n        state.oracles[_oracle].isActive = true;\n\n        state.allOracles.push(_oracle);\n    }\n\n    function removeOracle(\n        State storage state,\n        address _oracle\n    ) internal {\n        require(state.oracles[_oracle].isActive == true, \"NO_SUCH_ORACLE\");\n        state.oracles[_oracle].isActive = false;\n    }\n\n\n    function changeOracleReward(\n        State storage state,\n        address _oracle,\n        int256 _newReward\n    ) internal {\n        require(state.oracles[_oracle].isActive == true, \"NO_SUCH_ORACLE\");\n        state.oracles[_oracle].keeperReward = _newReward;\n    }\n\n\n    /*\n    *******************************************************\n    *   getters/setters for adding/removing data to state\n    *******************************************************\n    */\n\n    function setInsurance(\n        State storage state,\n        IInsuranceFund _insurance\n    ) internal\n    {\n        require(address(_insurance) != address(0), \"ZERO_INSURANCE\");\n        require(address(state.insuranceFund) == address(0), \"INSURANCE_EXIST\");\n\n        state.insuranceFund = _insurance;\n    }\n\n    function getMarket(\n        State storage state,\n        IMarket _market\n    ) internal view returns (MarketData storage market) {\n        market = state.markets[_market];\n        require(market.created == true, \"NO_MARKET\");\n    }\n\n    function addMarket(\n        State storage state,\n        IMarket _market\n    ) internal {\n        MarketData storage market = state.markets[_market];\n        require(market.created == false, \"MARKET_EXIST\");\n\n        state.markets[_market].created = true;\n        state.allMarkets.push(_market);\n    }\n\n    function setRiskParams(\n        State storage state,\n        RiskParams memory _riskParams\n    ) internal{\n        state.riskParams = _riskParams;\n    }\n\n\n\n    // Not optimal \n    function checkPosition(\n        State storage state,\n        IMarket _market,\n        address account\n    ) internal view returns (Position storage){\n        return state.accounts[account][_market];\n    }\n\n    // Not optimal \n    function getPosition(\n        State storage state,\n        IMarket _market,\n        address _account\n    ) internal view returns (Position storage position){\n        position = state.accounts[_account][_market];\n        require(position.isActive == true, \"NO_POSITION\");\n    }\n\n    function setPosition(\n        State storage state,\n        IMarket _market,\n        address account,\n        bool isLong,\n        int256 collateral,\n        int256 notional,\n        int256 initialPrice,\n        bool merge\n    ) internal returns (uint256 index) {\n        \n        /*TODO: remove this */\n        if (state.existingAccounts[account] == false){\n            state.allAccounts.push(account); \n            state.existingAccounts[account] = true;\n        }\n        Position storage _position = state.accounts[account][_market];\n\n        /*\n            Update PositionMeta for faster itterate over positions.\n            - it MUST be trader position\n            - it should be closed or liquidated. \n\n            We DON'T update PositionMeta if it's merge of the position\n         */\n        if (address(_market) != account && _position.isActive == false)\n        {            \n            /*First ever position for this account-_market setup index */\n            if (_position.posIndex == 0){\n                if (state.currentPositionIndex == 0){\n                    state.currentPositionIndex = 1;  // posIndex started from 1, to be able to do check above\n                }\n\n                _position.posIndex = state.currentPositionIndex;\n\n                state.allIndexes.push(_position.posIndex);\n                state.indexToPositionMeta[_position.posIndex] = PositionMeta({\n                    isActive: true,\n                    _account: account,\n                    _market: _market,\n                    _posIndex: _position.posIndex\n                });\n\n                /*INCREMENT index only if unique position was created */\n                state.currentPositionIndex += 1;                \n            }else{\n                /*We don't change index if it's old position, just need to activate it */\n                state.indexToPositionMeta[_position.posIndex].isActive = true;\n            }\n        }\n\n        index = _position.posIndex;\n\n        _position.trader = account;\n        _position.lastChangeBlock = block.number;\n        _position.isActive = true;\n        _position.isLiquidated = false;\n\n        _position.isLong = isLong;\n        _position.market = _market;\n        _position.cummulativeIndex = _market.currentOracleIndex();\n        _position.initialTimestamp = block.timestamp;\n        _position.initialBlockNumber = block.number;\n        _position.entryPrice = initialPrice;\n\n        int256 avgPrice = initialPrice;\n        int256 prevAverage = _position.prevAvgPrice;\n        if (prevAverage != 0){\n            int256 prevNotional = _position.notional; //save 1 read\n            avgPrice =(prevAverage.muld(prevNotional) + initialPrice.muld(notional)).divd(notional + prevNotional);\n        }\n        \n        \n        _position.prevAvgPrice = avgPrice;\n\n        \n        if (merge == true){\n            _position.collateral +=  collateral; \n            _position.notional += notional;\n            _position.initialPrice = avgPrice;\n        }else{\n            _position.collateral = collateral;\n            _position.notional = notional;\n            _position.initialPrice = initialPrice;\n            \n            //It's AMM need to deal with that in other places        \n            if (address(_market) == account){\n                _position.isAmm = true;\n                _position.lastNotional = notional;\n                _position.lastInitialPrice = initialPrice;\n            }\n        }\n    }\n\n    function unsetPosition(\n        State storage state,\n        Position storage _position\n    ) internal {\n        if (_position.isActive == false){\n            return;\n        } \n\n        /*\n            Position is fully closed or liquidated, NEED to update PositionMeta \n            BUT\n            we never reset the posIndex\n        */\n        state.indexToPositionMeta[_position.posIndex].isActive = false;\n\n        _position.lastChangeBlock = block.number;\n        _position.isActive = false;\n\n        _position.entryPrice = 0;\n        _position.collateral = 0; \n        _position.notional = 0; \n        _position.initialPrice = 0;\n        _position.cummulativeIndex = 0;\n        _position.initialTimestamp = 0;\n        _position.initialBlockNumber = 0;\n        _position.unrealizedPnl = 0;\n        _position.prevAvgPrice = 0;\n    }\n\n    function partlyClose(\n        State storage state,\n        Position storage _position,\n        int256 collateral,\n        int256 notional,\n        int256 unrealizedPaid\n    ) internal {\n        _position.collateral -= collateral; \n        _position.notional -= notional;\n        _position.unrealizedPnl -= unrealizedPaid;\n        _position.lastChangeBlock = block.number;\n    }\n\n    /*\n    *******************************************************\n    *******************************************************\n    *   Liquidation related functions\n    *******************************************************\n    *******************************************************\n    */\n    function getLiquidationRatio(\n        State storage state\n    ) internal view returns (int256){\n        return state.riskParams.liquidationMarginRatio;\n    }\n\n\n    //Integrity check outside\n    function addCollateral(\n        State storage state,\n        Position storage _position,\n        int256 collateral\n    ) internal {\n        _position.collateral += collateral;\n    }\n\n    function removeCollateral(\n        State storage state,\n        Position storage _position,\n        int256 collateral\n    ) internal {\n        _position.collateral -= collateral;\n        \n        require(_position.collateral >= 0, \"COLLATERAL_TOO_BIG\");\n    }\n\n\n\n    /*\n    *******************************************************\n    *   Funds view/transfer utils\n    *******************************************************\n    */\n    function depositToDao(\n        State storage state,\n        address _from,\n        int256 _amount\n    ) internal {\n        require(_amount > 0, \"WRONG_AMOUNT\");\n        require(state.dao != address(0), \"ZERO_DAO\");\n        \n        if (_from == address(this)){\n            SafeERC20.safeTransfer(state.tradingToken,\n                                        state.dao, \n                                        uint(_amount));\n\n        }else{\n            SafeERC20.safeTransferFrom(state.tradingToken, \n                                        _from, \n                                        state.dao, \n                                        uint(_amount));\n        }\n\n    }\n\n    function depositToMarket(\n        State storage state,\n        IMarket _market,\n        address _from,\n        int256 _amount\n    ) internal {\n        require(_amount > 0, \"WRONG_AMOUNT\");\n\n        getMarket(state, _market);\n\n        if (_from == address(this)){\n            SafeERC20.safeTransfer(state.tradingToken, \n                                        address(_market), \n                                        uint(_amount));\n\n        }else{\n            SafeERC20.safeTransferFrom(state.tradingToken, \n                                        _from, \n                                        address(_market), \n                                        uint(_amount));\n        }\n\n        IStakeble(address(_market)).externalLiquidityChanged();\n\n        IStakeble(address(_market)).changeTradingPnl(_amount);\n    }\n    \n    function withdrawFromMarket(\n        State storage state,\n        IMarket _market,\n        address _to,\n        int256 _amount\n    ) internal {\n        require(_amount > 0, \"WRONG_AMOUNT\");\n\n        getMarket(state, _market);\n\n        IStakeble(address(_market)).ensureFunds(_amount);\n\n        IStakeble(address(_market)).approveStrips(state.tradingToken, _amount);\n        SafeERC20.safeTransferFrom(state.tradingToken, \n                                    address(_market), \n                                    _to, \n                                    uint(_amount));\n\n        IStakeble(address(_market)).externalLiquidityChanged();\n\n        IStakeble(address(_market)).changeTradingPnl(0 - _amount);\n    }\n\n    function depositToInsurance(\n        State storage state,\n        address _from,\n        int256 _amount\n    ) internal {\n        require(address(state.insuranceFund) != address(0), \"BROKEN_INSURANCE_ADDRESS\");\n\n        if (_from == address(this)){\n            SafeERC20.safeTransfer(state.tradingToken, \n                                        address(state.insuranceFund), \n                                        uint(_amount));\n        }else{\n            SafeERC20.safeTransferFrom(state.tradingToken, \n                                        _from, \n                                        address(state.insuranceFund), \n                                        uint(_amount));\n        }\n\n        IStakeble(address(state.insuranceFund)).externalLiquidityChanged();\n\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(_amount);\n\n    }\n    \n    function withdrawFromInsurance(\n        State storage state,\n        address _to,\n        int256 _amount\n    ) internal {\n        \n        require(address(state.insuranceFund) != address(0), \"BROKEN_INSURANCE_ADDRESS\");\n\n        IStakeble(address(state.insuranceFund)).ensureFunds(_amount);\n\n        state.insuranceFund.withdraw(_to, _amount);\n\n        IStakeble(address(state.insuranceFund)).changeTradingPnl(0 - _amount);\n    }\n\n\n}\n"
    },
    "contracts/lib/events/Strips.sol": {
      "content": "interface IStripsEvents {\n    event LogCheckData(\n        address indexed account,\n        address indexed market,\n        CheckParams params\n    );\n\n    event LogCheckInsuranceData(\n        address indexed insurance,\n        CheckInsuranceParams params\n    );\n\n    struct CheckInsuranceParams{\n        int256 lpLiquidity;\n        int256 usdcLiquidity;\n        uint256 sipTotalSupply;\n    }\n\n    // ============ Structs ============\n\n    struct CheckParams{\n        /*Integrity Checks */        \n        int256 marketPrice;\n        int256 oraclePrice;\n        int256 tradersTotalPnl;\n        int256 uniLpPrice;\n        \n        /*Market params */\n        bool ammIsLong;\n        int256 ammTradingPnl;\n        int256 ammFundingPnl;\n        int256 ammTotalPnl;\n        int256 ammNotional;\n        int256 ammInitialPrice;\n        int256 ammEntryPrice;\n        int256 ammTradingLiquidity;\n        int256 ammStakingLiquidity;\n        int256 ammTotalLiquidity;\n\n        /*Trading params */\n        bool isLong;\n        int256 tradingPnl;\n        int256 fundingPnl;\n        int256 totalPnl;\n        int256 marginRatio;\n        int256 collateral;\n        int256 notional;\n        int256 initialPrice;\n        int256 entryPrice;\n\n        /*Staking params */\n        int256 slpTradingPnl;\n        int256 slpStakingPnl;\n        int256 slpTradingCummulativePnl;\n        int256 slpStakingCummulativePnl;\n        int256 slpTradingPnlGrowth;\n        int256 slpStakingPnlGrowth;\n        int256 slpTotalSupply;\n\n        int256 stakerInitialStakingPnl;\n        int256 stakerInitialTradingPnl;\n        uint256 stakerInitialBlockNum;\n        int256 stakerUnrealizedStakingProfit;\n        int256 stakerUnrealizedTradingProfit;\n\n        /*Rewards params */\n        int256 tradingRewardsTotal; \n        int256 stakingRewardsTotal;\n    }\n}\n\nlibrary StripsEvents {\n    event LogCheckData(\n        address indexed account,\n        address indexed market,\n        IStripsEvents.CheckParams params\n    );\n\n    event LogCheckInsuranceData(\n        address indexed insurance,\n        IStripsEvents.CheckInsuranceParams params\n    );\n\n\n    function logCheckData(address _account,\n                            address _market, \n                            IStripsEvents.CheckParams memory _params) internal {\n        \n        emit LogCheckData(_account,\n                        _market,\n                        _params);\n    }\n\n    function logCheckInsuranceData(address insurance,\n                                    IStripsEvents.CheckInsuranceParams memory _params) internal {\n        \n        emit LogCheckInsuranceData(insurance,\n                                    _params);\n    }\n\n}"
    },
    "contracts/interface/IAssetOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\ninterface IAssetOracle is KeeperCompatibleInterface {\n    function getPrice() external view returns (int256);\n    function calcOracleAverage(uint256 fromIndex) external view returns (int256);\n}\n"
    },
    "contracts/lib/StorageMarket.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { SignedBaseMath } from \"./SignedBaseMath.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IAssetOracle } from \"../interface/IAssetOracle.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapLpOracle } from \"../interface/IUniswapLpOracle.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\n\nlibrary StorageMarketLib {\n    using SignedBaseMath for int256;\n\n    /* Params that are set on contract creation */\n    struct InitParams {\n        IStrips stripsProxy;\n        IAssetOracle assetOracle;\n        IUniswapLpOracle pairOracle;\n\n        int256 initialPrice;\n        int256 burningCoef;\n\n        IUniswapV2Pair stakingToken;\n        IERC20 tradingToken;\n        IERC20 strpToken;       \n    }\n\n    //Need to care about align here \n    struct State {\n        address dao;\n\n        InitParams params;\n        IStripsLpToken slpToken;\n        IRewarder rewarder;\n\n        int256 totalLongs; //Real notional \n        int256 totalShorts; //Real notional\n        \n        int256 demand; //included proportion\n        int256 supply; //included proportion\n        \n        int256 ratio;\n        int256 _prevLiquidity;\n        bool isSuspended;\n\n        address sushiRouter;\n        uint createdAt;\n    }\n\n    function pairPrice(\n        State storage state\n    ) internal view returns (int256){\n        return state.params.pairOracle.getPrice();\n    }\n\n    //If required LP price conversions should be made here\n    function calcStakingLiqudity(\n        State storage state\n    ) internal view returns (int256){\n        return int256(state.params.stakingToken.balanceOf(address(this)));\n    }\n\n    function calcTradingLiqudity(\n        State storage state\n    ) internal view returns (int256){\n        return int256(state.params.tradingToken.balanceOf(address(this)));\n    }\n\n    function getLiquidity(\n        State storage state\n    ) internal view returns (int256) {\n        int256 stakingLiquidity = calcStakingLiqudity(state);\n        \n        if (stakingLiquidity != 0){\n            stakingLiquidity = stakingLiquidity.muld(pairPrice(state)); //convert LP to USDC\n        }\n\n        return stakingLiquidity + calcTradingLiqudity(state);\n    }\n\n    //Should return the scalar\n    //TODO: change to stackedLiquidity + total_longs_pnl + total_shorts_pnl\n    function maxNotional(\n        State storage state\n    ) internal view returns (int256) {\n        int256 _liquidity = getLiquidity(state);\n\n        if (_liquidity <= 0){\n            return 0;\n        }\n        int256 unrealizedPnl = state.params.stripsProxy.assetPnl(address(this));\n        int256 exposure = state.totalLongs - state.totalShorts;\n        if (exposure < 0){\n            exposure *= -1;\n        }\n\n        //10% now. TODO: allow setup via Params\n        return (_liquidity + unrealizedPnl - exposure).muld(10 * SignedBaseMath.onePercent());\n    }\n\n\n    function getPrices(\n        State storage state\n    ) internal view returns (int256 marketPrice, int256 oraclePrice){\n        marketPrice = currentPrice(state);\n\n        oraclePrice = IAssetOracle(state.params.assetOracle).getPrice();\n    }\n\n    function currentPrice(\n        State storage state\n    ) internal view returns (int256) {\n        return state.params.initialPrice.muld(state.ratio);\n    }\n\n\n    function oraclePrice(\n        State storage state\n    ) internal view returns (int256) {\n        return IAssetOracle(state.params.assetOracle).getPrice();\n    }\n\n    function approveStrips(\n        State storage state,\n        IERC20 _token,\n        int256 _amount\n    ) internal {\n        require(_amount > 0, \"BAD_AMOUNT\");\n\n        SafeERC20.safeApprove(_token, \n                                address(state.params.stripsProxy), \n                                uint(_amount));\n    }\n    \n    function _updateRatio(\n        State storage state,\n        int256 _longAmount,\n        int256 _shortAmount\n    ) internal\n    {\n        int256 _liquidity = getLiquidity(state); \n        if (state._prevLiquidity == 0){\n            state.supply = _liquidity.divd(SignedBaseMath.oneDecimal() + state.ratio);\n            state.demand = state.supply.muld(state.ratio);\n            state._prevLiquidity = _liquidity;\n        }\n\n        int256 diff = _liquidity - state._prevLiquidity;\n\n        state.demand += (_longAmount + diff.muld(state.ratio.divd(SignedBaseMath.oneDecimal() + state.ratio)));\n        state.supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + state.ratio));\n        if (state.demand <= 0 || state.supply <= 0){\n            require(0 == 1, \"SUSPENDED\");\n        }\n\n        state.ratio = state.demand.divd(state.supply);\n        state._prevLiquidity = _liquidity;\n    }\n\n\n    // we need this to be VIEW to use for priceChange calculations\n    function _whatIfRatio(\n        State storage state,\n        int256 _longAmount,\n        int256 _shortAmount\n    ) internal view returns (int256){\n        int256 ratio = state.ratio;\n        int256 supply = state.supply;\n        int256 demand = state.demand;\n        int256 prevLiquidity = state._prevLiquidity;\n\n        int256 _liquidity = getLiquidity(state);\n        \n        if (prevLiquidity == 0){\n            supply = _liquidity.divd(SignedBaseMath.oneDecimal() + ratio);\n            demand = supply.muld(ratio);\n            prevLiquidity = _liquidity;\n        }\n\n        int256 diff = _liquidity - prevLiquidity;\n\n        demand += (_longAmount + diff.muld(ratio.divd(SignedBaseMath.oneDecimal() + ratio)));\n        supply += (_shortAmount + diff.divd(SignedBaseMath.oneDecimal() + ratio));\n        if (demand <= 0 || supply <= 0){\n            require(0 == 1, \"SUSPENDED\");\n        }\n\n        return demand.divd(supply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/reward/Rewarder.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title Rewarder contract\n * @dev Tracks stakers' and traders' contributions, calculates and pays rewards in SRP token.\n * Deployed per asset (per market) as a separate instance.\n * @author Strips Finance\n **/\ncontract Rewarder is IRewarder {\n    bool private lock;\n    address public owner;\n\n\n    using SignedBaseMath for int256;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_AN_OWNER\");\n         _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == params.admin, \"NOT_AN_ADMIN\");\n         _;\n    }\n\n    modifier onlyStripsOrOwner() {\n        require(msg.sender == owner || msg.sender == params.stripsProxy, \"NOT_AN_OWNER_OR_STRIPS\");\n         _;\n    }\n\n    modifier nonReentrant() {\n        require(lock == false, \"ReentrancyGuard: reentrant call\");\n\n        lock = true;\n        _;\n        lock = false;\n    }\n\n    InitParams public params;\n\n    // Info on each participant of the reward program (common for both traders and stakers)\n    struct TraderInfo {\n        bool isClaimed;\n\n        /*Time when the position was opened. Use that to detect wash trades */\n        uint256 lastTradeTime;\n\n        /*Number of period when the trader did his last trade */\n        uint256 lastPeriod;\n        \n        /* The value of total AMM trading volume for lastPeriod */\n        int256 accInitial;\n        \n        /*Cummulative trader's trade volume for the period */\n        int256 periodTradingVolume;\n\n        /*Total current reward, it's not go to 0 if trader goes inactive, as you can claim at anytime */\n        int256 reward;\n    }\n\n    struct StakerInfo{\n        uint256 timeInitial;\n        int256 accInitial;\n\n        int256 slp;\n        int256 reward;\n    }\n\n    int256 public totalTradingRewardsClaimed;\n    int256 public totalStakingRewardsClaimed;\n\n    uint256 public currentPeriod;\n    uint256 public startTime;\n\n    /*Staking */\n    uint256 public lastStakeTime;\n    int256 public supplyStakeTotal;\n    int256 public accStakeTotal;\n\n    /*Trading */\n    uint256 public lastTradeTime;\n    int256 public tradingVolumeTotal;\n    int256 public accTradeTotal;\n\n\n    mapping(uint256 => int256) public accPerPeriod;\n    mapping(address => TraderInfo) public traders;\n    mapping(address => StakerInfo) public stakers;\n\n    constructor(\n        InitParams memory _params\n    ) {\n        params = _params;\n        owner = msg.sender;\n        startTime = 0;\n\n        totalTradingRewardsClaimed = 0;\n        totalStakingRewardsClaimed = 0;\n    }\n\n    function currentTradingReward() external view override returns(int256)\n    {\n        return params.rewardTotalPerSecTrader;\n    }\n\n    function currentStakingReward() external view override returns (int256)\n    {\n        return params.rewardTotalPerSecStaker;\n    }\n\n\n    function changeTradingReward(int256 _newRewardPerSec) external onlyAdmin\n    {\n        bool isSwitched = _updatePeriod(0);\n\n        if (!isSwitched && tradingVolumeTotal > 0){\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\n            accTradeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\n\n        }\n\n        params.rewardTotalPerSecTrader = _newRewardPerSec;\n        lastTradeTime = block.timestamp;\n    }\n\n    function changeStakingReward(int256 _newRewardPerSec) external onlyAdmin\n    {\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\n        accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\n\n        params.rewardTotalPerSecStaker = _newRewardPerSec;\n        lastStakeTime = block.timestamp;\n    }\n\n\n    function changeDao(address _newDao) external onlyAdmin\n    {\n        require(_newDao != address(0), \"ZERO_DAO\");\n        params.dao = _newDao;\n    }\n\n    function changeOwner(address _newOwner) external onlyAdmin\n    {\n        require(_newOwner != address(0), \"ZERO_OWNER\");\n        owner = _newOwner;\n    }\n\n    function changeAdmin(address _newAdmin) external onlyAdmin\n    {\n        require(_newAdmin != address(0), \"ZERO_ADMIN\");\n        params.admin = _newAdmin;\n    }\n\n\n    /**\n     * @dev Should be called each time someone stake/unstake.\n     * @param _staker address of the staker\n     **/\n    function rewardStaker(address _staker) external override nonReentrant onlyStripsOrOwner {\n        /*Accumulare reward for previous period and update accumulator */\n        stakers[_staker].reward = totalStakerReward(_staker);\n\n        /*Accumulate for the previous period if there was any supply */\n        if (supplyStakeTotal > 0){\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\n            accStakeTotal += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\n        }\n        lastStakeTime = block.timestamp;\n        supplyStakeTotal = int256(params.slpToken.totalSupply());\n\n        /*Update staker's stake*/\n        stakers[_staker].accInitial = accStakeTotal;\n        stakers[_staker].slp = int256(params.slpToken.balanceOf(_staker));\n        stakers[_staker].timeInitial = block.timestamp;\n    }\n\n    function claimStakingReward(address _staker) external override {\n\n        /*Accumulare reward and update staker's initial */\n        //stakers[_staker].reward = totalStakerReward(_staker).muld(params.rewardTotalPerSecStaker);\n        stakers[_staker].reward = totalStakerReward(_staker);\n\n        if (stakers[_staker].reward <= 0){\n            return;\n        }\n\n        int256 accInstant = accStakeTotal;\n        if (supplyStakeTotal > 0){\n            int256 timeDiff = int256(block.timestamp - lastStakeTime);\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\n        }\n\n\n        SafeERC20.safeTransferFrom(params.strpToken, \n                                    params.dao, \n                                    _staker, \n                                    uint(stakers[_staker].reward));\n        \n        emit StakingRewardClaimed(\n            _staker, \n            stakers[_staker].reward\n        );\n\n        totalStakingRewardsClaimed += stakers[_staker].reward;\n\n        /*Reset reward and time*/\n        stakers[_staker].reward = 0;\n        stakers[_staker].timeInitial = block.timestamp;\n        stakers[_staker].accInitial = accInstant;\n    }\n\n    function totalStakerReward(address _staker) public view override returns (int256 reward){\n        /*If staker didn't stake he can't have reward yet */\n        if (stakers[_staker].timeInitial == 0){\n            return 0;\n        }\n\n        /*if supply is 0 it means that everyone usntake and no more accumulation */\n        if (supplyStakeTotal <= 0){\n            return stakers[_staker].reward;\n        }\n\n        /*Accumulate reward till current time */\n        int256 timeDiff = int256(block.timestamp - lastStakeTime);\n        int256 accInstant = accStakeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecStaker).divd(supplyStakeTotal);\n\n        return stakers[_staker].reward + stakers[_staker].slp.muld(accInstant - stakers[_staker].accInitial);\n    }\n\n\n    function totalTradeReward(address _trader) public view override returns (int256 reward){\n        uint256 traderLastTrade = traders[_trader].lastTradeTime;\n\n        /*If trader didn't or no one trade then it's 0 */\n        if (traderLastTrade == 0 || lastTradeTime == 0){\n            return 0;\n        }\n\n        /* What's the number of the current period? */\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\n\n        /*Which period the trader last trade */\n        uint256 traderLastPeriod = traders[_trader].lastPeriod;\n\n        int256 accInstant = 0;\n        /* Accumulate reward for the previous period - ONLY till the end of period */\n        if (_period > traderLastPeriod){\n            accInstant = accPerPeriod[traderLastPeriod];\n            if (accInstant == 0){\n                /* updatePeriod never called. Need to calc accumulator first */\n                /* |t(1)----period1---(traderLastTrade)----(lastTradeTime)<----timeDiff---->|(end of period)------call HERE| */\n\n                if (tradingVolumeTotal <= 0){\n                    return traders[_trader].reward;\n                }\n\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\n                accInstant = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\n            }\n\n            int256 _newReward = traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\n\n            return traders[_trader].reward + _newReward;\n        }\n\n        /*It's the same period*/\n        if (tradingVolumeTotal <= 0){\n            /*no one trade yet*/\n            return traders[_trader].reward;\n        }\n        \n        \n        int256 timeDiff = int256(block.timestamp - lastTradeTime);\n        accInstant = accTradeTotal + timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\n\n        return traders[_trader].reward + traders[_trader].periodTradingVolume.muld(accInstant - traders[_trader].accInitial);\n    }\n\n\n    \n    /**\n     * @dev Should be called each time trader trader.\n     * @param _trader address of the trader\n     * @param _notional current trade position size\n     **/\n    function rewardTrader(address _trader, int256 _notional) external override nonReentrant onlyStripsOrOwner {\n        if (startTime == 0){\n            /*Setup start time for all periods once first trader ever happened*/\n            startTime = block.timestamp;\n            currentPeriod = 0;\n        }\n\n        int256 boostedNotional = _notional.muld(_booster(_trader));\n        \n        if ((block.timestamp - traders[_trader].lastTradeTime) < params.washTime && traders[_trader].isClaimed == false){\n            /*If it's a wash trade just update period and return */\n            _updatePeriod(boostedNotional);\n\n            lastTradeTime = block.timestamp;\n            return;\n        }\n        \n        traders[_trader].reward = totalTradeReward(_trader);\n\n        bool isSwitched = _updatePeriod(boostedNotional);\n        if (currentPeriod != traders[_trader].lastPeriod){\n            isSwitched = true;\n        }\n\n        /*Update trader */\n        if (isSwitched){\n            /*Reset volume */\n            traders[_trader].periodTradingVolume = boostedNotional;\n        }else{\n            /*Accumulate trading volume for trader */\n            traders[_trader].periodTradingVolume += boostedNotional;\n        }\n\n        traders[_trader].lastTradeTime = block.timestamp;\n        traders[_trader].isClaimed = false;\n\n        traders[_trader].lastPeriod = currentPeriod;\n        traders[_trader].accInitial = accTradeTotal;\n\n        lastTradeTime = block.timestamp;\n    }\n\n    /**\n     * @dev Send all current reward to the trader\n     **/\n    function claimTradingReward(address _trader) external override {\n\n        //Accumulate any reward till this taime\n        //traders[_trader].reward = totalTradeReward(_trader).muld(params.rewardTotalPerSecTrader);\n        traders[_trader].reward = totalTradeReward(_trader);\n\n        if (traders[_trader].reward <= 0){\n            return;\n        }\n\n        bool isSwitched = _updatePeriod(0);\n\n        if (isSwitched){\n            traders[_trader].periodTradingVolume = 0;\n        }\n\n        /*move accumulator */\n        int256 accInstant = accTradeTotal;\n        \n        if (tradingVolumeTotal > 0){\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\n            accInstant += timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\n        }\n\n        SafeERC20.safeTransferFrom(params.strpToken, \n                                    params.dao, \n                                    _trader, \n                                    uint(traders[_trader].reward));\n\n        emit TradingRewardClaimed(\n            _trader,\n            traders[_trader].reward\n        );\n\n\n        totalTradingRewardsClaimed += traders[_trader].reward;\n\n        /*Reset all params */\n        traders[_trader].accInitial = accInstant;\n        traders[_trader].lastTradeTime = block.timestamp;\n        traders[_trader].isClaimed = true;\n        traders[_trader].lastPeriod = currentPeriod;\n        traders[_trader].reward = 0;\n\n    }\n\n    /**\n     * @dev Calls on each actions\n     * @param _notional current trade notional\n     * @return isSwitched true if period switched\n     **/\n    function _updatePeriod(int256 _notional) internal returns (bool isSwitched) {\n        isSwitched = false;\n\n        /* _periods are not incremented by ONE.  It can be 1,2,5,8,12 Depends on when the last trade happened*/\n        uint256 _period = (block.timestamp - startTime) / params.periodLength;\n\n        /* Reset period */\n        if (_period > currentPeriod){\n            if (lastTradeTime != 0){\n                /* Calc the rest and save */\n                uint256 timeLeft = params.periodLength - (lastTradeTime - startTime) % params.periodLength;\n                accPerPeriod[currentPeriod] = accTradeTotal + int256(timeLeft).toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal);\n\n                /* Reset total AMM trading volume and accumulator */\n                tradingVolumeTotal = 0;\n                accTradeTotal = 0;\n\n            } //else: //It's the first trade ever, just setup period\n\n            isSwitched = true;\n            /*Switch period */\n            currentPeriod = _period;\n\n        }\n\n        /* If it's the trade then change volume and accumulate it */\n        if (_notional > 0){\n            int256 timeDiff = int256(block.timestamp - lastTradeTime);\n            if (lastTradeTime != 0 && tradingVolumeTotal > 0){\n                // If it's not the first trade in period OR the first trade EVER\n                int256 timeDiff = int256(block.timestamp - lastTradeTime);\n                accTradeTotal += (timeDiff.toDecimal().muld(params.rewardTotalPerSecTrader).divd(tradingVolumeTotal));\n            }\n            tradingVolumeTotal += _notional;\n        }\n    }\n\n    function _booster(address _trader) internal returns (int256){\n        int256 supply = int256(params.slpToken.totalSupply());\n        if (supply <= 0) {\n            return SignedBaseMath.oneDecimal();\n        }\n        return SignedBaseMath.oneDecimal() + int256(params.slpToken.balanceOf(_trader)).divd(supply);\n    }\n}\n"
    },
    "contracts/markets/IrsMarket.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { IRewardable } from \"../interface/IRewardable.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\n\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IAssetOracle } from \"../interface/IAssetOracle.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { MGetters } from \"./Getters.sol\";\nimport { StakingImpl } from \"../impl/StakingImpl.sol\";\nimport { SlpFactoryImpl } from \"../impl/SlpFactoryImpl.sol\";\n\nimport { SLPToken } from \"../token/SLPToken.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageMarketLib } from \"../lib/StorageMarket.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n//Market contract for particular derivative\n//Should implement asset specific methods and calculations\n//TODO: set owner STRIPS\ncontract IrsMarket is\n    IMarket,\n    IStakeble,\n    IRewardable,\n    MGetters,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SignedBaseMath for int256;\n    using StorageMarketLib for StorageMarketLib.State;\n\n    bytes32 public constant STRIPS_ROLE = keccak256(\"STRIPS_ROLE\");\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n\n    modifier notSuspended() {\n        require(m_state.isSuspended == false, \"SUSPENDED\");\n        require(address(m_state.slpToken) != address(0), \"SLP_NOT_CREATED\");\n         _;\n    }\n\n    function initialize (\n        StorageMarketLib.InitParams memory _params,\n        address _sushiRouter,\n        address _dao\n    ) public initializer\n    {\n        require(Address.isContract(_sushiRouter), \"SUSHI_ROUTER_NOT_A_CONTRACT\");\n        require(address(_params.stripsProxy) != address(0), \"NO_STRIPS_ERROR\");\n        require(_dao != address(0), \"ZERO_DAO\");\n\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        m_state.dao = _dao;\n        m_state.params = _params;\n        m_state.sushiRouter = _sushiRouter;\n\n        m_state.createdAt = block.timestamp;\n\n        if (m_state.ratio == 0){\n            m_state.ratio = SignedBaseMath.oneDecimal();\n        }\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(OWNER_ROLE, msg.sender);\n        _setupRole(STRIPS_ROLE, address(_params.stripsProxy));\n    }\n\n    function isRewardable() external view override returns (bool)\n    {\n        return true;        \n    }\n\n    function changeDao(address _newDao) external onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(_newDao != address(0), \"ZERO_DAO\");\n        m_state.dao = _newDao;\n    }\n\n\n    function getStrips() external view override returns (address) {\n        return address(m_state.params.stripsProxy);\n    }\n\n    function createRewarder(IRewarder.InitParams memory _params) external override onlyRole(OWNER_ROLE)\n    {\n        require(address(m_state.rewarder) == address(0), \"REWARDER_EXIST\");\n\n        m_state.rewarder = SlpFactoryImpl._rewarderFactory(_params);\n\n    }\n\n    function getRewarder() external view override returns (address)\n    {\n        return address(m_state.rewarder);\n    }\n\n\n    function createSLP(IStripsLpToken.TokenParams memory _params) external override onlyRole(OWNER_ROLE) {\n        require(address(m_state.slpToken) == address(0), \"LP_TOKEN_EXIST\");\n\n        \n        m_state.slpToken = SlpFactoryImpl._slpFactory(_params,\n                                                    \"SLP Token\",\n                                                    \"SLP\");\n    }\n\n    function approveStrips(IERC20 _token, int256 _amount) external override onlyRole(STRIPS_ROLE) {\n        m_state.approveStrips(_token, _amount);\n    }\n\n    function openPosition(\n        bool isLong,\n        int256 notional\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\n        require(notional > 0, \"NOTIONAL_LT_0\");\n        \n        if (isLong == true){\n            m_state.totalLongs += notional;\n            m_state._updateRatio(notional, 0);\n        }else{\n            m_state.totalShorts += notional;\n            m_state._updateRatio(0, notional);\n        }\n\n        return m_state.currentPrice();\n    }\n\n    function closePosition(\n        bool isLong,\n        int256 notional\n    ) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) returns (int256){\n        require(notional > 0, \"NOTIONAL_LT_0\");\n\n        //TODO: check for slippage, if it's big then the trader PAY slippage\n        if (isLong){\n            m_state.totalLongs -= notional;\n            require(m_state.totalLongs >= 0, \"TOTALLONGS_LT_0\");\n            \n            m_state._updateRatio(0 - notional, 0);\n        }else{\n            m_state.totalShorts -= notional;\n            require(m_state.totalShorts >= 0, \"TOTALSHORTS_LT_0\");\n\n            m_state._updateRatio(0, 0 - notional);\n        }\n\n        return m_state.currentPrice();\n    }\n\n\n    // SHORT: openPrice = initialPrice * (demand / (supply + notional))\n    // LONG: openPrice = initialPrice * (demand / (supply + notional))\n    // demand = total_longs + stackedLiquidity;\n    // supply = total_shorts + stackedLiquidity \n    function priceChange(\n        int256 notional,\n        bool isLong\n    ) public view override returns (int256){\n        if (isLong){\n            return _priceChangeOnLong(notional);\n        }\n\n        return _priceChangeOnShort(notional);\n    }\n\n    function _priceChangeOnLong(\n        int256 notional\n    ) private view returns (int256){\n\n        int256 ratio = m_state._whatIfRatio(notional, 0);\n\n        return m_state.params.initialPrice.muld(ratio);\n    }\n\n    function _priceChangeOnShort(\n        int256 notional\n    ) private view returns (int256){\n        int256 ratio = m_state._whatIfRatio(0, notional);\n\n        return m_state.params.initialPrice.muld(ratio);\n    }\n\n\n    /*\n    ********************************************************************\n    * Stake/Unstake related functions\n    ********************************************************************\n    */\n    function liveTime() external view override returns (uint){\n        return block.timestamp - m_state.createdAt;\n    }\n\n    function isInsurance() external view override returns (bool){\n        return false;\n    }\n\n    function totalStaked() external view override returns (int256)\n    {\n        return m_state.calcStakingLiqudity();\n    }\n\n    function getSlpToken() external view override returns (address) {\n        return address(m_state.slpToken);\n    }\n\n    function getStakingToken() external view override returns (address)\n    {\n        return address(m_state.params.stakingToken);\n    }\n\n    function getTradingToken() external view override returns (address)\n    {\n        return address(m_state.params.tradingToken);\n    }\n\n    function ensureFunds(int256 amount) external override nonReentrant notSuspended onlyRole(STRIPS_ROLE) {\n        int256 diff = m_state.calcTradingLiqudity() - amount;\n        if (diff >= 0){\n            return;\n        }\n\n        //diff *= -1;\n        StakingImpl._burnPair(m_state.slpToken,\n                                amount);\n    }\n\n    function stake(int256 amount) external override nonReentrant notSuspended {\n        StakingImpl._stake(m_state.slpToken,\n                            msg.sender,\n                            amount);\n    }\n\n    function unstake(int256 amount) external override nonReentrant notSuspended {\n        StakingImpl._unstake(m_state.slpToken,\n                            msg.sender,\n                            amount);\n        \n    }\n\n    function externalLiquidityChanged() external override nonReentrant onlyRole(STRIPS_ROLE){\n\n    }\n\n    function changeTradingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\n        m_state.slpToken.changeTradingPnl(amount);\n    }\n    \n    function changeStakingPnl(int256 amount) public override nonReentrant onlyRole(STRIPS_ROLE){\n        m_state.slpToken.changeStakingPnl(amount);\n    }\n\n\n    /* UTILS */\n    function changeSushiRouter(address _router) external override onlyRole(OWNER_ROLE)\n    {\n        require(Address.isContract(_router), \"SUSHI_ROUTER_NOT_A_CONTRACT\");\n\n        m_state.sushiRouter = _router;\n\n    }\n    function getSushiRouter() external view override returns (address)\n    {\n        return m_state.sushiRouter;\n    }\n\n    function getStrp() external view override returns (address)\n    {\n        return address(m_state.params.strpToken);\n    }\n\n}\n"
    },
    "contracts/markets/Getters.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\n\nimport { MState } from \"./State.sol\";\nimport { StorageMarketLib } from \"../lib/StorageMarket.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StakingImpl } from \"../impl/StakingImpl.sol\";\nimport { AssetOracle } from \"../oracle/AssetOracle.sol\";\n\nabstract contract MGetters is\n    IMarket,\n    MState\n{\n    using StorageMarketLib for StorageMarketLib.State;\n    using SignedBaseMath for int256;\n\n    function currentPrice() external view override returns (int256) {\n        return m_state.currentPrice();\n    }\n\n    function oraclePrice() external view override returns (int256) {\n        return m_state.oraclePrice();\n    }\n    \n    /**\n     * @notice total longs positions notional for this market. \n     * @return in USDC\n     */\n    function getLongs() external view override returns (int256) \n    {\n        return m_state.totalLongs;\n    }\n\n    /**\n     * @notice total shorts positions notional for this market. \n     * @return in USDC\n     */\n    function getShorts() external view override returns (int256) {\n        return m_state.totalShorts;\n    }\n\n    /**\n     * @notice using to receive the maximum position size for the current market\n     * @return maximum position size (after leverage) in USDC\n     */\n    function maxNotional() external view override returns (int256) {\n        return m_state.maxNotional();\n    }\n\n\n    function getPrices() external view override returns (int256, int256) {\n        return m_state.getPrices();\n    }\n\n    function getLiquidity() external view override returns (int256) {\n        return m_state.getLiquidity();\n    }\n\n    function getPartedLiquidity() external view override returns (int256 tradingLiquidity, int256 stakingLiquidity) {\n        tradingLiquidity = m_state.calcTradingLiqudity();\n        stakingLiquidity = m_state.calcStakingLiqudity();\n    }\n\n    function getAssetOracle() external view override returns (address)\n    {\n        return address(m_state.params.assetOracle);\n    }\n\n    function getPairOracle() external view override returns (address)\n    {\n        return address(m_state.params.pairOracle);\n    }\n\n    function currentOracleIndex() external view override returns (uint256) \n    {\n        return AssetOracle(address(m_state.params.assetOracle)).lastCumulativeIndex();\n    }\n\n\n}"
    },
    "contracts/markets/State.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { StorageMarketLib } from \"../lib/StorageMarket.sol\";\n\nabstract contract MState\n{\n    StorageMarketLib.State public m_state;\n}"
    },
    "contracts/oracle/AssetOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { IAssetOracle } from \"../interface/IAssetOracle.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\n\n\ncontract AssetOracle is IAssetOracle\n{\n    using SignedBaseMath for int256;\n\n    address public stripsProxy;\n    address public keeper;\n    uint public lastTimeStamp;\n\n    int256 public lastApr;\n\n    uint256 public lastCumulativeIndex;\n    uint256 public lastBlockNumUpdate;\n    int256[] public cumulativeOracleAvg;\n\n    int256 constant ANN_PERIOD_SEC = 31536000;\n    \n    modifier activeOnly() {\n        require(lastTimeStamp != 0, \"NOT_ACTIVE\");\n         _;\n    }\n\n    modifier keeperOnly() {\n        require(msg.sender == keeper, \"NOT_A_KEEPER\");\n         _;\n    }\n\n    constructor(\n        address _stripsProxy,\n        address _keeper\n    ){\n        require(_keeper != address(0), \"BROKEN_KEEPER\");\n        require(Address.isContract(_stripsProxy), \"STRIPS_NOT_A_CONTRACT\");\n\n        stripsProxy = _stripsProxy;\n        keeper = _keeper;\n    }\n\n    function getPrice() external view override activeOnly returns (int256){\n        return lastApr;\n    }\n\n    function changeKeeper(address _keeper) external keeperOnly {\n        keeper = _keeper;\n    }\n\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\n        if (block.timestamp > lastTimeStamp){\n            upkeepNeeded = true;\n        }else{\n            upkeepNeeded = false;\n        }\n    }\n\n    function accumulateOracle() internal {\n        int256 aprPerSec = lastApr / ANN_PERIOD_SEC;\n\n        if (lastCumulativeIndex != 0){\n            aprPerSec += cumulativeOracleAvg[lastCumulativeIndex-1];\n        }\n\n        cumulativeOracleAvg.push(aprPerSec);\n        lastCumulativeIndex += 1;\n    }\n\n    function performUpkeep(bytes calldata _data) public virtual override keeperOnly {\n        require(block.timestamp > lastTimeStamp, \"NO_NEED_UPDATE\");\n        lastTimeStamp = block.timestamp;\n\n        lastApr = abi.decode(_data, (int256));\n\n        //TODO: calc and set APY here\n        accumulateOracle();\n    }\n\n    function calcOracleAverage(uint256 fromIndex) external view virtual override activeOnly returns (int256) {        \n        require(lastCumulativeIndex > 0, \"ORACLE_NEVER_UPDATED\");\n\n        int256 avg = cumulativeOracleAvg[lastCumulativeIndex-1];\n\n        int256 len = int256(lastCumulativeIndex - fromIndex);\n        if (len == 0){\n            if (fromIndex > 1){\n                return avg - cumulativeOracleAvg[fromIndex-2];\n            }else{\n                return avg;\n            }\n        }\n\n        if (fromIndex != 0){\n            avg -= cumulativeOracleAvg[fromIndex-1];\n        }\n\n        return avg / len;\n    }\n}"
    },
    "contracts/strips/Strips.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IrsMarket } from \"../markets/IrsMarket.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { SLPToken } from \"../token/SLPToken.sol\";\n\nimport { StripsViewImpl } from \"../impl/StripsViewImpl.sol\";\nimport { StripsAdminImpl } from \"../impl/StripsAdminImpl.sol\";\nimport { StripsStateImpl } from \"../impl/StripsStateImpl.sol\";\n\nimport { TradeImpl } from \"../impl/TradeImpl.sol\";\n\nimport { SState } from \"./State.sol\";\n\nimport { PnlLib } from \"../lib/Pnl.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { StorageMarketLib } from \"../lib/StorageMarket.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\n\ncontract Strips is\n    SState,\n    IStrips,\n    OwnableUpgradeable\n{\n    using StorageStripsLib for StorageStripsLib.State;\n    using SignedBaseMath for int256;\n    using Address for address;\n\n    event PingDone(\n        uint indexed current,\n        uint indexed next\n    );\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(lock == false, \"ReentrancyGuard: reentrant call\");\n\n        lock = true;\n        _;\n        lock = false;\n    }\n\n\n    modifier notSuspended() {\n        require(g_state.isSuspended == false, \"SUSPENDED\");\n        require(block.timestamp <= g_state.lastAlive + g_state.keepAliveInterval, \"PING_NOT_FOUND\");\n         _;\n    }\n\n    modifier pingerOnly(){\n        require(msg.sender == pinger, \"NOT_A_PINGER\");\n        _;\n    }\n\n    function initialize(\n        StorageStripsLib.RiskParams memory _riskParams,\n        IERC20 _tradingToken,\n        uint256 _keepAliveInterval,\n        address _dao,\n        address _lpOracle\n    ) public initializer {\n        require(_dao != address(0), \"ZERO_DAO\");\n        require(Address.isContract(address(_tradingToken)), \"TRADING_TOKEN_NOT_A_CONTRACT\");\n\n        __Ownable_init();\n        lock = false;\n\n        g_state.riskParams = _riskParams;\n        g_state.tradingToken = _tradingToken;\n\n        g_state.lastAlive = block.timestamp;\n        g_state.keepAliveInterval = _keepAliveInterval;\n\n        g_state.dao = _dao;\n        g_state.lpOracle = _lpOracle;\n\n        pinger = msg.sender;\n    }\n\n    function getLpOracle() external view override returns (address)\n    {\n        return g_state.lpOracle;\n    }\n\n\n    function suspendChange(bool _suspend) external onlyOwner\n    {\n        g_state.isSuspended = _suspend;\n    }\n\n    function changePinger(address _newPinger) external onlyOwner\n    {\n        require(_newPinger != address(0), \"ZERO_PINGER\");\n        pinger = _newPinger;\n    }\n\n\n    function changeDao(address _newDao) external onlyOwner\n    {\n        require(_newDao != address(0), \"ZERO_DAO\");\n        g_state.dao = _newDao;\n    }\n\n    function adminDispatcher(IStrips.AdminActionArgs memory args) external onlyOwner\n    {\n        StripsAdminImpl.dispatcher(g_state, \n                                    args);\n    }\n\n    /*\n        FOR TEST only. \n        todo:removeonproduction\n\n     */\n    function check_insurance() external\n    {\n        StripsStateImpl._check_insurance(g_state);\n    }\n\n    /*\n        FOR TEST only. \n        todo:removeonproduction\n\n     */\n    function check_trader(address account, address market) external \n    {\n        StripsStateImpl._check_trader(g_state, \n                                account,\n                                IMarket(market));\n    }\n\n    function viewDispatcher(IStrips.ViewActionArgs memory args) external view returns (bytes memory)\n    {\n        return StripsViewImpl.dispatcher(g_state, \n                                        args);\n    }\n\n    function stateDispatcher(IStrips.StateActionArgs memory args) external\n    {\n        return StripsStateImpl.dispatcher(g_state, \n                                            args);\n    }\n\n\n    function getTradingInfo(address _account) external view returns (IStrips.TradingInfo memory tradingInfo) {\n        return StripsViewImpl.getTradingInfo(g_state, _account);\n    }\n\n    function getStakingInfo(address _account) public view returns (IStrips.StakingInfo memory stakingInfo) {\n        return StripsViewImpl.getStakingInfo(g_state, _account);\n    }\n\n    function payKeeperReward(address keeper) external override {\n        //TODO: implement\n        StripsStateImpl._payKeeperReward(g_state,\n                                    keeper);\n    }\n\n    /**\n     * @notice Sets timestamp of last call for the availability of contract\n     * methods when interacting with keepers. The call can only be made by\n     * the user who has PINGER_ROLE\n     */\n    function ping() external override pingerOnly\n    {\n       g_state.lastAlive = block.timestamp;\n       \n       emit PingDone(\n            g_state.lastAlive,\n            g_state.lastAlive + g_state.keepAliveInterval\n       );\n    }\n\n    function assetPnl(address _asset) external view virtual override returns (int256){\n        StorageStripsLib.Position storage ammPosition = g_state.checkPosition(IMarket(_asset), address(_asset));\n\n        if (ammPosition.isActive == false){\n            return 0;\n        }\n\n        return PnlLib.getAmmTotalPnl(g_state, \n                                        IMarket(_asset), \n                                        ammPosition);\n    }\n\n    function getPositionsCount() external view override returns (uint)\n    {\n        return g_state.allIndexes.length;\n    }\n\n\n      /**\n        * @dev Return the list of liquidateable positions. NOT Efficien - rewrite for more efficient way\n        * Used by LiquidationKeeper to find liquidateable positions and efficiently iterate over them.\n        * @param _start position index to start from\n        * @param _length the max length of returned list.\n        * @return The list of Meta Data on position that is enough for liquidation\n        **/\n    function getPositionsForLiquidation(\n        uint _start, \n        uint _length\n    ) external view override returns (StorageStripsLib.PositionMeta[] memory) {\n        // If requested length goes out of array indexes range,\n        // enforce the _end to be the last element of array.\n\n        \n        if (g_state.allIndexes.length == 0){\n            StorageStripsLib.PositionMeta[] memory liqPositions = new StorageStripsLib.PositionMeta[](1);\n            return liqPositions;\n        }\n\n        uint256 _end;\n        if ( _start + _length > g_state.allIndexes.length ) {\n            _end = g_state.allIndexes.length - 1;\n        } else {\n            _end = _start + _length -  1;\n        }\n        // Since dynamic array can't be returned directly,\n        // create static array of the result size and assign values to it.\n        // So we count the total amount of liquidateable positions in the given range of indexes first\n        uint count = _end - _start + 1;\n        uint j = 0;\n        StorageStripsLib.PositionMeta[] memory liqPositions = new StorageStripsLib.PositionMeta[](count);\n        for (uint256 i = _start; i <= _end; i++) {\n            uint posIndex = g_state.allIndexes[i];  // get posIndex first\n\n            /*Check PositionMeta for current posIndex */\n            if (g_state.indexToPositionMeta[posIndex].isActive){\n                IMarket _market = g_state.indexToPositionMeta[posIndex]._market;\n\n                StorageStripsLib.Position storage _position = g_state.checkPosition(_market, g_state.indexToPositionMeta[posIndex]._account);\n                (,int256 marginRatio) = PnlLib.getMarginRatio(g_state,\n                                                            _market,\n                                                            _position,\n                                                            SignedBaseMath.oneDecimal(),\n                                                            false);  // based on Exit Price always\n                \n                /*We need to liquidate this position */\n                if (marginRatio <= g_state.getLiquidationRatio()){\n                    liqPositions[j] = g_state.indexToPositionMeta[posIndex];\n                    j += 1;\n                }\n            }\n        }\n\n        return liqPositions;\n    }\n\n    function close(\n        IMarket _market,\n        int256 _closeRatio,\n        int256 _slippage\n    ) external override nonReentrant notSuspended {\n        TradeImpl.closePosition(g_state,\n                                _market,\n                                _closeRatio,\n                                _slippage);\n\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\n        emit LogPositionUpdate(\n            msg.sender,\n            _market,\n            PositionParams({\n                isLong:position.isLong,\n                isActive:position.isActive,\n                isLiquidated:position.isLiquidated,\n                notional:position.notional,\n                collateral:position.collateral,\n                initialPrice:position.initialPrice\n            }));\n    }\n\n    function open(\n        IMarket _market,\n        bool isLong,\n        int256 collateral,\n        int256 leverage,\n        int256 slippage\n    ) external override nonReentrant notSuspended {\n        TradeImpl.openPosition(g_state,\n                                TradeImpl.PositionParams({\n                                    _market: _market,\n                                    _account: msg.sender,\n                                    _collateral: collateral,\n                                    _leverage: leverage,\n                                    _isLong: isLong,\n                                    _slippage: slippage\n                                }));\n\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\n        emit LogPositionUpdate(\n            msg.sender,\n            _market,\n            PositionParams({\n                isLong:position.isLong,\n                isActive:position.isActive,\n                isLiquidated:position.isLiquidated,\n                notional:position.notional,\n                collateral:position.collateral,\n                initialPrice:position.initialPrice\n            }));\n    }\n\n    function liquidatePosition(IMarket _market, \n                                address account) external override nonReentrant notSuspended\n    {\n        TradeImpl.liquidatePosition(g_state,\n                                    _market,\n                                    account);\n\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, account);\n        emit LogPositionUpdate(\n            account,\n            _market,\n            PositionParams({\n                isLong:position.isLong,\n                isActive:position.isActive,\n                isLiquidated:position.isLiquidated,\n                notional:position.notional,\n                collateral:position.collateral,\n                initialPrice:position.initialPrice\n            }));\n    }\n\n    function changeCollateral(IMarket _market,\n                            int256 collateral,\n                            bool isAdd) external override nonReentrant notSuspended{\n        if (isAdd){\n            TradeImpl.addCollateral(g_state,\n                            _market,\n                            collateral);\n        }else{\n            TradeImpl.removeCollateral(g_state,\n                            _market,\n                            collateral);\n        }\n\n        StorageStripsLib.Position storage position = g_state.checkPosition(_market, msg.sender);\n        emit LogPositionUpdate(\n            msg.sender,\n            _market,\n            PositionParams({\n                isLong:position.isLong,\n                isActive:position.isActive,\n                isLiquidated:position.isLiquidated,\n                notional:position.notional,\n                collateral:position.collateral,\n                initialPrice:position.initialPrice\n            }));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/impl/StripsViewImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IUniswapLpOracle } from \"../interface/IUniswapLpOracle.sol\";\n\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\nimport { IRewardable } from \"../interface/IRewardable.sol\";\n\nimport { SLPToken } from \"../token/SLPToken.sol\";\n\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { PnlLib } from \"../lib/Pnl.sol\";\nimport { StripsEvents, IStripsEvents } from \"../lib/events/Strips.sol\";\n\nlibrary StripsViewImpl {\n    using SignedBaseMath for int256;\n    using StorageStripsLib for StorageStripsLib.State;\n\n    int256 constant SECONDS_PER_YEAR = 60 *60 *24 *365;\n\n    struct InfoCalcParams {\n        uint8 pnlIndex;\n\n        uint8 stakingIndex;\n        uint8 assetIndex;\n        \n        int256 strpPrice;\n        int256 lpPrice;\n        int256 pnlWhatIf;\n    }   \n\n    event LogCheckData(\n        address indexed account,\n        address indexed market,\n        IStrips.CheckParams params\n    );\n\n    event LogAccountValue(\n        address indexed account,\n        AccountValueParams params\n    );\n\n    struct AccountValueParams {\n        int256 tradingPnl;\n        int256 stakingPnl;\n        int256 insurancePnl;\n    }\n\n    struct ExtendedMarketData {\n        bool created;\n        address market;\n    }\n\n\n    function dispatcher(\n        StorageStripsLib.State storage state,\n        IStrips.ViewActionArgs memory args\n    ) external view returns (bytes memory)\n    {\n        if (args.actionType == IStrips.ViewActionType.GetOracles){\n            return _allOracles(state);\n        }else if (args.actionType == IStrips.ViewActionType.GetMarkets){\n            return _allMarkets(state);\n        }else if (args.actionType == IStrips.ViewActionType.CalcFeeAndSlippage){\n            return calcFeeWithSlippage(state, args.data);\n        }else if (args.actionType == IStrips.ViewActionType.GetPosition){\n            return calcPositionParams(state, args.data);\n        }else if (args.actionType == IStrips.ViewActionType.CalcClose){\n            return calcCloseParams(state, args.data);\n        }else if (args.actionType == IStrips.ViewActionType.CalcRewards){\n            return calcRewards(state, args.data);\n        }else{\n            return \"\";\n        }\n    }\n\n    function _allOracles(\n        StorageStripsLib.State storage state\n    ) public view returns (bytes memory)\n    {\n        StorageStripsLib.OracleData[] memory _oracles = new StorageStripsLib.OracleData[](state.allOracles.length);\n\n        for (uint i=0; i<state.allOracles.length; i++) {\n            _oracles[i] = state.oracles[state.allOracles[i]];\n        }\n\n        return abi.encode(_oracles);\n    }\n\n    function _allMarkets(\n        StorageStripsLib.State storage state\n    ) public view returns (bytes memory)\n    {\n        ExtendedMarketData[] memory _markets = new ExtendedMarketData[](state.allMarkets.length);\n\n        for (uint i=0; i<state.allMarkets.length; i++) {\n            IMarket _address = state.allMarkets[i];\n            _markets[i].created = state.markets[_address].created;\n            _markets[i].market = address(_address);\n        }\n\n        return abi.encode(_markets);\n\n    }\n\n    /* */\n    function collateralRequired(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        address _account\n    ) external view returns (int256) {\n        StorageStripsLib.Position storage position = state.getPosition(_market, _account);\n\n        int256 total_pnl = PnlLib.calcUnrealizedPnl(state, \n                                                _market,\n                                                position,\n                                                SignedBaseMath.oneDecimal(),\n                                                false);  //based on EXIT_PRICE\n\n        return position.notional.muld(state.riskParams.liquidationMarginRatio) - total_pnl - position.collateral;\n    }\n\n    function apy(address _asset, int256 strpPrice, int256 lpPrice) public view returns (int256)\n    {\n        int256 stakingLiquidity = IStakeble(_asset).totalStaked();\n        int256 rewardsApy = 0;\n        if (stakingLiquidity != 0 && strpPrice != 0){\n            int256 stakingRewardPerSec = IRewarder(IRewardable(_asset).getRewarder()).currentStakingReward();\n\n            rewardsApy = (SECONDS_PER_YEAR.toDecimal().muld(stakingRewardPerSec.muld(strpPrice))).divd(stakingLiquidity.muld(lpPrice));\n        }\n\n        if (IStakeble(_asset).isInsurance()){\n            return rewardsApy;\n        }\n\n        (int256 usdcPnl, int256 lpPnl) = IStripsLpToken(IStakeble(_asset).getSlpToken()).totalPnl();\n        int256 lived = int256(IStakeble(_asset).liveTime());\n\n        int256 ammApy = 0;\n        int256 totalLiquidity = IMarket(_asset).getLiquidity();\n        if (totalLiquidity != 0){\n            ammApy = (SECONDS_PER_YEAR.toDecimal().divd(lived.toDecimal())).muld((usdcPnl + lpPnl.muld(lpPrice)).divd(totalLiquidity));\n        }\n\n        return rewardsApy + ammApy;\n    }\n\n    function getTradingInfo(\n        StorageStripsLib.State storage state,\n        address _account\n    ) public view returns (IStrips.TradingInfo memory tradingInfo) {\n\n        IMarket[] memory _markets = state.allMarkets;\n        require(_markets.length > 0, \"NO_MARKETS\");\n\n        InfoCalcParams memory calcParams;\n\n        tradingInfo.assetData = new IStrips.AssetData[](_markets.length + 1); // + INSURANCE\n\n        tradingInfo.positionData = new IStrips.PositionData[](_markets.length);\n        calcParams.pnlIndex = 0;\n        calcParams.assetIndex = 0;\n\n        calcParams.strpPrice = IUniswapLpOracle(state.lpOracle).strpPrice();\n        calcParams.lpPrice = IUniswapLpOracle(state.lpOracle).getPrice();\n\n        for (uint i=0; i<_markets.length; i++) {\n            tradingInfo.assetData[i].asset = address(_markets[i]);\n            tradingInfo.assetData[i].minimumMargin = state.riskParams.liquidationMarginRatio;\n\n            (tradingInfo.assetData[i].marketPrice,\n                tradingInfo.assetData[i].oraclePrice) = _markets[i].getPrices();\n            \n            tradingInfo.assetData[i].maxNotional = _markets[i].maxNotional();\n            tradingInfo.assetData[i].tvl = _markets[i].getLiquidity();\n\n            //TODO: CALC APY\n            tradingInfo.assetData[i].apy = apy(address(_markets[i]), calcParams.strpPrice, calcParams.lpPrice);\n            tradingInfo.assetData[i].isInsurance = false;\n\n            StorageStripsLib.Position storage _position = state.checkPosition(_markets[i], _account);\n            if (_position.isActive == true){\n                    (int256 total_pnl,\n                        int256 marginRatio) = PnlLib.getMarginRatio(state,\n                                                                    _markets[i], \n                                                                    _position,\n                                                                    SignedBaseMath.oneDecimal(),\n                                                                    false); // based on EXIT_PRICE\n                    calcParams.pnlWhatIf = total_pnl;\n\n                    total_pnl = PnlLib.calcUnrealizedPnl(state, \n                                                    _markets[i], \n                                                    _position, \n                                                    SignedBaseMath.oneDecimal(), \n                                                    true); // BUT pnl based on MARKET_PRICE\n                    \n                    tradingInfo.positionData[calcParams.pnlIndex++] = IStrips.PositionData(_markets[i],\n                                                                                total_pnl,\n                                                                                calcParams.pnlWhatIf,\n                                                                                marginRatio,\n                                                                                IStrips.PositionParams(\n                                                                                    _position.isLong,\n                                                                                    _position.isActive,\n                                                                                    _position.isLiquidated,\n\n                                                                                    _position.notional,\n                                                                                    _position.collateral,\n                                                                                    _position.initialPrice\n                                                                                ));\n            }\n            calcParams.assetIndex += 1;\n        }\n        \n        \n        tradingInfo.assetData[calcParams.assetIndex].asset = address(state.insuranceFund);\n        tradingInfo.assetData[calcParams.assetIndex].slpToken = IStakeble(address(state.insuranceFund)).getSlpToken();\n        tradingInfo.assetData[calcParams.assetIndex].tvl = state.insuranceFund.getLiquidity();\n        tradingInfo.assetData[calcParams.assetIndex].isInsurance = true;\n        tradingInfo.assetData[calcParams.assetIndex].minimumMargin = state.riskParams.liquidationMarginRatio;\n\n        tradingInfo.assetData[calcParams.assetIndex].apy = apy(address(state.insuranceFund), calcParams.strpPrice, calcParams.lpPrice);\n\n        calcParams.assetIndex += 1;\n    }\n\n    function getStakingInfo(\n        StorageStripsLib.State storage state,\n        address _account\n    ) public view returns (IStrips.StakingInfo memory stakingInfo) {\n        \n        IMarket[] memory _markets = state.allMarkets;\n        require(_markets.length > 0, \"NO_MARKETS\");\n        InfoCalcParams memory calcParams;\n\n        stakingInfo.assetData = new IStrips.AssetData[](_markets.length + 1); //+ Insurance\n\n        stakingInfo.stakingData = new IStrips.StakingData[](_markets.length + 1); //+ Insurance\n        calcParams.stakingIndex = 0;\n        calcParams.assetIndex = 0;\n        \n        calcParams.strpPrice = IUniswapLpOracle(state.lpOracle).strpPrice();\n        calcParams.lpPrice = IUniswapLpOracle(state.lpOracle).getPrice();\n\n        for (uint i=0; i<_markets.length; i++) {\n            stakingInfo.assetData[i].asset = address(_markets[i]);\n            stakingInfo.assetData[i].minimumMargin = state.riskParams.liquidationMarginRatio;\n\n            (stakingInfo.assetData[i].marketPrice,\n                stakingInfo.assetData[i].oraclePrice) = _markets[i].getPrices();\n            \n            stakingInfo.assetData[i].maxNotional = _markets[i].maxNotional();\n            stakingInfo.assetData[i].tvl = _markets[i].getLiquidity();\n            stakingInfo.assetData[i].isInsurance = false;\n            \n            stakingInfo.assetData[i].apy = apy(address(_markets[i]), calcParams.strpPrice, calcParams.lpPrice);\n\n            address slpToken = IStakeble(address(_markets[i])).getSlpToken();\n            stakingInfo.assetData[i].slpToken = slpToken;\n            uint256 slpAmount = IStripsLpToken(slpToken).balanceOf(_account);\n            if (slpAmount > 0){\n                IStripsLpToken.ProfitParams memory profit = IStripsLpToken(slpToken).calcProfit(_account, slpAmount);\n\n                stakingInfo.stakingData[calcParams.stakingIndex].asset = address(_markets[i]);\n                stakingInfo.stakingData[calcParams.stakingIndex].totalStaked = profit.totalStaked;\n                \n                calcParams.stakingIndex += 1;\n            }\n\n            calcParams.assetIndex += 1;\n        }\n\n        address sipToken = IStakeble(address(state.insuranceFund)).getSlpToken();\n        \n        stakingInfo.assetData[calcParams.assetIndex].asset = address(state.insuranceFund);\n        stakingInfo.assetData[calcParams.assetIndex].slpToken = sipToken;\n        stakingInfo.assetData[calcParams.assetIndex].tvl = state.insuranceFund.getLiquidity();\n        stakingInfo.assetData[calcParams.assetIndex].isInsurance = true;\n        stakingInfo.assetData[calcParams.assetIndex].minimumMargin = state.riskParams.liquidationMarginRatio;\n        \n        stakingInfo.assetData[calcParams.assetIndex].apy = apy(address(state.insuranceFund), calcParams.strpPrice, calcParams.lpPrice);\n\n        uint256 sipAmount = IStripsLpToken(sipToken).balanceOf(_account);\n        if (sipAmount > 0){\n            IStripsLpToken.ProfitParams memory profit = IStripsLpToken(sipToken).calcProfit(_account, sipAmount);\n\n            stakingInfo.stakingData[calcParams.stakingIndex].asset = address(state.insuranceFund);\n            stakingInfo.stakingData[calcParams.stakingIndex].totalStaked = profit.totalStaked;\n            \n            calcParams.stakingIndex += 1;\n        }\n    }\n\n    function getAllInfo(\n        StorageStripsLib.State storage state,\n        address _account\n    ) external view returns (IStrips.AllInfo memory allInfo) {\n        /*\n        allInfo.tradingInfo = getTradingInfo(state, _account);\n        allInfo.stakingInfo = getStakingInfo(state, _account);\n        */\n    }\n\n    function calcFeeWithSlippage(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public view returns (bytes memory) {\n        IStrips.FeeAndSlippageParams memory params = abi.decode(data, (IStrips.FeeAndSlippageParams));\n\n        IStrips.FeeAndSlippageData memory data;\n\n        data.market = params.market;\n        (data.marketRate,\n            data.oracleRate) = IMarket(params.market).getPrices();\n\n        data.whatIfPrice = IMarket(params.market).priceChange(params.notional, params.isLong);\n\n        (int256 marketFee, \n            int256 insuranceFee,\n            int256 daoFee) = PnlLib.calcPositionFee(state,\n                                                    params.notional, \n                                                    data.whatIfPrice);\n        \n        // 1.1 buffer\n        data.fee = (marketFee + insuranceFee + daoFee).muld(110 * SignedBaseMath.onePercent());\n        data.slippage = (data.whatIfPrice - data.marketRate).divd(data.marketRate);\n        if (data.slippage < 0){\n            data.slippage *= -1;\n        }\n\n        data.minimumMargin = state.riskParams.liquidationMarginRatio;\n\n        int256 estimatedTradingPnl = params.notional.muld(data.marketRate - data.whatIfPrice).divd(data.marketRate);\n        if (params.isLong == false) {\n            /*If it's short don't forget to change the sign */\n            estimatedTradingPnl *= -1;\n        }\n        data.estimatedMargin = (params.collateral + estimatedTradingPnl).divd(params.notional);\n\n        return abi.encode(data);\n    }\n\n    function calcPositionParams(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public view returns (bytes memory)\n    {       \n        IStrips.GetPositionParams memory params = abi.decode(data, (IStrips.GetPositionParams));  \n        StorageStripsLib.Position storage _position = state.getPosition(IMarket(params.market), params.account);\n\n        IStrips.PositionData memory data;\n        data.market = IMarket(params.market);\n        data.positionParams = IStrips.PositionParams({\n            isLong: _position.isLong,\n            isActive: _position.isActive,\n            isLiquidated: _position.isLiquidated,\n            notional: _position.notional,\n            collateral: _position.collateral,\n            initialPrice: _position.initialPrice\n        });\n\n        (,,data.pnl) = PnlLib.calcPnlParts(state, \n                                            IMarket(params.market), \n                                            _position,\n                                            SignedBaseMath.oneDecimal(),\n                                            true);\n        (data.pnlWhatIf, data.marginRatio) = PnlLib.getMarginRatio(state,\n                                                    IMarket(params.market),\n                                                    _position,\n                                                    SignedBaseMath.oneDecimal(),\n                                                    false);\n\n        return abi.encode(data);\n    }\n\n    function calcCloseParams(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public view returns (bytes memory)\n    {  \n        IStrips.CalcCloseParams memory params = abi.decode(data, (IStrips.CalcCloseParams));\n        require(params.closeRatio > 0 && params.closeRatio <= SignedBaseMath.oneDecimal(), \"WRONG_RATIO\");\n\n        IStrips.CalcCloseData memory data;\n        data.market = params.market;\n        data.minimumMargin = state.riskParams.liquidationMarginRatio;\n\n        StorageStripsLib.Position storage position = state.getPosition(IMarket(params.market), \n                                                                       params.account);\n\n\n        (data.pnl, \n            data.marginLeft) = PnlLib.getMarginRatio(state, \n                                                    IMarket(params.market), \n                                                    position, \n                                                    params.closeRatio, \n                                                    false);\n        \n        //Calc fee for partly close position\n        int256 notional = position.notional;\n        if (params.closeRatio != SignedBaseMath.oneDecimal()){\n            notional = notional.muld(params.closeRatio);\n        }\n\n        int256 currentPrice = IMarket(params.market).currentPrice();\n        data.whatIfPrice = IMarket(params.market).priceChange(0 - notional, \n                                                                position.isLong);\n        \n        data.slippage = (data.whatIfPrice - currentPrice).divd(currentPrice);\n        if (data.slippage < 0){\n            data.slippage *= - 1;\n        }\n\n        (int256 marketFee, \n            int256 insuranceFee,\n            int256 daoFee) = PnlLib.calcPositionFee(state, \n                                                        notional, \n                                                        data.whatIfPrice); \n\n        data.fee = marketFee + insuranceFee + daoFee;\n\n        return abi.encode(data);\n    }\n\n    function calcRewards(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public view returns (bytes memory)\n    {  \n        IStrips.CalcRewardsParams memory params = abi.decode(data, (IStrips.CalcRewardsParams));\n        require(params.account != address(0), \"WRONG_ACCOUNT\");\n        \n        IStrips.CalcRewardsData memory data;\n        data.account = params.account;\n        data.rewardsTotal = 0;\n\n        IMarket[] memory _markets = state.allMarkets;\n        require(_markets.length > 0, \"NO_MARKETS\");\n        \n        /*\n            Calc rewards for Insurance\n         */\n        if (IStakeble(address(state.insuranceFund)).isRewardable()){\n            address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\n\n            data.rewardsTotal += IRewarder(rewarder).totalStakerReward(params.account);\n        }\n\n        /*\n            Calc rewards for Markets\n        */\n        for (uint i=0; i<_markets.length; i++) {\n            if (IStakeble(address(_markets[i])).isRewardable() == false){\n                continue;\n            }\n            address rewarder = IRewardable(address(_markets[i])).getRewarder();\n            \n            data.rewardsTotal += IRewarder(rewarder).totalTradeReward(params.account);\n            data.rewardsTotal += IRewarder(rewarder).totalStakerReward(params.account);\n\n        }\n\n\n        return abi.encode(data);\n    }\n\n}\n\n"
    },
    "contracts/impl/StripsAdminImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\n\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\n\n\nlibrary StripsAdminImpl {\n    using SignedBaseMath for int256;\n    using StorageStripsLib for StorageStripsLib.State;\n\n    event LogNewMarket(\n        address indexed market\n    );\n\n\n    function dispatcher(\n        StorageStripsLib.State storage state,\n        IStrips.AdminActionArgs memory args\n    ) external\n    {\n        if (args.actionType == IStrips.AdminActionType.AddMarket){\n            _addMarket(state, args.data);\n        }else if (args.actionType == IStrips.AdminActionType.AddOracle){\n            _addOracle(state, args.data);\n        }else if (args.actionType == IStrips.AdminActionType.RemoveOracle){\n            _removeOracle(state, args.data);\n        }else if (args.actionType == IStrips.AdminActionType.ChangeOracle){\n            _changeOracleReward(state, args.data);\n        }else if (args.actionType == IStrips.AdminActionType.SetInsurance){\n            _setInsurance(state, args.data);\n        }else if (args.actionType == IStrips.AdminActionType.ChangeRisk){\n            _changeRiskParams(state, args.data);\n        }else {\n            require(true == false, \"UNKNOWN_ACTIONTYPE\");\n        }\n    }\n\n\n    function _addMarket(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public {\n        IStrips.AddMarketParams memory params = abi.decode(data, (IStrips.AddMarketParams));\n\n        state.addMarket(IMarket(params.market));\n\n        emit LogNewMarket(params.market);\n    }\n\n    function _addOracle(StorageStripsLib.State storage state,\n                        bytes memory data) public\n    {\n        IStrips.AddOracleParams memory params = abi.decode(data, (IStrips.AddOracleParams));\n\n        state.addOracle(params.oracle,\n                        params.keeperReward);\n    }\n\n    function _removeOracle(StorageStripsLib.State storage state,\n                            bytes memory data) public\n    {\n        IStrips.RemoveOracleParams memory params = abi.decode(data, (IStrips.RemoveOracleParams));\n\n        state.removeOracle(params.oracle);\n    }\n\n\n    function _changeOracleReward(StorageStripsLib.State storage state,\n                                bytes memory data) public\n    {\n        IStrips.ChangeOracleParams memory params = abi.decode(data, (IStrips.ChangeOracleParams));\n\n        state.changeOracleReward(params.oracle,\n                                    params.newReward);\n    }\n\n    function _setInsurance(StorageStripsLib.State storage state,\n                            bytes memory data) public\n    {\n        IStrips.SetInsuranceParams memory params = abi.decode(data, (IStrips.SetInsuranceParams));\n\n        state.setInsurance(IInsuranceFund(params.insurance));\n\n    }\n\n    function _changeRiskParams(StorageStripsLib.State storage state,\n                                bytes memory data) public\n    {\n        IStrips.ChangeRiskParams memory params = abi.decode(data, (IStrips.ChangeRiskParams));\n        state.setRiskParams(params.riskParams);\n    }\n}"
    },
    "contracts/impl/StripsStateImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IUniswapLpOracle } from \"../interface/IUniswapLpOracle.sol\";\n\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\nimport { IRewarder } from \"../interface/IRewarder.sol\";\nimport { IRewardable } from \"../interface/IRewardable.sol\";\n\nimport { SLPToken } from \"../token/SLPToken.sol\";\n\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { PnlLib } from \"../lib/Pnl.sol\";\nimport { StripsEvents, IStripsEvents } from \"../lib/events/Strips.sol\";\n\n\nlibrary StripsStateImpl {\n    using SignedBaseMath for int256;\n    using StorageStripsLib for StorageStripsLib.State;\n\n    function dispatcher(\n        StorageStripsLib.State storage state,\n        IStrips.StateActionArgs memory args\n    ) external \n    {\n        if (args.actionType == IStrips.StateActionType.ClaimRewards){\n            claimRewards(state, args.data);\n        }\n    }\n\n    function claimRewards(\n        StorageStripsLib.State storage state,\n        bytes memory data\n    ) public {\n        IStrips.ClaimRewardsParams memory params = abi.decode(data, (IStrips.ClaimRewardsParams));\n        require(params.account != address(0), \"BROKEN_ACCOUNT\");\n\n        IMarket[] memory _markets = state.allMarkets;\n        require(_markets.length > 0, \"NO_MARKETS\");\n        \n        /*\n            Claim rewards for Insurance\n         */\n        if (IStakeble(address(state.insuranceFund)).isRewardable()){\n            address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\n            IRewarder(rewarder).claimStakingReward(params.account);\n        }\n\n        /*\n            Calc rewards for Markets\n        */\n        for (uint i=0; i<_markets.length; i++) {\n            if (IStakeble(address(_markets[i])).isRewardable() == false){\n                continue;\n            }\n            address rewarder = IRewardable(address(_markets[i])).getRewarder();\n            \n            IRewarder(rewarder).claimStakingReward(params.account);\n            IRewarder(rewarder).claimTradingReward(params.account);\n        }\n    }\n\n    function _payKeeperReward(StorageStripsLib.State storage state,\n                                address keeper) external \n    {\n        //TODO: implement\n    }\n\n\n    /*\n        Info for testing models\n     */\n\n    function _check_trader(\n        StorageStripsLib.State storage state,\n        address _trader,\n        IMarket _market) external \n    {\n        IStripsEvents.CheckParams memory _checkParams;\n\n        /*Calc market info first */\n        (_checkParams.marketPrice,\n            _checkParams.oraclePrice) = _market.getPrices();\n\n        _checkParams.uniLpPrice = IUniswapLpOracle(_market.getPairOracle()).getPrice();\n\n\n        /*Market params */\n        StorageStripsLib.Position storage _ammPosition = state.checkPosition(_market, address(_market));\n\n        if (_ammPosition.isActive){\n            _checkParams.ammIsLong = _ammPosition.isLong;\n            _checkParams.ammNotional = _ammPosition.notional;\n            _checkParams.ammInitialPrice = _ammPosition.initialPrice;\n            _checkParams.ammEntryPrice = _ammPosition.entryPrice;\n\n            _checkParams.ammTotalLiquidity = _market.getLiquidity();\n            (_checkParams.ammTradingLiquidity,\n                _checkParams.ammStakingLiquidity) = _market.getPartedLiquidity();\n\n            (_checkParams.ammFundingPnl,\n                _checkParams.ammTradingPnl,\n                _checkParams.ammTotalPnl) = PnlLib.getAmmAllPnl(state, _market, _ammPosition);\n        }\n\n        /* Is trader a staker also? */\n        address slpToken = IStakeble(address(_market)).getSlpToken();\n        if (IStripsLpToken(slpToken).balanceOf(_trader) > 0){\n          (,\n            _checkParams.stakerInitialStakingPnl,\n            _checkParams.stakerInitialTradingPnl,\n            _checkParams.stakerInitialBlockNum,\n            ,\n            _checkParams.stakerUnrealizedStakingProfit,\n            _checkParams.stakerUnrealizedTradingProfit)  = SLPToken(slpToken).stakers(_trader);\n        }\n\n        _checkParams.slpTotalSupply = int256(IStripsLpToken(slpToken).totalSupply());\n\n        _checkParams.slpTradingCummulativePnl = SLPToken(slpToken).cummulativeTradingPnl();\n        _checkParams.slpStakingCummulativePnl = SLPToken(slpToken).cummulativeStakingPnl();\n\n        _checkParams.slpTradingPnl = SLPToken(slpToken).cumTradingPNL();\n        _checkParams.slpStakingPnl = SLPToken(slpToken).cumStakingPNL();\n\n        (int256 accumulatedTradingPnl,) = SLPToken(slpToken).tradingPnl();\n        (int256 accumulatedStakingPnl,) = SLPToken(slpToken).stakingPnl();\n\n        _checkParams.slpTradingPnlGrowth = accumulatedTradingPnl - SLPToken(slpToken).prevTradingPnl();\n        _checkParams.slpStakingPnlGrowth = accumulatedStakingPnl - SLPToken(slpToken).prevStakingPnl();\n\n        /*\n            if it's market - just add additional integrity check\n        */\n        if (address(_market) == _trader){\n\n            address[] memory allAccounts = state.allAccounts;\n            for (uint i = 0; i < allAccounts.length; i++){\n                if (allAccounts[i] == address(_market)){\n                    continue;\n                }\n\n                StorageStripsLib.Position storage _position = state.checkPosition(_market, allAccounts[i]);\n                if (_position.isActive == true){\n                    int256 totalPnl;\n                    (,,totalPnl) = PnlLib.getAllUnrealizedPnl(state, \n                                                        _market, \n                                                        _position, \n                                                        SignedBaseMath.oneDecimal(), \n                                                        true); // BUT pnl based on MARKET_PRICE\n\n                    _checkParams.tradersTotalPnl += totalPnl;\n                }\n            }\n        }else{\n\n            StorageStripsLib.Position storage _traderPosition = state.checkPosition(_market, _trader);\n            if (_traderPosition.isActive){\n\n                _checkParams.isLong = _traderPosition.isLong;\n                _checkParams.collateral = _traderPosition.collateral;\n                _checkParams.notional = _traderPosition.notional;\n                _checkParams.initialPrice = _traderPosition.initialPrice;\n                _checkParams.entryPrice = _traderPosition.entryPrice;\n\n                (,_checkParams.marginRatio) = PnlLib.getMarginRatio(state,\n                                                                    _market, \n                                                                    _traderPosition,\n                                                                    SignedBaseMath.oneDecimal(),\n                                                                    false); // based on EXIT_PRICE\n                (_checkParams.fundingPnl,\n                    _checkParams.tradingPnl,\n                    _checkParams.totalPnl) = PnlLib.getAllUnrealizedPnl(state, \n                                                            _market, \n                                                            _traderPosition, \n                                                            SignedBaseMath.oneDecimal(), \n                                                        true); // BUT pnl based on MARKET_PRICE\n            }\n\n                /*Add insurance staking rewards first */\n                if (IStakeble(address(state.insuranceFund)).isRewardable()){\n                    address rewarder = IRewardable(address(state.insuranceFund)).getRewarder();\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\n                }\n\n                /*Calc rewards separately trading + staking for all markets */\n\n                if (IStakeble(address(_market)).isRewardable()){\n                    address rewarder = IRewardable(address(_market)).getRewarder();\n\n                    _checkParams.tradingRewardsTotal += IRewarder(rewarder).totalTradeReward(_trader);\n                    _checkParams.stakingRewardsTotal += IRewarder(rewarder).totalStakerReward(_trader);\n\n                }\n                \n        }\n\n\n\n        StripsEvents.logCheckData(_trader, address(_market), _checkParams);\n    } \n\n    function _check_insurance(\n        StorageStripsLib.State storage state) external \n    {\n        IStripsEvents.CheckInsuranceParams memory _checkParams;\n\n        address _insurance = address(state.insuranceFund);\n        address sipToken = IStakeble(_insurance).getSlpToken();\n        _checkParams.sipTotalSupply = IStripsLpToken(sipToken).totalSupply();\n\n        (_checkParams.usdcLiquidity,\n            _checkParams.lpLiquidity) = IInsuranceFund(_insurance).getPartedLiquidity();\n\n\n        StripsEvents.logCheckInsuranceData(_insurance, _checkParams);\n    }\n}\n\n"
    },
    "contracts/impl/TradeImpl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\n\nimport { IRewarder } from \"../interface/IRewarder.sol\";\nimport { IRewardable } from \"../interface/IRewardable.sol\";\nimport { IStakeble } from \"../interface/IStakeble.sol\";\n\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { PnlLib } from \"../lib/Pnl.sol\";\n\nlibrary TradeImpl {\n    using SignedBaseMath for int256;\n    using StorageStripsLib for StorageStripsLib.State;\n\n    //against stack too deep error\n    struct PositionParams {\n        IMarket _market;\n        address _account;\n        int256 _collateral;\n        int256 _leverage;\n        bool _isLong;\n        int256 _slippage;\n    }\n\n    struct TraderUpdate{\n        int256 _notional;\n        int256 _initialPrice;\n        int256 _fundingPaid;\n        bool _isActive;\n        bool _isLong;\n    }\n\n    struct PosInfo{\n        int256 _notional;\n        int256 _collateral;\n        int256 _unrealizedPnl;\n        int256 _priceBeforeChange;\n    }\n\n    function openPosition(\n        StorageStripsLib.State storage state,\n        PositionParams memory posParams\n    ) public {        \n        require(posParams._collateral > 0, \"COLLATERAL_LEQ_0\");\n\n        StorageStripsLib.Position storage prevPosition = state.checkPosition(posParams._market, posParams._account);\n        \n        require(prevPosition.lastChangeBlock != block.number, \"SAME_BLOCK_ACTION_DENIED\");\n\n        int256 slippage = 0;\n        int256 rewardedNotional = posParams._collateral * posParams._leverage;\n\n        if (prevPosition.isActive == false){\n            //There is no active position - just open new\n           slippage = _open(state,\n                                posParams,\n                                false);  //not merge\n        }else{\n            if (posParams._isLong != prevPosition.isLong){    // opposite?\n                \n                //check if it's opposite close\n                int256 notional = posParams._collateral * posParams._leverage;\n                if (notional == prevPosition.notional){     // the same but opposite, just close current\n                    slippage = _liquidateWholeOrCloseRatio(state,\n                                                prevPosition,\n                                                posParams._market,\n                                                SignedBaseMath.oneDecimal());\n                }else{  //netting\n                    slippage = _netPosition(state,\n                        posParams,\n                        prevPosition\n                    );\n\n                }\n            }else{  //the same side, it's aggregation\n                slippage = _aggregate(state, \n                            posParams,\n                            prevPosition);\n            }\n        }\n        _requireSlippage(posParams._slippage, slippage);\n\n        if (IStakeble(address(posParams._market)).isRewardable()){\n            address rewarder = IRewardable(address(posParams._market)).getRewarder();\n            IRewarder(rewarder).rewardTrader(posParams._account, rewardedNotional);\n        }\n    }\n\n\n\n    function closePosition(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        int256 _closeRatio,\n        int256 _slippage\n    ) public {\n        require(_closeRatio > 0 && _closeRatio <= SignedBaseMath.oneDecimal(), \"WRONG_CLOSE_RATIO\");\n\n        StorageStripsLib.Position storage position = state.getPosition(_market,\n                                                                        msg.sender);\n        \n        int256 notional = position.notional;\n        require(position.lastChangeBlock != block.number, \"SAME_BLOCK_ACTION_DENIED\");\n\n        //ALWAYS check the full position first\n        _requireMargin(state, \n                position, \n                _market,\n                SignedBaseMath.oneDecimal());\n\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\n            notional = notional.muld(_closeRatio);\n        }\n\n        int256 slippage = _close(state,\n                                position,\n                                _market,\n                                _closeRatio);\n\n        _requireSlippage(_slippage, slippage);\n        if (IStakeble(address(_market)).isRewardable()){\n            address rewarder = IRewardable(address(_market)).getRewarder();\n            IRewarder(rewarder).rewardTrader(msg.sender, notional);\n        }\n\n        if (position.isActive){\n            _requireMargin(state, \n                    position, \n                    _market,\n                    SignedBaseMath.oneDecimal());\n        }\n    }\n\n\n    function liquidatePosition(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        address account\n    ) public {\n        //trader can't liquidate it's own position\n        require(account != msg.sender, \"TRADER_CANTBE_LIQUIDATOR\");\n\n        StorageStripsLib.Position storage position = state.getPosition(_market,\n                                                                        account);\n\n\n        (int256 total_pnl,\n         int256 marginRatio) = PnlLib.getMarginRatio(state,\n                                                    _market,\n                                                    position,\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\n                                                    false);  // based on Exit price\n                \n        require(marginRatio <= state.getLiquidationRatio(), \"MARGIN_OK\");\n        \n\n        _liquidate(state,\n                    _market,\n                    msg.sender,\n                    position);\n    }\n\n\n    function addCollateral(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        int256 collateral\n    ) internal {\n        require(collateral > 0, \"COLLATERAL_LT_0\");\n\n        StorageStripsLib.Position storage position = state.getPosition(_market,\n                                                                        msg.sender);\n\n                //Get collateral on STRIPS balance\n        _receiveCollateral(state,\n                            msg.sender, \n                            collateral);\n\n        state.addCollateral(position,\n                            collateral);\n\n        _requireMargin(state,\n                        position,\n                        _market,\n                        SignedBaseMath.oneDecimal());\n    }\n\n    function removeCollateral(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        int256 collateral\n    ) internal {\n        require(collateral > 0, \"COLLATERAL_LT_0\");\n\n        StorageStripsLib.Position storage position = state.getPosition(_market,\n                                                                        msg.sender);\n\n        require(collateral < position.collateral, \"CANT_REMOVE_ALL\");\n\n        state.removeCollateral(position, \n                                collateral);\n\n        _returnCollateral(state,\n                            msg.sender, \n                            collateral);\n        \n        _requireMargin(state,\n                        position,\n                        _market,\n                        SignedBaseMath.oneDecimal());\n\n    }\n\n    /*\n    **************************************************************************\n    *   Different netting AMM scenarios and Unrealized PNL\n     **************************************************************************\n    */\n\n    function ammPositionUpdate(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        TraderUpdate memory _traderUpdate\n    ) private {\n        StorageStripsLib.Position storage ammPosition = state.checkPosition(_market, address(_market));\n\n        if (ammPosition.isActive == false){\n            if (_traderUpdate._isActive == false){\n                //trader closed the position, and we didn't have amm position\n                return; // do nothing\n            }\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\n\n            //it's the new position, just open\n            state.setPosition(\n                _market, \n                address(_market), \n                traderRevertedSide,  //revert position \n                0,                      // for amm we don't have collateral \n                _traderUpdate._notional, \n                _traderUpdate._initialPrice, \n                false);\n        }else{\n            _ammCummulateFundingPnl(state, \n                                    ammPosition,\n                                    _market);\n\n            int256 ammNotional = ammPosition.notional;\n            int256 ammUpdatedNotional = ammNotional;\n            \n            bool ammSide = ammPosition.isLong;\n            bool newSide = ammSide;\n\n            bool traderRevertedSide = !_traderUpdate._isLong; //here for not too deep stack error\n\n            int256 closeNotional = _traderUpdate._notional;\n            if (_traderUpdate._isActive == false){\n                closeNotional *= -1;\n            }\n\n            //Trader open/change position\n            if (ammSide == traderRevertedSide){\n                //the same side\n                ammUpdatedNotional += closeNotional;\n                if (ammUpdatedNotional < 0){\n                    ammUpdatedNotional *= -1;\n                    newSide = !ammSide;\n                }\n            }else{\n                int256 diff = ammNotional - closeNotional;        \n            \n                if (diff >= 0){\n                    //the same side\n                    ammUpdatedNotional = diff;\n                } else {\n                    //change side\n                    ammUpdatedNotional = 0 - diff; \n                    newSide = !ammSide;\n                }\n            }\n\n            if (_traderUpdate._isActive == false){\n                ammPosition.unrealizedPnl += _traderUpdate._fundingPaid;\n            }\n\n            int256 t = _traderUpdate._notional.muld(_traderUpdate._initialPrice);\n            if (_traderUpdate._isActive == true && _traderUpdate._isLong == false){\n                t *= -1;\n            }else if(_traderUpdate._isActive == false && _traderUpdate._isLong == true){\n                t *= -1;\n            }\n\n            if (ammUpdatedNotional != 0){\n\n                //Last time it was closed\n                int256 a = ammPosition.initialPrice.muld(ammNotional);\n                if (ammNotional == 0){\n                    a = ammPosition.zeroParameter;\n                }else{\n                    if (ammSide == false){\n                        a *= -1;\n                    }\n                }\n\n\n                int256 divTo = ammUpdatedNotional;\n                if (newSide == false){\n                    divTo *= -1;\n                }\n\n                ammPosition.initialPrice = (a - t).divd(divTo);\n            }else{\n                \n                int256 mulTo = ammNotional;\n                if (ammSide == false){\n                    mulTo *= -1;\n                }\n                ammPosition.savedTradingPnl = (_traderUpdate._initialPrice - ammPosition.initialPrice).muld(mulTo).divd(_traderUpdate._initialPrice);\n                ammPosition.zeroParameter = ammPosition.initialPrice.muld(mulTo) - t; \n            }\n\n    \n            ammPosition.notional = ammUpdatedNotional;\n            ammPosition.isLong = newSide;\n        }\n    }\n\n    \n    function _ammCummulateFundingPnl(\n        StorageStripsLib.State storage state,\n        StorageStripsLib.Position storage ammPosition,\n        IMarket _market\n    ) private {\n        //ONLY once pre block\n        if (ammPosition.initialBlockNumber == block.number){\n            return;\n        }\n        ammPosition.initialBlockNumber = block.number;\n\n\n        ammPosition.lastNotional = ammPosition.notional;\n        ammPosition.lastIsLong = ammPosition.isLong;\n        ammPosition.lastInitialPrice = ammPosition.initialPrice;\n\n        ammPosition.unrealizedPnl = PnlLib.getAmmFundingPnl(state, \n                                                            _market, \n                                                            ammPosition);\n        \n        ammPosition.initialTimestamp = block.timestamp;\n        ammPosition.cummulativeIndex = _market.currentOracleIndex();\n\n    }\n\n\n\n    /*\n    **************************************************************************\n    *   Different netting scenarios\n    **************************************************************************\n    */\n\n    function _netPosition(\n        StorageStripsLib.State storage state,\n        PositionParams memory posParams,\n        StorageStripsLib.Position storage prevPosition\n    ) private returns (int256) {\n        int256 notional = posParams._collateral * posParams._leverage;\n        int256 prevNotional = prevPosition.notional;\n        int256 diff = notional - prevNotional;\n        // Is itpartly close?\n        if (diff < 0){\n            int256 closeRatio = notional.divd(prevNotional);\n\n            // If position for liquidation, the AMM will liquidate it\n            // In other way it will be partly close\n            return _liquidateWholeOrCloseRatio(state,\n                                        prevPosition,\n                                        posParams._market,\n                                        closeRatio);\n        }\n\n\n        // Is the new position bigger?\n        if (diff > 0){\n\n            //STEP 1: close prev(long10: return collateral+profit)\n            int256 slippage = _liquidateWholeOrCloseRatio(state,\n                                        prevPosition,\n                                        posParams._market,\n                                        SignedBaseMath.oneDecimal());\n            /*\n            *   open short(5K)\n            *   We need to save the same proportion\n            *   diff / (collateral - x) = leverage\n            *   \n            *   x = collateral - diff/leverage\n            *   adjCollateral = collateral - collateral + diff/leverage = difd/leverage \n            */\n            posParams._collateral = diff.divd(posParams._leverage.toDecimal());\n\n            slippage += _open(state, \n                                posParams, \n                                false);  //not a merge\n            \n            return slippage;\n        }\n\n        require(true == false, \"UNKNOWN_NETTING\");\n    }\n\n\n    function _aggregate(\n        StorageStripsLib.State storage state,\n        PositionParams memory posParams,\n        StorageStripsLib.Position storage prevPosition\n    ) private returns (int256) {\n        //We save ONLY funding_pnl\n        prevPosition.unrealizedPnl += PnlLib.getFundingUnrealizedPnl(state, \n                                                            posParams._market, \n                                                            prevPosition, \n                                                            SignedBaseMath.oneDecimal(), \n                                                            true);  //based on CURRENT_MARKET_PRICE\n        return _open(state,\n                    posParams,\n                    true);  // it's a merge\n    }\n\n\n    function _liquidateWholeOrCloseRatio(\n        StorageStripsLib.State storage state,\n        StorageStripsLib.Position storage _position,\n        IMarket _market,\n        int256 _closeRatio\n    ) private returns (int256 slippage){\n\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\n                                                    _market,\n                                                    _position,\n                                                    SignedBaseMath.oneDecimal(),          // you can't partly close if full position is for liquidation\n                                                    false); // Based on exit price\n\n\n        if (marginRatio <= state.getLiquidationRatio()){\n            //If it's opposite close we can liquidate\n            _liquidate(state,\n                        _market,\n                        address(_market),\n                        _position\n            );\n            slippage = 0;\n        }else{\n            slippage = _close(state,\n                                    _position,\n                                    _market,\n                                    _closeRatio); //the whole position\n        }\n    }\n\n\n    /*\n    ****************************************************\n    * OPEN/CLOSE/LIQUIDATE implementation\n    ****************************************************\n    */\n\n    //not safe, all checks should be outside\n    function _close(\n        StorageStripsLib.State storage state,\n        StorageStripsLib.Position storage position,\n        IMarket _market,\n        int256 _closeRatio\n    ) private returns (int256 slippage) {\n        //we need to use closePrice here after the position will be closed\n        (int256 funding_pnl,\n        int256 trading_pnl,\n        int256 traderPnl) = PnlLib.getAllUnrealizedPnl(state,\n                                                    _market,\n                                                    position,\n                                                    _closeRatio,\n                                                    false);\n\n        int256 marketPnl = 0 - traderPnl;\n\n\n        PosInfo memory pos_info = PosInfo({\n            _notional:position.notional,\n            _collateral:position.collateral,\n            _unrealizedPnl:position.unrealizedPnl,\n            _priceBeforeChange:_market.currentPrice()\n        });\n\n        if (_closeRatio != SignedBaseMath.oneDecimal()){\n            pos_info._notional = pos_info._notional.muld(_closeRatio);\n            pos_info._collateral = pos_info._collateral.muld(_closeRatio);\n            pos_info._unrealizedPnl = pos_info._unrealizedPnl.muld(_closeRatio);\n        }\n\n        int256 closePrice = _market.closePosition(position.isLong, \n                                                    pos_info._notional);\n        slippage = (closePrice - pos_info._priceBeforeChange).divd(pos_info._priceBeforeChange);\n        if (slippage < 0){\n            slippage *= -1;\n        }\n\n\n        // something went wrong, don't allow close positions\n        require(closePrice > 0, \"CLOSEPRICE_BROKEN\");\n\n        //Pay position Fee\n        //expectedClosePrice\n        _payPositionFee(state,\n                        _market, \n                        msg.sender, \n                        pos_info._notional, \n                        closePrice);\n\n\n        if (marketPnl > 0){\n            //PROFIT: trader pays to Market from collateral\n\n            if (marketPnl > pos_info._collateral){\n                marketPnl = pos_info._collateral;\n            }\n\n            _payProfitOnPositionClose(state,\n                                    _market,\n                                    address(this),\n                                    marketPnl);\n            int256 left = pos_info._collateral - marketPnl;\n            if (left > 0){\n                _returnCollateral(state,\n                                    msg.sender, \n                                    left);\n            }\n        }\n        else if (marketPnl < 0){\n            //LOSS: market pays to trader from liquidity\n\n            int256 liquidity = _market.getLiquidity();\n            if (liquidity < traderPnl){\n                int256 debt = traderPnl - liquidity;\n                _borrowInsurance(state,\n                                    address(_market), \n                                    debt);\n            }\n\n            state.withdrawFromMarket(_market,\n                                        msg.sender,\n                                        traderPnl);\n            _returnCollateral(state,\n                                msg.sender,\n                                pos_info._collateral);\n        }\n        else if (marketPnl == 0){\n            //ZERO: just return collateral to trader\n            _returnCollateral(state,\n                                msg.sender,\n                                pos_info._collateral);\n        }\n\n\n        int256 paid_funding = funding_pnl;\n        if (position.isLong == false){\n            paid_funding*= -1;\n        }\n\n        ammPositionUpdate(state,\n                _market,\n                TraderUpdate({\n                    _notional:pos_info._notional,\n                    _isLong: position.isLong,\n                    _initialPrice:position.initialPrice,\n                    _fundingPaid:paid_funding,\n                    _isActive:false\n                }));\n\n        _unsetPostion(state,\n                    position,\n                    pos_info._notional,\n                    pos_info._collateral,\n                    _closeRatio,\n                    pos_info._unrealizedPnl);\n    }\n\n    function _open(\n        StorageStripsLib.State storage state,\n        PositionParams memory posParams,\n        bool merge\n    ) private returns (int256 slippage) {\n        int256 notional = posParams._collateral * posParams._leverage;\n\n        _requireNotional(posParams._market,\n                        notional);\n\n        int256 currentPrice = posParams._market.currentPrice();\n        int256 openPrice = posParams._market.openPosition(posParams._isLong, notional);\n\n        slippage = (openPrice - currentPrice).divd(currentPrice);\n        if (slippage < 0){\n            slippage *= -1;\n        }\n\n        // something went wrong, don't allow open positions\n        require(openPrice > 0, \"OPEN_PRICE_LTE_0\");\n        \n        state.setPosition(\n            posParams._market,\n            posParams._account,\n            posParams._isLong,\n            posParams._collateral,\n            notional,\n            openPrice,\n            merge\n        );\n\n    \n\n        //Get collateral on STRIPS balance\n        _receiveCollateral(state,\n                            posParams._account, \n                            posParams._collateral);\n\n        //Send fee to Market and Insurance Balance, it will change liquidity\n        _payPositionFee(state,\n                        posParams._market, \n                        posParams._account, \n                        notional, \n                        openPrice);\n        \n        StorageStripsLib.Position storage position = state.getPosition(posParams._market, posParams._account);\n        ammPositionUpdate(state,\n                posParams._market,\n                TraderUpdate({\n                    _notional:notional,\n                    _isLong:posParams._isLong,\n                    _initialPrice:position.entryPrice,\n                    _fundingPaid:0,\n                    _isActive:true\n                }));\n    \n        \n        //Always check margin after any open\n        _requireMargin(state,\n                position,\n                posParams._market,\n                SignedBaseMath.oneDecimal());\n\n\n    }\n\n    function _liquidate(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        address _liquidator,\n        StorageStripsLib.Position storage position\n    ) private {\n        //The closePrice after the notional removed should be USED\n\n        (int256 ammFee,\n        int256 liquidatorFee,\n        int256 insuranceFee,\n        int256 funding_pnl_on_liquidation) = PnlLib.calcLiquidationFee(state,\n                                                        _market, \n                                                        position);\n\n        int256 closePrice = _market.closePosition(position.isLong, \n                                                    position.notional);\n        \n        require(closePrice > 0, \"CLOSE_PRICE_ERROR\");\n\n\n        //Calc how much debt we need to borrow for all possible situations\n        int256 debt = 0; \n        if (insuranceFee < 0){\n            debt += 0 - insuranceFee;\n            \n            insuranceFee = 0; //We don't pay insuranceFee\n        }\n\n        int256 liquidity = _market.getLiquidity() + debt;\n\n        // If not enough then we borrow only for amm and liquidator\n        // It's ok to borrow more than we need - then we will have enough for the next time. But logic will be simpler.\n        if (liquidity < (ammFee + liquidatorFee)){\n            debt = debt + ammFee + liquidatorFee - liquidity;\n            \n            insuranceFee = 0; // We don't pay insurance\n\n        }\n        // we have a little bit to pay to insurance but we DON'T borrow\n        else if(liquidity < (ammFee + liquidatorFee + insuranceFee)) \n        {\n            insuranceFee = liquidity - ammFee - liquidatorFee;\n            if (insuranceFee <= 0){\n                insuranceFee = 0; //Just don't pay fee in this case\n            }\n        }\n        \n        /*EVERYTHING paid from collateral:\n        * 1. Market fee - paid from strips balance to market\n        * 2. Insurance fee - paid from strips balance to insurance\n        * 3. Liquidator fee - paid from strips balance to liquidator (we use _returnCollateral)\n        */\n        if (debt > 0) {\n            _borrowInsurance(state,\n                            address(this), \n                            debt);//SO if we need to borrow we borrow to STRIPS balance, to keep logic unified\n\n        }\n\n        state.depositToMarket(_market, address(this), ammFee); //pay to Market\n\n        if (insuranceFee > 0){\n            state.depositToInsurance(address(this), insuranceFee); //pay to Insurance\n        }\n        _returnCollateral(state,\n                        _liquidator, \n                        liquidatorFee); // pay to liquidator\n\n        \n        \n        if (position.isLong == false){\n            funding_pnl_on_liquidation*= -1;\n        }\n        ammPositionUpdate(state,\n                _market,\n                TraderUpdate({\n                    _notional:position.notional,\n                    _isLong:position.isLong,\n                    _initialPrice:position.initialPrice,\n                    _fundingPaid:funding_pnl_on_liquidation,\n                    _isActive:false\n                }));\n\n        if (IStakeble(address(_market)).isRewardable()){\n            address rewarder = IRewardable(address(_market)).getRewarder();\n            IRewarder(rewarder).rewardTrader(position.trader, position.notional);\n        }\n\n\n        //ALWAYS CLOSE here: no need to read from storage, that's why 0\n        _unsetPostion(state,\n                    position,\n                    0,\n                    0,\n                    SignedBaseMath.oneDecimal(),\n                    0);\n        \n        position.isLiquidated = true;\n    }\n\n    /*\n    *\n    *   HELPERS\n    *\n    */\n    function _unsetPostion(\n        StorageStripsLib.State storage state,\n        StorageStripsLib.Position storage position,\n        int256 notional,\n        int256 collateral,\n        int256 _closeRatio,\n        int256 unrealizedPaid\n    ) private {\n        if (_closeRatio == SignedBaseMath.oneDecimal()){\n            state.unsetPosition(position);\n        }else{\n            \n            //It's just partly close\n            state.partlyClose(\n                position,\n                collateral,\n                notional,\n                unrealizedPaid      \n            );\n        }\n    }\n\n\n    function _requireMargin(\n        StorageStripsLib.State storage state,\n        StorageStripsLib.Position storage position,\n        IMarket _market,\n        int256 _closeRatio\n    ) private view {\n        (,int256 marginRatio) = PnlLib.getMarginRatio(state,\n                                                    _market,\n                                                    position,\n                                                    _closeRatio,\n                                                    false);  // based on Exit Price always\n\n        // Trader can't close position for liquidation                                            \n        _requireMarginRatio(state, \n                            marginRatio);\n    }\n\n\n    function _requireMarginRatio(\n        StorageStripsLib.State storage state,\n        int256 marginRatio\n    ) private view {\n        require(marginRatio >= state.getLiquidationRatio(), \"NOT_ENOUGH_MARGIN\");\n    }\n\n    function _requireSlippage(\n        int256 _requested,\n        int256 _current\n    ) private {\n        require(_requested >= _current, \"SLIPPAGE_EXCEEDED\");\n    }\n\n\n    function _requireNotional(\n        IMarket _market,\n        int256 notional\n    ) private returns (int256) {\n        require(notional > 0, \"NOTIONAL_LT_0\");\n\n        int256 maxNotional = _market.maxNotional();\n\n\n        require(notional <= maxNotional, \"NOTIONAL_GT_MAX\");\n\n        return maxNotional;\n    }\n\n\n    function _receiveCollateral(\n        StorageStripsLib.State storage state,\n        address _from, \n        int256 _amount\n    )private returns (int256) {\n        SafeERC20.safeTransferFrom(state.tradingToken, \n                                _from, \n                                address(this), \n                                uint(_amount));\n    }\n\n    function _returnCollateral(\n        StorageStripsLib.State storage state,\n        address _to, \n        int256 _amount\n    )private returns (int256) {\n        SafeERC20.safeTransfer(state.tradingToken, \n                                _to, \n                                uint(_amount));\n    }\n\n    function _payProfitOnPositionClose(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        address _from,\n        int256 _amount\n    ) private {\n        int256 insuranceFee = _amount.muld(state.riskParams.insuranceProfitOnPositionClosed);\n        int256 marketFee =_amount - insuranceFee;\n        require(insuranceFee > 0 && marketFee > 0, \"FEE_CALC_ERROR\");\n        state.depositToMarket(_market, \n                                _from, \n                                marketFee);\n\n        //Pay fee to insurance fund\n        state.depositToInsurance(_from, \n                                    insuranceFee);\n\n\n    }\n\n    //TODO: Can we store all the money on Strips? And just keep balances.\n    // The only advantage is that Insurance money is safe in case of hack\n    function _payPositionFee(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        address _from, \n        int256 _notional, \n        int256 _price\n    ) private returns (int256 marketFee, int256 insuranceFee, int256 daoFee) {\n\n        (marketFee, insuranceFee, daoFee) = PnlLib.calcPositionFee(state, \n                                                            _notional, \n                                                            _price);\n\n\n        require(marketFee > 0 && insuranceFee > 0, \"FEE_CALC_ERROR\");\n\n        state.depositToMarket(_market, \n                                _from, \n                                marketFee);\n        \n        //Pay fee to insurance fund\n        state.depositToInsurance(_from, \n                                insuranceFee);\n\n        //TODO: implement DAO here\n        state.depositToDao(_from,\n                            daoFee);\n    }\n\n    function _borrowInsurance(\n        StorageStripsLib.State storage state,\n        address _to, \n        int256 _amount         \n    ) private {\n\n        state.withdrawFromInsurance(_to, _amount);\n    }\n\n\n}"
    },
    "contracts/strips/State.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*\n    All new variables should be updated here\n    The new versions of Strips MUST inherit this \n    to keep consistent on storage layout \n */\nabstract contract SState\n{\n    address public pinger;\n    bool internal lock;\n    StorageStripsLib.State public g_state;\n}"
    },
    "contracts/lib/Pnl.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\n\nimport { IAssetOracle } from \"../interface/IAssetOracle.sol\";\nimport { IInsuranceFund } from \"../interface/IInsuranceFund.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\n\nimport { SignedBaseMath } from \"./SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"./StorageStrips.sol\";\nimport { StorageMarketLib } from \"./StorageMarket.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary PnlLib {\n    int256 constant ANN_PERIOD_SEC = 31536000;\n\n    using SignedBaseMath for int256;\n    using StorageStripsLib for StorageStripsLib.State;\n    using StorageMarketLib for StorageMarketLib.State;\n\n    // To not have stack too deep error\n    struct PosInfo {\n        bool isLong;\n        int256 initialPrice;\n        uint256 cummulativeIndex;\n        int256 notional;\n        int256 unrealizedPnl;\n    }\n\n    struct AmmPosInfo {\n        int256 notional;        \n        int256 initialPrice;\n        bool lastIsLong;\n    }\n\n\n    function getMarginRatio(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage _position,\n        int256 _notionalRatio,\n        bool is_market_price\n    ) internal view returns (int256 total_pnl, int256 marginRatio) {\n         total_pnl = calcUnrealizedPnl(state,\n                                        _market,\n                                        _position,\n                                        _notionalRatio,\n                                        is_market_price);\n        \n        //traderPnl already calculated for right ratio\n        if (_notionalRatio == SignedBaseMath.oneDecimal()){\n            marginRatio = (_position.collateral + total_pnl).divd(_position.notional);\n        }else{\n            int256 full_pnl = calcUnrealizedPnl(state,\n                                        _market,\n                                        _position,\n                                        SignedBaseMath.oneDecimal(),\n                                        is_market_price);\n                                        \n            // Margin ratio after partly close\n            marginRatio = (_position.collateral.muld(SignedBaseMath.oneDecimal() - _notionalRatio) + full_pnl - total_pnl).divd(_position.notional.muld(SignedBaseMath.oneDecimal() - _notionalRatio));\n        }\n    }\n\n    function getFundingUnrealizedPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position,\n        int256 _notionalRatio,\n        bool is_market_price\n    ) internal view returns (int256) {\n        (int256 funding_pnl,\n            int256 trading_pnl,\n            int256 total_pnl) = calcPnlParts(state, \n                                        _market, \n                                        position,\n                                        _notionalRatio,\n                                        is_market_price);\n        return funding_pnl;\n    }\n\n    \n    function calcUnrealizedPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position,\n        int256 _notionalRatio,\n        bool is_market_price\n    ) internal view returns (int256) {\n        (int256 funding_pnl,\n            int256 trading_pnl,\n            int256 total_pnl) = calcPnlParts(state, \n                                        _market, \n                                        position,\n                                        _notionalRatio,\n                                        is_market_price);\n        return total_pnl;\n    }\n\n    function getAmmTotalPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position\n    ) internal view returns (int256) {\n        (int256 funding_pnl,\n            int256 trading_pnl,\n            int256 total_pnl) = calcAmmPnlParts(state, \n                                        _market, \n                                        position);\n        return total_pnl;\n    }\n\n\n    function getAmmFundingPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position\n    ) internal view returns (int256) {\n        (int256 funding_pnl,\n            int256 trading_pnl,\n            int256 total_pnl) = calcAmmPnlParts(state, \n                                        _market, \n                                        position);\n        return funding_pnl;\n    }\n\n\n    function getAmmAllPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position\n    ) internal view returns (int256 funding_pnl,\n                            int256 trading_pnl,\n                            int256 total_pnl) {\n        (funding_pnl,\n            trading_pnl,\n            total_pnl) = calcAmmPnlParts(state, \n                                        _market, \n                                        position);\n    }\n\n    function getAllUnrealizedPnl(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position,\n        int256 _notionalRatio,\n        bool is_market_price\n    ) internal view returns (int256 funding_pnl,\n                            int256 trading_pnl,\n                            int256 total_pnl) {\n        (funding_pnl,\n            trading_pnl,\n            total_pnl) = calcPnlParts(state, \n                                        _market, \n                                        position,\n                                        _notionalRatio,\n                                        is_market_price);\n    }\n\n\n    //It can calc partlyPnl \n    function calcPnlParts(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position,\n        int256 _notionalRatio,\n        bool is_market_price\n    ) internal view returns (int256 funding_pnl,\n                            int256 trading_pnl,\n                            int256 total_pnl)\n    {\n        \n        PosInfo memory pos_info;\n\n        //Save gas on reading\n        pos_info.isLong = position.isLong;\n        pos_info.initialPrice = position.initialPrice;\n        pos_info.notional = position.notional;\n        pos_info.unrealizedPnl = position.unrealizedPnl;\n        if (_notionalRatio != SignedBaseMath.oneDecimal()){\n            pos_info.notional = pos_info.notional.muld(_notionalRatio);\n            pos_info.unrealizedPnl = pos_info.unrealizedPnl.muld(_notionalRatio);\n        }\n\n        \n\n        int256 _price;\n\n        if (is_market_price == true){\n            _price = _market.currentPrice();\n        }else{\n            _price = _market.priceChange(0 - pos_info.notional, \n                                            pos_info.isLong);\n        }\n        \n        //DONE: after 24-June discussion\n        trading_pnl = pos_info.notional.muld(_price - pos_info.initialPrice).divd(_price);\n\n\n                //scalar - in seconds since epoch\n        int256 time_elapsed = int256(block.timestamp - position.initialTimestamp);\n\n        //we have funding_pnl ONLY for next block\n        if (time_elapsed > 0){\n            int256 oracle_avg = calcOracleAverage(_market, position.cummulativeIndex);\n\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());      \n\n            //DONE: after 24-June discussion\n            funding_pnl = pos_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - pos_info.notional.muld(pos_info.initialPrice.muld(proportion));\n        }\n\n        funding_pnl += pos_info.unrealizedPnl;\n\n        if (pos_info.isLong){\n            total_pnl = funding_pnl + trading_pnl;\n        }else{\n            total_pnl = 0 - trading_pnl - funding_pnl;\n        }\n    }\n\n    function calcAmmPnlParts(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage ammPosition\n    ) internal view returns (int256 funding_pnl,\n                            int256 trading_pnl,\n                            int256 total_pnl)\n    {\n\n        int256 _price = _market.currentPrice();\n\n\n        //trading calcs always based on current notional\n        trading_pnl = ammPosition.notional.muld(_price - ammPosition.initialPrice).divd(_price);\n        if (ammPosition.notional == 0){\n            trading_pnl = ammPosition.savedTradingPnl;\n        }\n\n        AmmPosInfo memory amm_info = AmmPosInfo({\n            notional:ammPosition.lastNotional,      \n            initialPrice:ammPosition.lastInitialPrice,\n            lastIsLong:ammPosition.lastIsLong\n        });\n\n\n        if (ammPosition.initialBlockNumber != block.number){\n            amm_info.notional = ammPosition.notional;\n            amm_info.initialPrice = ammPosition.initialPrice;\n            amm_info.lastIsLong = ammPosition.isLong;\n        }\n\n        int256 time_elapsed = int256(block.timestamp - ammPosition.initialTimestamp);\n\n        int256 instantFunding;\n        if (time_elapsed > 0){\n            int256 oracle_avg;\n\n            oracle_avg = calcOracleAverage(_market, ammPosition.cummulativeIndex);\n\n            int256 proportion = time_elapsed.toDecimal().divd(ANN_PERIOD_SEC.toDecimal());     \n\n            instantFunding = amm_info.notional.muld(oracle_avg.muld(time_elapsed.toDecimal())) - amm_info.notional.muld(amm_info.initialPrice.muld(proportion));\n            \n            //SUPER carefull here - we need to know the PREVIOUS sign if we calc based on historical value\n            if (ammPosition.lastIsLong == false){\n                instantFunding *= -1;\n            }\n\n            \n            \n        }\n\n\n        funding_pnl = instantFunding + ammPosition.unrealizedPnl;\n\n\n        //BUT here we are using current isLong of amm\n        if (ammPosition.notional == 0){\n            total_pnl = funding_pnl + trading_pnl;\n        }\n        else if (ammPosition.isLong == true){\n            total_pnl = funding_pnl + trading_pnl;\n        }else{\n            total_pnl = 0 - trading_pnl + funding_pnl;\n        }\n\n    }\n\n\n\n    function calcOracleAverage(\n        IMarket _market,\n        uint256 fromIndex\n    ) internal view returns (int256) {        \n        return IAssetOracle(_market.getAssetOracle()).calcOracleAverage(fromIndex);\n    }\n\n    function calcPositionParams(\n        StorageStripsLib.State storage state,\n        IMarket _market, \n        address _account, \n        bool is_market_price\n    ) internal view returns (int256 funding_pnl, \n                            int256 trading_pnl,\n                            int256 total_pnl,\n                            int256 margin_ratio)\n    {\n        StorageStripsLib.Position storage _position = state.getPosition(_market, _account);\n\n        (funding_pnl,\n          trading_pnl,\n          total_pnl) = calcPnlParts(state, \n                                    _market, \n                                    _position,\n                                    SignedBaseMath.oneDecimal(),\n                                    is_market_price);\n        \n        margin_ratio = (_position.collateral + total_pnl).divd(_position.notional);\n    }\n\n    /*\n    *\n    *   FEE CALCULATIOSN\n    *\n    */\n\n    function calcLiquidationFee(\n        StorageStripsLib.State storage state,\n        IMarket _market,\n        StorageStripsLib.Position storage position\n    ) internal view returns (int256 ammFee,\n                            int256 liquidatorFee,\n                            int256 insuranceFee,\n                            int256 funding_pnl_liquidated)\n    {\n\n        //we calc PNL based on price after the position is closed\n        (int256 funding_pnl,\n            int256 trading_pnl,\n            int256 unrealizedPnl) = getAllUnrealizedPnl(state,\n                                                _market, \n                                                position,\n                                                SignedBaseMath.oneDecimal(),\n                                                false);\n\n\n        funding_pnl_liquidated = funding_pnl;\n\n        if (unrealizedPnl < 0){\n            unrealizedPnl *= -1;\n        }\n\n        int256 netEquity = position.collateral - unrealizedPnl;\n\n        //Market and liquidator Fee are always the same\n        ammFee = unrealizedPnl.muld(state.riskParams.marketFeeRatio);\n        liquidatorFee = unrealizedPnl.muld(state.riskParams.liquidatorFeeRatio);\n\n        //easy to read is more important than optimization now\n        int256 insuranceFeeRatio = SignedBaseMath.oneDecimal() - state.riskParams.liquidatorFeeRatio - state.riskParams.marketFeeRatio;\n\n        insuranceFee = unrealizedPnl.muld(insuranceFeeRatio);\n\n        insuranceFee += netEquity;\n    }\n\n    function calcPositionFee(\n        StorageStripsLib.State storage state,\n        int256 _notional,\n        int256 _price\n    ) internal view returns (int256 fee, int256 iFee, int256 daoFee) {\n        int256 calcPrice = _price;\n        if (calcPrice < state.riskParams.minimumPricePossible){\n            calcPrice = state.riskParams.minimumPricePossible;\n        }\n\n        int256 baseFee = calcPrice.muld(_notional).muld(SignedBaseMath.onePercent());\n\n        int256 ammFeeRatio = state.riskParams.fundFeeRatio;\n        int256 daoFeeRatio = state.riskParams.daoFeeRatio;\n        int256 iFeeRatio = SignedBaseMath.oneDecimal() - ammFeeRatio - daoFeeRatio;\n\n        require((ammFeeRatio + daoFeeRatio + iFeeRatio) <= SignedBaseMath.oneDecimal(), \"FEE_SUM_GT_1\");\n\n        fee = ammFeeRatio.muld(baseFee);\n        daoFee = daoFeeRatio.muld(baseFee);\n        iFee = iFeeRatio.muld(baseFee);\n    }\n}"
    },
    "contracts/mock/MockStrips.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Strips } from \"../strips/Strips.sol\";\nimport { StorageMarketLib } from \"../lib/StorageMarket.sol\";\nimport { StakingImpl } from \"../impl/StakingImpl.sol\";\nimport { IUniswapV2Pair } from \"../external/interfaces/IUniswapV2Pair.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\n\ncontract MockStrips is Strips {\n    int256 _assetPnl;\n\n    function ensureFunds(address impl, IStripsLpToken _slp, int256 _required_amount) external {\n    }\n\n    function testIfAlive() external {\n    }\n\n    function getKeepAliveInterval() external view returns (uint256 keepAliveInterval) {\n        return g_state.keepAliveInterval;\n    }\n\n    function assetPnl(address _asset) external view override returns (int256){\n        return _assetPnl;\n    }\n\n    function setAssetPnl(int256 _pnl) external {\n        _assetPnl = _pnl;\n    }\n}\n"
    },
    "contracts/token/SUSD.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\nimport { IStrips } from \"../interface/IStrips.sol\";\nimport { IStripsLpToken } from \"../interface/IStripsLpToken.sol\";\nimport { ISUSD } from \"../interface/ISUSD.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n//SLPToken - per market\ncontract SUSD is \n    ERC20, \n    Ownable,\n    ReentrancyGuard,\n    ISUSD\n{\n    \n    mapping (address => bool) public users;\n    uint8 private DECIMALS;\n    uint public MAXPERUSER;\n\n    constructor() \n        ERC20(\"Strips USD\", \"SUSD\") \n    {\n        DECIMALS = 18;\n        MAXPERUSER = 1000 * (10 ** DECIMALS);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return DECIMALS;\n    }\n\n\n    function receiveSUSD() external override nonReentrant{\n        require(users[msg.sender] == false, \"MAX_RECEIVED\");\n\n        _mint(msg.sender, MAXPERUSER);\n\n        users[msg.sender] = true;\n    }\n\n\n    function mint(address to, uint256 amount) external override onlyOwner {\n        require(amount > 0, \"Wrong amount\");\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) external override onlyOwner {\n        require(amount > 0, \"Wrong amount\");\n        _burn(from, amount);\n    }\n}\n"
    },
    "contracts/interface/ISUSD.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISUSD is IERC20 {\n    function receiveSUSD() external;\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n}\n"
    },
    "contracts/token/STRP.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title STRP token contract\n * @dev Simple ERC20 contract with limit supply for 100mln tokens. 18 decimals by default\n * Exist on Ethereum. For L2 using bridges\n * @author Strips Finance\n **/\ncontract STRP is \n    ERC20,\n    Ownable\n{\n    uint constant MAX_SUPPLY = 100000000 ether;\n\n    constructor() \n        ERC20(\"Strips Token\", \"STRP\") \n    {\n        _mint(msg.sender, MAX_SUPPLY);\n    }\n}\n"
    },
    "contracts/mock/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface IMockToken is IERC20 {\n    function mint(address _receiver, uint256 _amount) external;\n    function burn(address _spender, uint256 _amount) external;\n    function setAmount(address _receiver, uint256 _amount) external;\n}\n\ncontract MockToken is IMockToken, ERC20 {\n    uint8 private _decimals;\n\n    uint8 constant DECIMALS = 18;\n\n    constructor(\n    ) ERC20(\"Mocked Token\", \"MockedSymbol\") {\n        _decimals = DECIMALS;\n    }\n\n    function mint(address _receiver, uint256 _amount) external override {\n        _mint(_receiver, _amount);\n    }\n\n    function setAmount(address _receiver, uint256 _amount) external override {\n        _burn(_receiver, balanceOf(_receiver)); //burn all first\n\n        _mint(_receiver, _amount);\n    }\n\n    function burn(address _spender, uint256 _amount) external override {\n        _burn(_spender, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/oracle/LiquidationKeeper.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {IStrips} from \"../interface/IStrips.sol\";\nimport { SignedBaseMath } from \"../lib/SignedBaseMath.sol\";\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LiquidationKeeper is KeeperCompatibleInterface, AccessControl {\n    using SignedBaseMath for int256;\n    using Address for address;\n\n    event LiquidatorDone(\n        uint indexed length, \n        uint indexed liquidated, \n        uint indexed reverted,\n        uint positionIndex\n    );\n\n\n    address public rewardToken;\n\n    IStrips public strips;\n    // To efficiently iterate large array of positions (hundreds),\n    // Liquidation Keeper remembers the last index it processed (i.e. cursor)\n    uint256 public positionIndex;\n    // size specifies how many positions can be processed per single call.\n    // depends on many factors and to be selected experimentally\n    uint256 public size;\n\n    constructor(IStrips _strips,\n                address _rewardToken,\n                uint256 _size) {\n        strips = _strips;\n        size = _size;\n        rewardToken = _rewardToken;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @dev By original Chainlink Keeper specification, the keeper process calls `checkUpkeep` method\n     * in order to determine if your contract requires some work to be done. Since Strips is interested\n     * in the most recent data, we return `true` unconditionally. Input data gets ignored.\n     * @return upkeepNeeded Indicates whether the Keeper should call performUpkeep or not.\n     **/\n    function checkUpkeep(bytes calldata) external view override returns (bool upkeepNeeded, bytes memory) {\n        upkeepNeeded = true;\n    }\n\n    /**\n     * @dev Liquidation Oracles execute the `performUpkeep` method to trigger liquidations. Calldata is ignored.\n     **/\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        uint liquidated = 0;\n        uint reverted = 0;\n        bool found = false;\n\n        StorageStripsLib.PositionMeta[] memory liqPositions = strips.getPositionsForLiquidation(positionIndex, size);\n        \n        for (uint256 i; i < liqPositions.length; i++) {\n            /*\n                By default liquidatePosition will be reverted if something goes wrong OR position is not for liquidation\n                BUT\n                we don't want to stop loop if one of the liquidation is reverted\n            */\n            if (liqPositions[i].isActive){\n                found = true;\n\n                (bool success, bytes memory returndata) = address(strips).call{value: 0}(\n                    abi.encodeWithSelector(strips.liquidatePosition.selector, liqPositions[i]._market, liqPositions[i]._account)\n                );\n                \n                /*For stats */\n                if (success){\n                    liquidated += 1;\n                }else{\n                    reverted += 1;\n                }\n            }\n        }\n\n        // save cursor for next iteration or reset to 0 if overflow position count boundary\n        if (positionIndex + size >= strips.getPositionsCount()) {\n            positionIndex = 0;\n        } else {\n            positionIndex += size;\n        }\n\n        if (found){\n            emit LiquidatorDone(\n                liqPositions.length,\n                liquidated,\n                reverted,\n                positionIndex\n            );\n        }\n\n        strips.ping();\n    }\n\n    /**\n     * @dev Set position index (cursor). Called by admin only.\n     * @param _positionIndex new cursor position\n     **/\n    function setPositionIndex(uint256 _positionIndex) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        positionIndex = _positionIndex;\n    }\n\n    /**\n     * @dev Set batch size (how many positions can be processed per call).\n     * @param _size number of positions elements to process per call\n     **/\n    function setSize(uint256 _size) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        size = _size;\n    }\n\n    /**\n     * @dev Change strips (proxy) address to new address\n     * @param _strips new Strips address\n     **/\n    function setStrips(IStrips _strips) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        strips = _strips;\n    }\n\n    /**\n     * @dev Move USDC reward for liquidation \n     * @param _to address to move funds to\n     **/\n    function withdrawRewards(address _to) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint balance = IERC20(rewardToken).balanceOf(address(this));\n        if (balance == 0){\n            return;\n        }\n\n        SafeERC20.safeTransfer(IERC20(rewardToken), \n                                    _to, \n                                    balance);\n    }\n\n    /**\n     * @dev USDC by default, but can be changed \n     * @param _newToken address to move funds to\n     **/\n    function changeRewardToken(address _newToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        rewardToken = _newToken;\n    }\n\n}"
    },
    "contracts/interface/IStripsTesting.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { IMarket } from \"./IMarket.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IInsuranceFund } from \"./IInsuranceFund.sol\";\nimport { IStripsLpToken } from \"./IStripsLpToken.sol\";\nimport { IMarket } from \"../interface/IMarket.sol\";\n\nimport { StorageStripsLib } from \"../lib/StorageStrips.sol\";\n\ninterface IStripsTesting {\n    function check_trader(address _trader, IMarket _market) external;\n\n    function check_market(address _market) external;\n\n    function check_insurance(address _insurance) external;\n}\n"
    },
    "contracts/interface/IStripsToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStripsToken is IERC20 {\n    function mint(address account, int256 amount) external;\n}\n"
    },
    "contracts/mock/MockIrsMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IrsMarket } from \"../markets/IrsMarket.sol\";\n\ncontract MockIrsMarket is IrsMarket {\n}\n"
    },
    "contracts/mock/MockSignedBaseMath.sol": {
      "content": "\npragma solidity ^0.8.0;\n\nimport {SignedBaseMath} from \"../lib/SignedBaseMath.sol\";\n\ncontract MockSignedBaseMath {\n    function to18Decimal(int256 x, uint8 tokenDecimals) public pure returns (int256) {\n       return SignedBaseMath.to18Decimal(x, tokenDecimals); \n    }\n\n    function from18Decimal(int256 x, uint8 tokenDecimals) public pure returns (int256) {\n        return SignedBaseMath.from18Decimal(x, tokenDecimals);\n    }\n\n    function toDecimal2(int256 x, uint8 decimals) public pure returns (int256) {\n        return SignedBaseMath.toDecimal(x, decimals);\n    }\n\n    function toDecimal1(int256 x) public pure returns (int256) {\n        return SignedBaseMath.toDecimal(x);\n    }\n\n    function oneDecimal() public pure returns (int256) {\n        return SignedBaseMath.oneDecimal();\n    }\n\n    function onePercent() public pure returns (int256) {\n        return SignedBaseMath.onePercent();\n    }\n\n    function muld(int256 x, int256 y) public pure returns (int256) {\n        return SignedBaseMath.muld(x, y);\n    }\n\n    function divd(int256 x, int256 y) public pure returns (int256) {\n        return SignedBaseMath.divd(x, y);\n    }\n\n    function unit(uint8 decimals) public pure returns (int256) {\n        return SignedBaseMath.unit(decimals);\n    }\n}"
    },
    "contracts/mock/MockUniswapLpOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { UniswapLpOracle } from \"../oracle/UniswapLpOracle.sol\"; \n\ncontract MockUniswapLpOracle is UniswapLpOracle {\n    constructor(address _router,\n                address _strp,\n                address _pair,\n                bool _instant)\n        UniswapLpOracle(\n            _router,\n            _strp,\n            _pair,\n            _instant\n        )\n    {}\n\n    function performUpkeep(bytes calldata _data) external virtual override {\n        avgPairPrice = abi.decode(_data, (int256));\n\n        isActive = true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}